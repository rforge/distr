
R version 2.12.1 Patched (2011-01-03 r53910)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SweaveListingUtils"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('SweaveListingUtils')
Loading required package: startupmsg
:startupmsg>  Utilities for start-up messages (version 0.7.1)
:startupmsg> 
:startupmsg>  For more information see ?"startupmsg",
:startupmsg>  NEWS("startupmsg")

:SweaveListingUtils>  Utilities for Sweave together with
:SweaveListingUtils>  TeX listings package (version 0.5)
:SweaveListingUtils> 
:SweaveListingUtils>  Some functions from package 'base'
:SweaveListingUtils>  are intentionally masked ---see
:SweaveListingUtils>  SweaveListingMASK().
:SweaveListingUtils> 
:SweaveListingUtils>  Note that global options are
:SweaveListingUtils>  controlled by
:SweaveListingUtils>  SweaveListingoptions() ---c.f.
:SweaveListingUtils>  ?"SweaveListingoptions".
:SweaveListingUtils> 
:SweaveListingUtils>  For more information see
:SweaveListingUtils>  ?"SweaveListingUtils",
:SweaveListingUtils>  NEWS("SweaveListingUtils")
:SweaveListingUtils>  There is a vignette to this
:SweaveListingUtils>  package; try
:SweaveListingUtils>  vignette("ExampleSweaveListingUtils").


Attaching package: 'SweaveListingUtils'

The following object(s) are masked from 'package:base':

    library, require

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SweaveListingMASK")
> ### * SweaveListingMASK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SweaveListingMASK
> ### Title: Masking of/by other functions in package "SweaveListingUtils"
> ### Aliases: SweaveListingMASK MASKING
> ### Keywords: programming documentation
> 
> ### ** Examples
> 
> SweaveListingMASK()
######################################################################
#  On masking of and by other functions in package "SweaveListingUtils"       
######################################################################

Attention:

*** intentional masking: ***

To be able to use the usual calls to 'library' resp. 'require'
but at the same time register the new symbols for "nice" printing
with TeX package 'listings' with the possibility to "tune" the
corresponding keywordstyle for both the package required/"library"-ed
and respective intermediate packages loaded/attached automatically,
we intentionally mask base functions 'library' and 'require' --- 
however all these functions may still be used in exactly the same 
way as before masking.

Still, for completely returning to the usual behaviour (i.e.; stop
issuing TeX code for registering new keywords) and unmasking 
the original versions of 'library' and 'require', at the end of 
your .Rnw file, you should include an Sweave chunk like

<<cleanup, echo=FALSE>>=
unloadNamespace("SweaveListingUtils")
@

*** non-intentional masking: ***

... nothing discovered so far ...
> 
> 
> 
> cleanEx()
> nameEx("SweaveListingOptions")
> ### * SweaveListingOptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SweaveListingOptions
> ### Title: Function to change the global options of the package
> ###   'SweaveListingUtils'
> ### Aliases: SweaveListingOptions SweaveListingoptions
> ###   getSweaveListingOption Rset Rdset Rin Rout Rcode Rcolor Rbcolor
> ###   Routcolor RRecomdcolor Rcommentcolor pkg pkv Keywordstyle
> ###   Recomd.Keywordstyle interm.Keywordstyle intermediate overwrite
> ###   inSweave fromRForge base.url addRset addRdset fileCommand pkgCommand
> ### Keywords: misc utilities
> 
> ### ** Examples
> 
> SweaveListingOptions()
$Rset
$Rset$fancyvrb
[1] "true"

$Rset$escapechar
[1] "`"

$Rset$extendedchars
[1] "false"

$Rset$language
[1] "R"

$Rset$basicstyle
[1] "{\\color{Rcolor}\\small}"

$Rset$keywordstyle
[1] "{\\bf\\color{Rcolor}}"

$Rset$commentstyle
[1] "{\\color{Rcommentcolor}\\ttfamily\\itshape}"

$Rset$literate
[1] "{\"}{\\texttt{\"}}1{<-}{{$\\leftarrow$}}2{<<-}{{$\\twoheadleftarrow$}}2{~}{{$\\sim$}}1{<=}{{$\\leq$}}2{>=}{{$\\geq$}}2{^}{{$\\scriptstyle\\wedge$}}1"

$Rset$alsoother
[1] "{$}"

$Rset$alsoletter
[1] "{.<-}"

$Rset$otherkeywords
[1] "{!,!=,~,$,*,\\&,\\%/\\%,\\%*\\%,\\%\\%,<-,<<-,/}"

$Rset$escapeinside
[1] "{(*}{*)}"


$Rdset
$Rdset$fancyvrb
[1] "true"

$Rdset$language
[1] "Rd"

$Rdset$keywordstyle
[1] "{\\bf}"

$Rdset$basicstyle
[1] "{\\color{black}\\footnotesize}"

$Rdset$commentstyle
[1] "{\\ttfamily\\itshape}"

$Rdset$alsolanguage
[1] "R"


$Rin
$Rin$style
[1] "Rstyle"

$Rin$fancyvrb
[1] "true"

$Rin$basicstyle
[1] "\\color{Rcolor}\\small"


$Rout
$Rout$fancyvrb
[1] "false"

$Rout$basicstyle
[1] "\\color{Routcolor}\\small"


$Rcode
$Rcode$style
[1] "Rstyle"

$Rcode$fancyvrb
[1] "true"

$Rcode$fontshape
[1] "sl"

$Rcode$basicstyle
[1] "\\color{Rcolor}"


$Rcolor
[1] 0.0 0.5 0.5

$RRecomdcolor
[1] 0.0 0.6 0.4

$Rbcolor
[1] 0.0 0.6 0.6

$Routcolor
[1] 0.461 0.039 0.102

$Rcommentcolor
[1] 0.101 0.043 0.432

$pkv
[1] "2.1.4"

$pkg
[1] "distr"

$Keywordstyle
[1] "{\\bf}"

$Recomd.Keywordstyle
[1] "{\\bf\\color{RRecomdcolor}}"

$interm.Keywordstyle
[1] "{\\bf\\color{Rbcolor}}"

$overwrite
[1] FALSE

$intermediate
[1] TRUE

$inSweave
[1] FALSE

$fromRForge
[1] TRUE

$base.url
[1] "http://r-forge.r-project.org/scm/viewvc.php/*checkout*/pkg/"

$addRset
[1] TRUE

$addRdset
[1] TRUE

$addRinset
[1] TRUE

$addRoutset
[1] TRUE

$addRcodeset
[1] TRUE

$fileCommand
[1] "\\def\\file#1{{\\tt #1}}"

$pkgCommand
[1] "\\def\\pkg#1{{\\tt \"#1\"}}"

> SweaveListingOptions("Rout")
$Rout
$Rout$fancyvrb
[1] "false"

$Rout$basicstyle
[1] "\\color{Routcolor}\\small"


> SweaveListingOptions("Rout" = c(0,0,0))
> # or
> SweaveListingOptions(Rout = c(0,1,0))
> getSweaveListingOption("Rout")
[1] 0 1 0
> 
> 
> 
> cleanEx()
> nameEx("SweaveListingPreparations")
> ### * SweaveListingPreparations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SweaveListingPreparations
> ### Title: SweaveListingPreparations
> ### Aliases: SweaveListingPreparations
> ### Keywords: utilities
> 
> ### ** Examples
> 
> SweaveListingPreparations()
%------------------------------------------------------------------------------%
%Preparations for Sweave and Listings
%------------------------------------------------------------------------------%
%
\RequirePackage{color}
\definecolor{Rcolor}{rgb}{0, 0.5, 0.5}
\definecolor{RRecomdcolor}{rgb}{0, 0.6, 0.4}
\definecolor{Rbcolor}{rgb}{0, 0.6, 0.6}
\definecolor{Routcolor}{rgb}{0.461, 0.039, 0.102}
\definecolor{Rcommentcolor}{rgb}{0.101, 0.043, 0.432}
%------------------------------------------------------------------------------%
\lstdefinelanguage{Rd}[common]{TeX}%
{moretexcs={acronym,alias,arguments,author,bold,cite,%
          code,command,concept,cr,deqn,describe,%
          description,details,dfn,doctype,dots,%
          dontrun,dontshow,donttest,dQuote,%
          email,emph,enc,encoding,enumerate,env,eqn,%
          examples,file,format,if,ifelse,item,itemize,kbd,keyword,%
          ldots,link,linkS4class,method,name,note,%
          option,out,pkg,preformatted,R,Rdopts,Rdversion,%
          references,S3method,S4method,Sexpr,samp,section,%
          seealso,source,sp,special,sQuote,strong,%
          subsection,synopsis,tab,tabular,testonly,%
          title,url,usage,value,var,verb},
   sensitive=true,%
   morecomment=[l]\%% 2008/9 Peter Ruckdeschel
}[keywords,comments]%%
%------------------------------------------------------------------------------%

%----------------
\lstdefinestyle{RstyleO1}{fancyvrb=true,escapechar=`,extendedchars=false,%
                          language=R,%
                          basicstyle={\color{Rcolor}\small},%
                          keywordstyle={\bf\color{Rcolor}},%Warning in print.taglist(taglist, LineLength = LineLength, offset.start = nchar(startS),  :
  Some elements of taglist are too long

                          commentstyle={\color{Rcommentcolor}\ttfamily\itshape},%
                          literate={"}{\texttt{"}}1{<-}{{$\leftarrow$}}2{<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$\scriptstyle\wedge$}}1,%
                          alsoother={$},%
                          alsoletter={.<-},%
                          otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                          escapeinside={(*}{*)}}%
%----------------
\lstdefinestyle{Rstyle}{style=RstyleO1}

%----------------
\lstdefinestyle{Rdstyle}{fancyvrb=true,language=Rd,keywordstyle={\bf},%
                         basicstyle={\color{black}\footnotesize},%
                         commentstyle={\ttfamily\itshape},%
                         alsolanguage=R}%
%----------------
%------------------------------------------------------------------------------%
\global\def\Rlstset{\lstset{style=Rstyle}}%
\global\def\Rdlstset{\lstset{style=Rdstyle}}%
%------------------------------------------------------------------------------%
\global\def\Rinlstset{\lstset{style=Rinstyle}}%
\global\def\Routlstset{\lstset{style=Routstyle}}%
\global\def\Rcodelstset{\lstset{style=Rcodestyle}}%
%------------------------------------------------------------------------------%
\Rlstset
%------------------------------------------------------------------------------%
%copying relevant parts of Sweave.sty
%------------------------------------------------------------------------------%
%
\RequirePackage{graphicx,fancyvrb}%
\IfFileExists{upquote.sty}{\RequirePackage{upquote}}{}%

\RequirePackage{ifthen}%
\newboolean{Sweave@gin}%
\setboolean{Sweave@gin}{true}%
\setkeys{Gin}{width=0.8\textwidth}%
\newboolean{Sweave@ae}
\setboolean{Sweave@ae}{true}%
\RequirePackage[T1]{fontenc}
\RequirePackage{ae}
%
\newenvironment{Schunk}{}{}

\newcommand{\Sconcordance}[1]{% 
\ifx\pdfoutput\undefined% 
\csname newcount\endcsname\pdfoutput\fi% 
\ifcase\pdfoutput\special{#1}% 
\else\immediate\pdfobj{#1}\fi} 

%------------------------------------------------------------------------------%
% ---- end of parts of Sweave.sty
%------------------------------------------------------------------------------%
%
% ---- input 
\lstdefinestyle{RinstyleO}{style=Rstyle,fancyvrb=true,%
                           basicstyle=\color{Rcolor}\small}%
\lstdefinestyle{Rinstyle}{style=RinstyleO}
\lstnewenvironment{Sinput}{\Rinlstset}{\Rlstset}
%
% ---- output 
\lstdefinestyle{RoutstyleO}{
V1=0,V2=1,V3=0}%
\lstdefinestyle{Routstyle}{style=RoutstyleO}
\lstnewenvironment{Soutput}{\Routlstset}{\Rlstset}
%
% ---- code 
\lstdefinestyle{RcodestyleO}{style=Rstyle,fancyvrb=true,fontshape=sl,%
                             basicstyle=\color{Rcolor}}%
\lstdefinestyle{Rcodestyle}{style=RcodestyleO}
\lstnewenvironment{Scode}{\Rcodelstset}{\Rlstset}
%
%------------------------------------------------------------------------------%
\let\code\lstinline
\def\Code#1{{\tt\color{Rcolor} #1}}
\def\file#1{{\tt #1}} 
\def\pkg#1{{\tt "#1"}} 
\newcommand{\pkgversion}{{\tt 2.3}}
%------------------------------------------------------------------------------%
Warning in kws[idxRec] <- rep(getSweaveListingOption("Recomd.Keywordstyle"),  :
  number of items to replace is not a multiple of replacement length

\lstdefinestyle{RstyleO2}{style=RstyleO1,%
% --------------------------
% Registration of package SweaveListingUtils
% --------------------------
morekeywords={[2]taglist,setToBeDefinedPkgs,setBaseOrRecommended,readSourceFromRForge,readPkgVersion,%
lstsetRout,lstsetRin,lstsetRd,lstsetRcode,lstsetRall,%
lstsetR,lstsetLanguage,lstset,lstinputSourceFromRForge,lstdefRstyle,%
isBaseOrRecommended,getSweaveListingOption,copySourceFromRForge,changeKeywordstyles,SweaveListingoptions,%
SweaveListingPreparations,SweaveListingOptions,SweaveListingMASK%
},%
keywordstyle={[2]{\bf}},%
%
% --------------------------
% Registration of package startupmsg
% --------------------------
morekeywords={[3]suppressStartupMessages,startupType,startupPackage,startupMessage,startupEndline,%
readVersionInformation,readURLInformation,pointertoNEWS,onlytypeStartupMessages,mystartupMessage,%
mySMHandler,infoShow,buildStartupMessage,TOBEDONE,StartupMessage,%
NEWS%
},%
keywordstyle={[3]{\bf}},%
%
% --------------------------
% Registration of package stats [recommended or base] 
% --------------------------
morekeywords={[4]xtabs,write.ftable,window<-,wilcox.test,weighted.residuals,%
weighted.mean,vcov,varimax,variable.names,var.test,%
update.formula,update.default,tsp<-,tsdiag,tsSmooth,%
ts.union,ts.plot,ts.intersect,toeplitz,terms.terms,%
terms.formula,terms.default,terms.aovlist,termplot,t.test,%
supsmu,summary.stepfun,summary.mlm,summary.manova,summary.lm,%
summary.infl,summary.glm,summary.aovlist,summary.aov,stl,%
stepfun,stat.anova,splinefunH,spectrum,spec.taper,%
spec.pgram,spec.ar,sortedXyData,smoothEnds,smooth.spline,%
smooth,simulate,shapiro.test,setNames,selfStart,%
se.contrast,screeplot,scatter.smooth,runmed,rstudent.lm,%
rstudent.glm,rstandard.lm,rstandard.glm,rmultinom,residuals.lm,%
residuals.glm,residuals.default,reshapeWide,reshapeLong,reshape,%
reorder,rect.hclust,read.ftable,r2dtable,quasipoisson,%
quasibinomial,quantile.default,quade.test,qqnorm.default,qbirthday,%
prop.trend.test,prop.test,promax,printCoefmat,print.ts,%
print.terms,print.logLik,print.lm,print.integrate,print.infl,%
print.glm,print.ftable,print.formula,print.family,print.density,%
print.coefmat,print.anova,princomp,predict.poly,predict.mlm,%
predict.lm,predict.glm,prcomp,ppr,power.t.test,%
power.prop.test,power.anova.test,polym,poisson.test,plot.ts,%
plot.stepfun,plot.spec.phase,plot.spec.coherency,plot.spec,plot.mlm,%
plot.lm,plot.ecdf,plot.density,plot.TukeyHSD,plclust,%
pbirthday,pairwise.wilcox.test,pairwise.table,pairwise.t.test,pairwise.prop.test,%
pacf,p.adjust.methods,p.adjust,order.dendrogram,oneway.test,%
numericDeriv,nls.control,nls,nlminb,naresid,%
naprint,napredict,na.pass,na.omit,na.fail,%
na.exclude,na.contiguous,na.action,mood.test,monthplot,%
model.weights,model.tables,model.response,model.offset,model.matrix.lm,%
model.matrix.default,model.matrix,model.frame.lm,model.frame.glm,model.frame.default,%
model.frame.aovlist,model.frame,model.extract,medpolish,median.default,%
mcnemar.test,mauchly.test,mauchley.test,mantelhaen.test,manova,%
makepredictcall,makeARIMA,make.link,ls.print,ls.diag,%
logLik,loess.smooth,loess.control,loess,loadings,%
lm.wfit.null,lm.wfit,lm.influence,lm.fit.null,lm.fit,%
lines.ts,line,lag.plot,lag,ksmooth,%
ks.test,kruskal.test,knots,kmeans,kernel,%
kernapply,isoreg,is.tskernel,is.ts,is.stepfun,%
is.mts,is.leaf,is.empty.model,inverse.gaussian,interaction.plot,%
integrate,influence.measures,heatmap,hclust,hatvalues.lm,%
hatvalues,glm.fit.null,glm.fit,glm.control,get_all_vars,%
getInitial,friedman.test,fligner.test,fitted.values,fisher.test,%
filter,factor.scope,factanal,expand.model.frame,estVar,%
embed,eff.aovlist,ecdf,dummy.coef,drop.terms,%
drop.scope,dmultinom,dist,diffinv,diff.ts,%
dfbeta,df.residual,df.kernel,deriv3.formula,deriv3.default,%
deriv3,deriv.formula,deriv.default,density.default,dendrapply,%
delete.response,decompose,cutree,cpgram,cov2cor,%
cov.wt,cor.test,cophenetic,cooks.distance,contrasts<-,%
contr.treatment,contr.sum,contr.poly,contr.helmert,contr.SAS,%
constrOptim,confint.default,confint,complete.cases,cmdscale,%
clearNames,chisq.test,ccf,case.names,cancor,%
bw.ucv,bw.nrd0,bw.nrd,bw.bcv,bw.SJ,%
biplot,binom.test,bartlett.test,bandwidth.kernel,asOneSidedFormula,%
as.ts,as.stepfun,as.hclust,as.formula,as.dist,%
as.dendrogram,arima0.diag,arima0,arima.sim,arima,%
ar.yw,ar.ols,ar.mle,ar.burg,ar,%
ansari.test,anovalist.lm,anova.mlm,anova.lmlist,anova.lm,%
anova.glmlist,anova.glm,aggregate.ts,aggregate.default,aggregate.data.frame,%
addmargins,add.scope,acf2AR,acf,TukeyHSD.aov,%
TukeyHSD,StructTS,SSweibull,SSmicmen,SSlogis,%
SSgompertz,SSfpl,SSfol,SSbiexp,SSasympOrig,%
SSasympOff,SSasymp,SSD,PP.test,NLSstRtAsymptote,%
NLSstLfAsymptote,NLSstClosestX,NLSstAsymptotic,KalmanSmooth,KalmanRun,%
KalmanLike,KalmanForecast,HoltWinters,Box.test,ARMAtoMA,%
ARMAacf,AIC%
},%
keywordstyle={[4]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package graphics [recommended or base] 
% --------------------------
morekeywords={[5]xspline,text.default,stripchart,strheight,split.screen,%
spineplot,smoothScatter,rasterImage,polypath,points.default,%
plot.xy,plot.window,plot.new,plot.design,plot.default,%
pie,panel.smooth,pairs.default,lines.default,layout.show,%
image.default,hist.default,grconvertY,grconvertX,fourfoldplot,%
filled.contour,erase.screen,dotchart,contour.default,co.intervals,%
close.screen,clip,cdplot,boxplot.matrix,boxplot.default,%
barplot.default,axis.POSIXct,axis.Date,axTicks,assocplot,%
Axis%
},%
keywordstyle={[5]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package grDevices [recommended or base] 
% --------------------------
morekeywords={[6]xyz.coords,xyTable,xy.coords,xfig,trans3d,%
topo.colors,tiff,terrain.colors,svg,setPS,%
setGraphicsEventHandlers,setGraphicsEventEnv,setEPS,savePlot,rgb2hsv,%
replayPlot,recordPlot,recordGraphics,quartzFonts,quartzFont,%
quartz.options,quartz,ps.options,postscriptFonts,postscriptFont,%
png,pdfFonts,pdf.options,pdf,nclass.scott,%
nclass.Sturges,nclass.FD,n2mfrow,make.rgb,jpeg,%
is.raster,heat.colors,hcl,grey.colors,gray.colors,%
graphics.off,getGraphicsEventEnv,getGraphicsEvent,extendrange,embedFonts,%
deviceIsInteractive,devAskNewPage,dev.size,dev.set,dev.print,%
dev.prev,dev.off,dev.next,dev.new,dev.list,%
dev.interactive,dev.cur,dev.copy2pdf,dev.copy2eps,dev.copy,%
dev.control,densCols,convertColor,contourLines,colorspaces,%
colorRampPalette,colorRamp,colorConverter,col2rgb,cm.colors,%
check.options,cairo_ps,cairo_pdf,boxplot.stats,bmp,%
blues9,bitmap,as.raster,as.graphicsAnnot,adjustcolor,%
X11Fonts,X11Font,X11.options,Type1Font,Hershey,%
CIDFont%
},%
keywordstyle={[6]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package utils [recommended or base] 
% --------------------------
morekeywords={[7]zip.file.extract,wsbrowser,write.table,write.socket,write.csv2,%
write.csv,vignette,url.show,upgrade,update.packages,%
update.packageStatus,unzip,untar,unstack,type.convert,%
txtProgressBar,toLatex,toBibtex,timestamp,tar,%
tail.matrix,tail,summaryRprof,strOptions,str,%
stack,setTxtProgressBar,setRepositories,setBreakpoint,sessionInfo,%
select.list,savehistory,rtags,remove.packages,relist,%
recover,readCitationFile,read.table,read.socket,read.fwf,%
read.fortran,read.delim2,read.delim,read.csv2,read.csv,%
read.DIF,rc.status,rc.settings,rc.options,rc.getOption,%
promptPackage,promptData,personList,person,packageVersion,%
packageStatus,packageDescription,package.skeleton,package.contents,old.packages,%
object.size,nsl,normalizePath,news,new.packages,%
modifyList,mirror2html,memory.size,memory.limit,makeRweaveLatexCodeRunner,%
make.socket,make.packages.html,maintainer,lsf.str,ls.str,%
localeToCharset,loadhistory,limitedLabels,is.relistable,installed.packages,%
install.packages,history,help.start,help.search,help.request,%
head.matrix,head,glob2rx,getTxtProgressBar,getS3method,%
getFromNamespace,getCRANmirrors,getAnywhere,formatUL,formatOL,%
flush.console,fixInNamespace,findLineNum,file_test,file.edit,%
dump.frames,download.packages,download.file,de.setup,de.restore,%
de.ncols,data.entry,count.fields,contrib.url,compareVersion,%
combn,close.socket,citation,citHeader,citFooter,%
citEntry,chooseCRANmirror,chooseBioCmirror,checkCRAN,capture.output,%
bug.report,browseVignettes,browseURL,browseEnv,bibentry,%
available.packages,assignInNamespace,aspell_write_personal_dictionary_file,aspell_package_vignettes,aspell_package_Rd_files,%
aspell,as.roman,as.relistable,as.personList,as.person,%
argsAnywhere,alarm,View,URLencode,URLdecode,%
SweaveSyntaxNoweb,SweaveSyntaxLatex,SweaveSyntConv,SweaveHooks,Sweave,%
Stangle,RweaveTryStop,RweaveLatexWritedoc,RweaveLatexSetup,RweaveLatexOptions,%
RweaveLatexFinish,RweaveLatex,RweaveEvalWithOpt,RweaveChunkPrefix,RtangleWritedoc,%
RtangleSetup,Rtangle,Rprofmem,Rprof,RSiteSearch,%
RShowDoc,CRAN.packages%
},%
keywordstyle={[7]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package datasets [recommended or base] 
% --------------------------
morekeywords={[8]women,warpbreaks,volcano,uspop,trees,%
treering,swiss,sunspots,sunspot.year,sunspot.month,%
state.x77,state.region,state.name,state.division,state.center,%
state.area,state.abb,stackloss,stack.x,stack.loss,%
sleep,rock,rivers,randu,quakes,%
pressure,presidents,precip,occupationalStatus,nottem,%
nhtemp,mtcars,morley,mdeaths,lynx,%
longley,lh,ldeaths,islands,iris3,%
iris,infert,freeny.y,freeny.x,freeny,%
fdeaths,faithful,eurodist,euro.cross,euro,%
esoph,discoveries,crimtab,co2,chickwts,%
cars,beaver2,beaver1,austres,attitude,%
attenu,anscombe,airquality,airmiles,ability.cov,%
WorldPhones,WWWusage,VADeaths,USPersonalExpenditure,USJudgeRatings,%
USArrests,USAccDeaths,UKgas,UKDriverDeaths,UCBAdmissions,%
ToothGrowth,Titanic,Theoph,Seatbelts,Puromycin,%
PlantGrowth,OrchardSprays,Orange,Nile,Loblolly,%
LifeCycleSavings,LakeHuron,JohnsonJohnson,InsectSprays,Indometh,%
Harman74.cor,Harman23.cor,HairEyeColor,Formaldehyde,EuStockMarkets,%
DNase,ChickWeight,CO2,BOD,BJsales.lead,%
BJsales,AirPassengers%
},%
keywordstyle={[8]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package methods [recommended or base] 
% --------------------------
morekeywords={[9]validSlotNames,validObject,unRematchDefinition,trySilent,tryNew,%
traceOn,traceOff,testVirtual,testInheritedMethods,superClassDepth,%
substituteFunctionArgs,substituteDirect,slotsFromS3,slotNames,slot<-,%
slot,signature,sigToEnv,showMlist,showMethods,%
showExtends,showDefault,showClass,setValidity,setReplaceMethod,%
setRefClass,setPrimitiveMethods,setPackageName,setOldClass,setMethod,%
setIs,setGroupGeneric,setGenericImplicit,setGeneric,setDataPart,%
setClassUnion,setClass,setAs,sessionData,selectSuperClasses,%
selectMethod,seemsS4Object,sealClass,resetGeneric,resetClass,%
requireMethods,representation,removeMethodsObject,removeMethods,removeMethod,%
removeGeneric,removeClass,rematchDefinition,registerImplicitGenerics,reconcilePropertiesAndPrototype,%
rbind2,prototype,promptMethods,promptClass,prohibitGeneric,%
possibleExtends,packageSlot<-,packageSlot,newEmptyObject,newClassRepresentation,%
newBasic,mlistMetaName,missingArg,methodsPackageMetaName,methodSignatureMatrix,%
method.skeleton,metaNameUndo,mergeMethods,matchSignature,makeStandardGeneric,%
makePrototypeFromClassDef,makeMethodsList,makeGeneric,makeExtends,makeClassRepresentation,%
loadMethod,listFromMlist,listFromMethods,linearizeMlist,languageEl<-,%
languageEl,isXS3Class,isVirtualClass,isSealedMethod,isSealedClass,%
isGroup,isGrammarSymbol,isGeneric,isClassUnion,isClassDef,%
isClass,insertSource,insertMethod,initialize,initFieldArgs,%
inheritedSlotNames,implicitGeneric,hasMethods,hasMethod,hasArg,%
getVirtual,getValidity,getSubclasses,getSlots,getRefClass,%
getPrototype,getProperties,getPackageName,getMethodsMetaData,getMethodsForDispatch,%
getMethods,getMethod,getGroupMembers,getGroup,getGenerics,%
getGeneric,getFunction,getExtends,getDataPart,getClasses,%
getClassPackage,getClassName,getClassDef,getClass,getAllSuperClasses,%
getAllMethods,getAccess,generic.skeleton,functionBody<-,functionBody,%
formalArgs,fixPre1.8,findUnique,findMethods,findMethodSignatures,%
findMethod,findFunction,findClass,finalDefaultMethod,extends,%
existsMethod,existsFunction,evalSource,emptyMethodsList,empty.dump,%
elNamed<-,elNamed,el<-,el,dumpMethods,%
dumpMethod,doPrimitiveMethod,defaultPrototype,defaultDumpName,conformMethod,%
completeSubclasses,completeExtends,completeClassDefinition,coerce<-,coerce,%
classesToAM,classMetaName,checkSlotAssignment,cbind2,canCoerce,%
callNextMethod,callGeneric,cacheMethod,cacheMetaData,cacheGenericsMetaData,%
body<-,balanceMethodsList,assignMethodsMetaData,assignClassDef,asMethodDefinition,%
as<-,allNames,allGenerics,addNextMethod,Summary,%
SignatureMethod,S3Part<-,S3Part,S3Class<-,S3Class,%
Quote,MethodsListSelect,MethodsList,MethodAddCoerce,Math2,%
Logic,Complex,Compare,Arith%
},%
keywordstyle={[9]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package base [recommended or base] 
% --------------------------
morekeywords={[10]xzfile,xtfrm.numeric_version,xtfrm.factor,xtfrm.difftime,xtfrm.default,%
xtfrm.Surv,xtfrm.POSIXlt,xtfrm.POSIXct,xtfrm.Date,xtfrm.AsIs,%
xtfrm,xpdrows.data.frame,xor.octmode,xor.hexmode,writeLines,%
writeChar,writeBin,write.table0,write.dcf,within.list,%
within.data.frame,within,withVisible,withRestarts,withCallingHandlers,%
with.default,with,which.min,which.max,weekdays.POSIXt,%
weekdays.Date,weekdays,version,vapply,utf8ToInt,%
upper.tri,unz,untracemem,unsplit,unserialize,%
unlockBinding,unloadNamespace,unix.time,units<-.difftime,units<-,%
units.difftime,units,unique.numeric_version,unique.matrix,unique.default,%
unique.data.frame,unique.array,unique.POSIXlt,tryCatch,truncate.connection,%
truncate,trunc.POSIXt,trunc.Date,transform.default,transform.data.frame,%
tracingState,tracemem,toupper,topenv,tolower,%
toString.default,toString,textConnectionValue,textConnection,testPlatformEquivalence,%
tempdir,tcrossprod,taskCallbackManager,t.default,t.data.frame,%
system2,system.time,system.file,sys.status,sys.source,%
sys.save.image,sys.parents,sys.parent,sys.on.exit,sys.nframe,%
sys.load.image,sys.function,sys.frames,sys.frame,sys.calls,%
sys.call,symbol.For,symbol.C,suppressWarnings,suppressPackageStartupMessages,%
suppressMessages,summary.table,summary.srcref,summary.srcfile,summary.matrix,%
summary.factor,summary.default,summary.data.frame,summary.connection,summary.POSIXlt,%
summary.POSIXct,summary.Date,substring<-,substr<-,subset.matrix,%
subset.default,subset.data.frame,strwrap,strtrim,strtoi,%
strptime,strftime,storage.mode<-,storage.mode,stopifnot,%
stdout,stdin,stderr,standardGeneric,srcref,%
srcfilecopy,srcfile,sprintf,split<-.default,split<-.data.frame,%
split<-,split.default,split.data.frame,split.POSIXct,split.Date,%
source.url,sort.list,sort.int,sort.default,sort.POSIXlt,%
solve.qr,solve.default,socketSelect,socketConnection,slice.index,%
sink.number,simpleWarning,simpleMessage,simpleError,simpleCondition,%
signalCondition,showConnections,shQuote,setTimeLimit,setSessionTimeLimit,%
setNamespaceInfo,setHook,setCConverterStatus,set.seed,serialize,%
seq_len,seq_along,seq.int,seq.default,seq.POSIXt,%
seq.Date,seek.connection,seek,scan.url,scale.default,%
save.image,sample.int,sQuote,rowsum.default,rowsum.data.frame,%
rownames<-,rowSums,rowMeans,row.names<-.default,row.names<-.data.frame,%
row.names<-,row.names.default,row.names.data.frame,row.names,round.POSIXt,%
round.Date,rev.default,retracemem,restartFormals,restartDescription,%
replicate,rep.numeric_version,rep.int,rep.factor,rep.POSIXlt,%
rep.POSIXct,rep.Date,removeTaskCallback,removeCConverter,registerS3methods,%
registerS3method,reg.finalizer,readRenviron,readLines,readChar,%
readBin,read.table.url,read.dcf,rcond,rbind.data.frame,%
rawToChar,rawToBits,rawShift,rawConnectionValue,rawConnection,%
raw,rapply,range.default,quarters.POSIXt,quarters.Date,%
quarters,qr.solve,qr.resid,qr.qy,qr.qty,%
qr.fitted,qr.default,qr.coef,qr.X,qr.R,%
qr.Q,pushBackLength,pushBack,psigamma,prop.table,%
proc.time,printNoClass,print.warnings,print.table,print.summaryDefault,%
print.summary.table,print.srcref,print.srcfile,print.simple.list,print.rle,%
print.restart,print.proc_time,print.packageInfo,print.octmode,print.numeric_version,%
print.noquote,print.listof,print.libraryIQR,print.hexmode,print.function,%
print.factor,print.difftime,print.default,print.data.frame,print.connection,%
print.condition,print.by,print.POSIXlt,print.POSIXct,print.NativeRoutineList,%
print.Date,print.DLLRegisteredRoutines,print.DLLInfoList,print.DLLInfo,print.AsIs,%
prettyNum,pretty.default,pos.to.env,pmin.int,pmax.int,%
pipe,pi,path.expand,parseNamespaceFile,parse.dcf,%
parent.frame,parent.env<-,parent.env,package_version,packageStartupMessage,%
packageHasNamespace,packageEvent,package.description,packBits,open.srcfilecopy,%
open.srcfile,open.connection,open,on.exit,oldClass<-,%
oldClass,nzchar,numeric_version,norm,ngettext,%
new.env,namespaceImportMethods,namespaceImportFrom,namespaceImportClasses,namespaceImport,%
namespaceExport,names<-,mostattributes<-,months.POSIXt,months.Date,%
months,month.name,month.abb,mode<-,mget,%
message,merge.default,merge.data.frame,memory.profile,memDecompress,%
memCompress,mem.limits,mean.difftime,mean.default,mean.data.frame,%
mean.POSIXlt,mean.POSIXct,mean.Date,max.col,match.fun,%
match.call,match.arg,mat.or.vec,margin.table,mapply,%
manglePackageName,makeActiveBinding,make.unique,make.names,lower.tri,%
logb,lockEnvironment,lockBinding,loadingNamespaceInfo,loadedNamespaces,%
loadURL,loadNamespace,list2env,list.files,library.dynam.unload,%
library.dynam,lfactorial,levels<-.factor,levels<-,levels.default,%
letters,length<-.factor,length<-,length.POSIXlt,lazyLoadDBfetch,%
lazyLoad,labels.default,l10n_info,kappa.tri,kappa.qr,%
kappa.lm,kappa.default,julian.POSIXt,julian.Date,julian,%
isdebugged,isatty,isTRUE,isSymmetric.matrix,isSymmetric,%
isSeekable,isS4,isRestart,isOpen,isNamespace,%
isIncomplete,isBaseNamespace,is.vector,is.unsorted,is.table,%
is.symbol,is.single,is.recursive,is.real,is.raw,%
is.qr,is.primitive,is.pairlist,is.package_version,is.ordered,%
is.object,is.numeric_version,is.numeric.difftime,is.numeric.POSIXt,is.numeric.Date,%
is.numeric,is.null,is.nan,is.name,is.na<-.factor,%
is.na<-.default,is.na<-,is.na.numeric_version,is.na.data.frame,is.na.POSIXlt,%
is.na,is.matrix,is.logical,is.loaded,is.list,%
is.language,is.integer,is.infinite,is.function,is.finite,%
is.factor,is.expression,is.environment,is.element,is.double,%
is.data.frame,is.complex,is.character,is.call,is.atomic,%
is.array,is.R,invokeRestartInteractively,invokeRestart,inverse.rle,%
intToUtf8,intToBits,importIntoEnv,identity,identical,%
icuSetCollate,iconvlist,iconv,gzfile,gzcon,%
grepl,gregexpr,gettextf,gettext,getTaskCallbackNames,%
getSrcLines,getRversion,getNumCConverters,getNativeSymbolInfo,getNamespaceVersion,%
getNamespaceUsers,getNamespaceName,getNamespaceInfo,getNamespaceImports,getNamespaceExports,%
getNamespace,getLoadedDLLs,getHook,getExportedValue,getDLLRegisteredRoutines.character,%
getDLLRegisteredRoutines.DLLInfo,getDLLRegisteredRoutines,getConnection,getCallingDLLe,getCallingDLL,%
getCConverterStatus,getCConverterDescriptions,getAllConnections,gc.time,formatDL,%
format.pval,format.octmode,format.numeric_version,format.info,format.hexmode,%
format.factor,format.difftime,format.default,format.data.frame,format.char,%
format.POSIXlt,format.POSIXct,format.Date,format.AsIs,formals<-,%
force,flush.connection,flush,findRestart,findPackageEnv,%
findInterval,file.symlink,file.show,file.rename,file.remove,%
file.path,file.info,file.exists,file.create,file.copy,%
file.choose,file.append,file.access,fifo,factorial,%
expm1,expand.grid,eval.parent,environmentName,environmentIsLocked,%
environment<-,env.profile,enquote,encodeString,enc2utf8,%
enc2native,emptyenv,eapply,dyn.unload,dyn.load,%
duplicated.numeric_version,duplicated.matrix,duplicated.default,duplicated.data.frame,duplicated.array,%
duplicated.POSIXlt,droplevels.factor,droplevels.data.frame,droplevels,do.call,%
dir.create,dimnames<-.data.frame,dimnames<-,dimnames.data.frame,dim<-,%
dim.data.frame,difftime,diff.default,diff.POSIXt,diff.Date,%
diag<-,determinant.matrix,determinant,det,delayedAssign,%
default.stringsAsFactors,debugonce,data.matrix,data.frame,data.class,%
dQuote,cut.default,cut.POSIXt,cut.Date,contributors,%
conditionMessage.condition,conditionMessage,conditionCall.condition,conditionCall,computeRestarts,%
comment<-,colnames<-,colSums,colMeans,codes<-,%
codes.ordered,codes.factor,closeAllConnections,close.srcfile,close.connection,%
class<-,chol.default,check_tzones,chartr,charToRaw,%
char.expand,cbind.data.frame,casefold,capabilities,callCC,%
c.numeric_version,c.noquote,c.POSIXlt,c.POSIXct,c.Date,%
bzfile,by.default,by.data.frame,browserText,browserSetDebug,%
browserCondition,bquote,body<-,bindtextdomain,bindingIsLocked,%
bindingIsActive,baseenv,attributes<-,attr<-,attr.all.equal,%
attachNamespace,assign,asS4,asS3,asNamespace,%
as.vector.factor,as.vector,as.table.default,as.table,as.symbol,%
as.single.default,as.single,as.real,as.raw,as.qr,%
as.pairlist,as.package_version,as.ordered,as.octmode,as.numeric_version,%
as.numeric,as.null.default,as.null,as.name,as.matrix.noquote,%
as.matrix.default,as.matrix.data.frame,as.matrix.POSIXlt,as.matrix,as.logical.factor,%
as.logical,as.list.numeric_version,as.list.function,as.list.factor,as.list.environment,%
as.list.default,as.list.data.frame,as.list.POSIXct,as.list.Date,as.list,%
as.integer,as.hexmode,as.function.default,as.function,as.factor,%
as.expression.default,as.expression,as.environment,as.double.difftime,as.double.POSIXlt,%
as.double,as.difftime,as.data.frame.vector,as.data.frame.ts,as.data.frame.table,%
as.data.frame.raw,as.data.frame.ordered,as.data.frame.numeric_version,as.data.frame.numeric,as.data.frame.model.matrix,%
as.data.frame.matrix,as.data.frame.logical,as.data.frame.list,as.data.frame.integer,as.data.frame.factor,%
as.data.frame.difftime,as.data.frame.default,as.data.frame.data.frame,as.data.frame.complex,as.data.frame.character,%
as.data.frame.array,as.data.frame.POSIXlt,as.data.frame.POSIXct,as.data.frame.Date,as.data.frame.AsIs,%
as.data.frame,as.complex,as.character.srcref,as.character.octmode,as.character.numeric_version,%
as.character.hexmode,as.character.factor,as.character.error,as.character.default,as.character.condition,%
as.character.POSIXt,as.character.Date,as.character,as.call,as.array.default,%
as.array,as.POSIXlt.numeric,as.POSIXlt.factor,as.POSIXlt.default,as.POSIXlt.dates,%
as.POSIXlt.date,as.POSIXlt.character,as.POSIXlt.POSIXct,as.POSIXlt.Date,as.POSIXlt,%
as.POSIXct.numeric,as.POSIXct.default,as.POSIXct.dates,as.POSIXct.date,as.POSIXct.POSIXlt,%
as.POSIXct.Date,as.POSIXct,as.Date.numeric,as.Date.factor,as.Date.default,%
as.Date.dates,as.Date.date,as.Date.character,as.Date.POSIXlt,as.Date.POSIXct,%
as.Date,arrayInd,anyDuplicated.matrix,anyDuplicated.default,anyDuplicated.data.frame,%
anyDuplicated.array,anyDuplicated,all.vars,all.names,all.equal.raw,%
all.equal.numeric,all.equal.list,all.equal.language,all.equal.formula,all.equal.factor,%
all.equal.default,all.equal.character,all.equal.POSIXct,all.equal,agrep,%
addTaskCallback,addNA,Vectorize,T,Sys.which,%
Sys.unsetenv,Sys.umask,Sys.timezone,Sys.time,Sys.sleep,%
Sys.setlocale,Sys.setenv,Sys.readlink,Sys.putenv,Sys.localeconv,%
Sys.info,Sys.glob,Sys.getpid,Sys.getlocale,Sys.getenv,%
Sys.chmod,Sys.Date,Summary.numeric_version,Summary.factor,Summary.difftime,%
Summary.data.frame,Summary.POSIXlt,Summary.POSIXct,Summary.Date,Reduce,%
R_system_version,RNGversion,R.version.string,R.version,R.home,%
R.Version,Position,Ops.ordered,Ops.numeric_version,Ops.factor,%
Ops.difftime,Ops.data.frame,Ops.POSIXt,Ops.Date,Negate,%
Math.factor,Math.difftime,Math.data.frame,Math.POSIXt,Math.Date,%
Map,La.svd,La.eigen,La.chol2inv,La.chol,%
LETTERS,ISOdatetime,ISOdate,Find,Filter,%
F,Encoding<-,Encoding,Cstack_info%
},%
keywordstyle={[10]{\bf\color{RRecomdcolor}}}%
%
}%
\lstdefinestyle{Rstyle}{style=RstyleO2}

%------------------------------------------------------------------------------%
%
%

> SweaveListingPreparations(pkv="2.1")
%------------------------------------------------------------------------------%
%Preparations for Sweave and Listings
%------------------------------------------------------------------------------%
%
\RequirePackage{color}
\definecolor{Rcolor}{rgb}{0, 0.5, 0.5}
\definecolor{RRecomdcolor}{rgb}{0, 0.6, 0.4}
\definecolor{Rbcolor}{rgb}{0, 0.6, 0.6}
\definecolor{Routcolor}{rgb}{0.461, 0.039, 0.102}
\definecolor{Rcommentcolor}{rgb}{0.101, 0.043, 0.432}
%------------------------------------------------------------------------------%
\lstdefinelanguage{Rd}[common]{TeX}%
{moretexcs={acronym,alias,arguments,author,bold,cite,%
          code,command,concept,cr,deqn,describe,%
          description,details,dfn,doctype,dots,%
          dontrun,dontshow,donttest,dQuote,%
          email,emph,enc,encoding,enumerate,env,eqn,%
          examples,file,format,if,ifelse,item,itemize,kbd,keyword,%
          ldots,link,linkS4class,method,name,note,%
          option,out,pkg,preformatted,R,Rdopts,Rdversion,%
          references,S3method,S4method,Sexpr,samp,section,%
          seealso,source,sp,special,sQuote,strong,%
          subsection,synopsis,tab,tabular,testonly,%
          title,url,usage,value,var,verb},
   sensitive=true,%
   morecomment=[l]\%% 2008/9 Peter Ruckdeschel
}[keywords,comments]%%
%------------------------------------------------------------------------------%

%----------------
\lstdefinestyle{RstyleO1}{fancyvrb=true,escapechar=`,extendedchars=false,%
                          language=R,%
                          basicstyle={\color{Rcolor}\small},%
                          keywordstyle={\bf\color{Rcolor}},%Warning in print.taglist(taglist, LineLength = LineLength, offset.start = nchar(startS),  :
  Some elements of taglist are too long

                          commentstyle={\color{Rcommentcolor}\ttfamily\itshape},%
                          literate={"}{\texttt{"}}1{<-}{{$\leftarrow$}}2{<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$\scriptstyle\wedge$}}1,%
                          alsoother={$},%
                          alsoletter={.<-},%
                          otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                          escapeinside={(*}{*)}}%
%----------------
\lstdefinestyle{Rstyle}{style=RstyleO1}

%----------------
\lstdefinestyle{Rdstyle}{fancyvrb=true,language=Rd,keywordstyle={\bf},%
                         basicstyle={\color{black}\footnotesize},%
                         commentstyle={\ttfamily\itshape},%
                         alsolanguage=R}%
%----------------
%------------------------------------------------------------------------------%
\global\def\Rlstset{\lstset{style=Rstyle}}%
\global\def\Rdlstset{\lstset{style=Rdstyle}}%
%------------------------------------------------------------------------------%
\global\def\Rinlstset{\lstset{style=Rinstyle}}%
\global\def\Routlstset{\lstset{style=Routstyle}}%
\global\def\Rcodelstset{\lstset{style=Rcodestyle}}%
%------------------------------------------------------------------------------%
\Rlstset
%------------------------------------------------------------------------------%
%copying relevant parts of Sweave.sty
%------------------------------------------------------------------------------%
%
\RequirePackage{graphicx,fancyvrb}%
\IfFileExists{upquote.sty}{\RequirePackage{upquote}}{}%

\RequirePackage{ifthen}%
\newboolean{Sweave@gin}%
\setboolean{Sweave@gin}{true}%
\setkeys{Gin}{width=0.8\textwidth}%
\newboolean{Sweave@ae}
\setboolean{Sweave@ae}{true}%
\RequirePackage[T1]{fontenc}
\RequirePackage{ae}
%
\newenvironment{Schunk}{}{}

\newcommand{\Sconcordance}[1]{% 
\ifx\pdfoutput\undefined% 
\csname newcount\endcsname\pdfoutput\fi% 
\ifcase\pdfoutput\special{#1}% 
\else\immediate\pdfobj{#1}\fi} 

%------------------------------------------------------------------------------%
% ---- end of parts of Sweave.sty
%------------------------------------------------------------------------------%
%
% ---- input 
\lstdefinestyle{RinstyleO}{style=Rstyle,fancyvrb=true,%
                           basicstyle=\color{Rcolor}\small}%
\lstdefinestyle{Rinstyle}{style=RinstyleO}
\lstnewenvironment{Sinput}{\Rinlstset}{\Rlstset}
%
% ---- output 
\lstdefinestyle{RoutstyleO}{
V1=0,V2=1,V3=0}%
\lstdefinestyle{Routstyle}{style=RoutstyleO}
\lstnewenvironment{Soutput}{\Routlstset}{\Rlstset}
%
% ---- code 
\lstdefinestyle{RcodestyleO}{style=Rstyle,fancyvrb=true,fontshape=sl,%
                             basicstyle=\color{Rcolor}}%
\lstdefinestyle{Rcodestyle}{style=RcodestyleO}
\lstnewenvironment{Scode}{\Rcodelstset}{\Rlstset}
%
%------------------------------------------------------------------------------%
\let\code\lstinline
\def\Code#1{{\tt\color{Rcolor} #1}}
\def\file#1{{\tt #1}} 
\def\pkg#1{{\tt "#1"}} 
\newcommand{\pkgversion}{{\tt 2.1}}
%------------------------------------------------------------------------------%
%------------------------------------------------------------------------------%
%
%

> 
> 
> 
> cleanEx()
> nameEx("changeKeywordstyles")
> ### * changeKeywordstyles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: changeKeywordstyles
> ### Title: changeKeywordstyles
> ### Aliases: changeKeywordstyles
> ### Keywords: utilities
> 
> ### ** Examples
> 
> require(MASS)

\lstdefinestyle{RstyleO3}{style=RstyleO2,%
% --------------------------
% Registration of package MASS [recommended or base] 
% --------------------------
morekeywords={[11]wtloss,write.matrix,width.SJ,whiteside,waders,%
ucv,truehist,theta.mm,theta.ml,theta.md,%
synth.tr,synth.te,survey,studres,stormer,%
stepAIC,steam,stdres,snails,shuttle,%
shrimp,shoes,ships,select,sammon,%
rotifer,road,rnegbin,rms.curv,rlm,%
renumerate.formula,renumerate,rational,quine,qda,%
psi.huber,psi.hampel,psi.bisquare,polr,phones,%
petrol,parcoord,painters,oats,npr1,%
npk,nlschools,newcomb,negexp.SSival,negative.binomial,%
neg.bin,nclass.freq,mvrnorm,muscle,motors,%
minn38,michelson,menarche,mcycle,mca,%
mammals,ltsreg,lqs.formula,lqs,logtrans,%
loglm1,loglm,lmwork,lmsreg,lm.ridge,%
lm.gls,leuk,ldahist,lda,kde2d,%
isoMDS,is.fractions,immer,hubers,huber,%
housing,hist.scott,hist.FD,hills,glmmPQL,%
glm.nb,glm.convert,ginv,gilgais,geyser,%
genotype,gehan,gamma.shape,gamma.dispersion,galaxies,%
frequency.polygon,fractions,forbes,fitdistr,fgl,%
fbeta,farms,eqscplot,epil,enlist,%
eagles,dropterm,drivers,dose.p,denumerate.formula,%
denumerate,deaths,crabs,cpus,cov.trob,%
cov.rob,cov.mve,cov.mcd,corresp,coop,%
contr.sdif,con2tr,chem,cement,cats,%
caith,cabbages,boxcox,birthwt,biopsy,%
beav2,beav1,bcv,bandwidth.nrd,bacteria,%
as.fractions,area,anorexia,addterm,accdeaths,%
abbey,VA,UScrime,UScereal,Traffic,%
Skye,Sitka89,Sitka,Shepard,SP500,%
Rubber,Rabbit,Pima.tr2,Pima.tr,Pima.te,%
OME,Null,Melanoma,Insurance,GAGurine,%
DDT,Cushings,Cars93,Boston,Animals,%
Aids2%
},%
keywordstyle={[11]{\bf\color{RRecomdcolor}}}%
%
}%
\lstdefinestyle{Rstyle}{style=RstyleO3}

> lstsetLanguage(pkgs = c("MASS","stats"),
+                keywordstyles  = paste("\\bfseries\\color{",c("blue","red"),"}",
+                          sep="", collapse=""))
> changeKeywordstyles(pkgs = c("distr","distrEx"),
+                     keywordstyles = paste("\\bfseries\\color{",c("green","blue"),"}",
+                     collapse="", sep = ""))
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("copySourceFromRForge")
> ### * copySourceFromRForge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copySourceFromRForge
> ### Title: copySourceFromRForge
> ### Aliases: copySourceFromRForge
> ### Keywords: utilities
> 
> ### ** Examples
> 
> copySourceFromRForge("distr","R","AllClasses.R","distr", from =2, to =3,
+                      offset.after=2)
$text
[1] "# (.onload, .onattach ...)"                                
[2] ".onLoad <- function(lib, pkg) { # extended 03-28-06: P.R. "
[3] "    require(\"methods\", character = TRUE, quietly = TRUE)"
[4] "}"                                                         

$lines
[1] 2 5

> copySourceFromRForge("distr","R","AllClasses.R","distr", from ="setClass",
+                       to ="\\}")
$text
  [1] "setClassUnion(\"OptionalMatrix\", "                                                   
  [2] "               c(\"matrix\",\"NULL\")"                                                
  [3] "               )"                                                                     
  [4] "### from Matthias' thesis / ROptEst"                                                  
  [5] "## optional numeric"                                                                  
  [6] "setClassUnion(\"OptionalNumeric\", c(\"numeric\", \"NULL\"))"                         
  [7] ""                                                                                     
  [8] "################################"                                                     
  [9] "##"                                                                                   
 [10] "## utility classes "                                                                  
 [11] "##"                                                                                   
 [12] "################################"                                                     
 [13] ""                                                                                     
 [14] "setClass(\"Integer\", contains =\"numeric\","                                         
 [15] "          validity = function(object) all(.isInteger(object)))"                       
 [16] ""                                                                                     
 [17] "################################"                                                     
 [18] "##"                                                                                   
 [19] "## space classes "                                                                    
 [20] "##"                                                                                   
 [21] "################################"                                                     
 [22] ""                                                                                     
 [23] "## virtal Class: rSpace"                                                              
 [24] "setClass(\"rSpace\", "                                                                
 [25] "          representation = representation(name = \"character\"), "                    
 [26] "          prototype = prototype(name = gettext(\"a space\")), "                       
 [27] "          contains = \"VIRTUAL\""                                                     
 [28] "          )"                                                                          
 [29] ""                                                                                     
 [30] "## Class: EuclideanSpace"                                                             
 [31] "setClass(\"EuclideanSpace\", "                                                        
 [32] "          representation = representation(dimension = \"numeric\"), "                 
 [33] "          contains = \"rSpace\","                                                     
 [34] "          prototype = prototype(dimension = 1, "                                      
 [35] "                                name = gettext(\"Euclidean Space\")"                  
 [36] "                                )"                                                    
 [37] "         )"                                                                           
 [38] ""                                                                                     
 [39] "## Class: Reals"                                                                      
 [40] "setClass(\"Reals\",  "                                                                
 [41] "          contains = \"EuclideanSpace\""                                              
 [42] "          )"                                                                          
 [43] ""                                                                                     
 [44] ""                                                                                     
 [45] "## Class: Lattice"                                                                    
 [46] "setClass(\"Lattice\", "                                                               
 [47] "          representation = representation(pivot = \"numeric\", width = \"numeric\", " 
 [48] "                                          Length = \"numeric\""                       
 [49] "### masking not possible here -> Length instead of length"                            
 [50] "                                          ),"                                         
 [51] "          prototype = prototype(pivot = 0, width = 1, Length = 2, "                   
 [52] "                                name = gettext(\"a default lattice\")"                
 [53] "                                ),"                                                   
 [54] "          contains = \"rSpace\""                                                      
 [55] "         )"                                                                           
 [56] ""                                                                                     
 [57] "## Class: Naturals"                                                                   
 [58] "setClass(\"Naturals\", "                                                              
 [59] "          contains = \"Reals\""                                                       
 [60] "          )"                                                                          
 [61] ""                                                                                     
 [62] "################################"                                                     
 [63] "##"                                                                                   
 [64] "## parameter classes"                                                                 
 [65] "##"                                                                                   
 [66] "################################"                                                     
 [67] ""                                                                                     
 [68] "setClass(\"Parameter\", "                                                             
 [69] "          representation = representation(name = \"character\"), "                    
 [70] "          prototype = prototype(name = gettext(\"a parameter\"))"                     
 [71] "          )"                                                                          
 [72] ""                                                                                     
 [73] "setClassUnion(\"OptionalParameter\", "                                                
 [74] "               c(\"Parameter\",\"NULL\")"                                             
 [75] "               )"                                                                     
 [76] ""                                                                                     
 [77] ""                                                                                     
 [78] "## Class: ChisqParameter"                                                             
 [79] "setClass(\"ChisqParameter\", "                                                        
 [80] "          representation = representation(df = \"numeric\", ncp = \"numeric\"), "     
 [81] "          prototype = prototype(df = 1, ncp = 0, "                                    
 [82] "                      name = gettext(\"Parameter of a Chisq distribution\")"          
 [83] "                      ), "                                                            
 [84] "          contains = \"Parameter\""                                                   
 [85] "          )"                                                                          
 [86] ""                                                                                     
 [87] "### Class: DiracParameter"                                                            
 [88] "setClass(\"DiracParameter\", "                                                        
 [89] "          representation = representation(location = \"numeric\"), "                  
 [90] "          prototype = prototype(location = 0, "                                       
 [91] "                      name = gettext(\"Parameter of a Dirac distribution\")"          
 [92] "                      ), "                                                            
 [93] "          contains = \"Parameter\""                                                   
 [94] "          )"                                                                          
 [95] ""                                                                                     
 [96] "## Class: ExpParameter"                                                               
 [97] "setClass(\"ExpParameter\", "                                                          
 [98] "          representation = representation(rate = \"numeric\"), "                      
 [99] "          prototype = prototype(rate = 1, name = "                                    
[100] "                      gettext(\"Parameter of an Exponential distribution\")"          
[101] "                      ),  "                                                           
[102] "          contains = \"Parameter\""                                                   
[103] "          )"                                                                          
[104] ""                                                                                     
[105] "## Class: GammaParameter"                                                             
[106] "setClass(\"GammaParameter\", "                                                        
[107] "          representation = representation(shape = \"numeric\", scale = \"numeric\"), "
[108] "          prototype = prototype(shape = 1, scale = 1, "                               
[109] "                      name = gettext(\"Parameter of a Gamma distribution\")"          
[110] "                      ), "                                                            
[111] "          contains = \"Parameter\""                                                   
[112] "          )"                                                                          
[113] ""                                                                                     
[114] "## Class: PoisParameter"                                                              
[115] "setClass(\"PoisParameter\", "                                                         
[116] "          representation = representation(lambda = \"numeric\"), "                    
[117] "          prototype = prototype(lambda = 1, "                                         
[118] "                      name = gettext(\"Parameter of a Poisson distribution\")"        
[119] "                      ), "                                                            
[120] "          contains = \"Parameter\""                                                   
[121] "          )"                                                                          
[122] ""                                                                                     
[123] "## Class: NbinomParameter"                                                            
[124] "setClass(\"NbinomParameter\", "                                                       
[125] "          representation = representation(size = \"numeric\", prob = \"numeric\"), "  
[126] "          prototype = prototype(size = 1, prob = 0.5, name = "                        
[127] "                      gettext(\"Parameter of a Negative Binomial distribution\")"     
[128] "                      ), "                                                            
[129] "          contains = \"Parameter\""                                                   
[130] "          )"                                                                          
[131] ""                                                                                     
[132] "## Class: HyperParameter"                                                             
[133] "setClass(\"HyperParameter\", "                                                        
[134] "          representation = representation(m = \"numeric\", n = \"numeric\", "         
[135] "                                          k = \"numeric\""                            
[136] "                                          ), "                                        
[137] "          prototype = prototype(m = 1, n = 1, k = 1, name = "                         
[138] "                      gettext(\"Parameter of a Hypergeometric distribution\")"        
[139] "                      ), "                                                            
[140] "          contains = \"Parameter\""                                                   
[141] "          )"                                                                          
[142] ""                                                                                     
[143] "## Class: BinomParameter"                                                             
[144] "setClass(\"BinomParameter\", "                                                        
[145] "          representation = representation(size = \"numeric\", prob = \"numeric\"), "  
[146] "          prototype = prototype(size = 1, prob = 0.5, name = "                        
[147] "                      gettext(\"Parameter of a Binomial distribution\")"              
[148] "                      ), "                                                            
[149] "          contains = \"Parameter\""                                                   
[150] "          )"                                                                          
[151] ""                                                                                     
[152] "#-"                                                                                   
[153] "## no longer needed: this is a negBinom with size 1 no longer "                       
[154] "#-"                                                                                   
[155] "### !!! deprecated as of version 1.9 !!!"                                             
[156] "##"                                                                                   
[157] "## Class: GeomParameter   "                                                           
[158] "setClass(\"GeomParameter\", "                                                         
[159] "          representation = representation(prob = \"numeric\"), "                      
[160] "          prototype = prototype(prob = 0.5, name = "                                  
[161] "                      gettext(\"Parameter of a Geometric distribution\")"             
[162] "                      ), "                                                            
[163] "          contains = \"Parameter\""                                                   
[164] "          )"                                                                          
[165] "### !!! end of deprecated !!! "                                                       
[166] ""                                                                                     
[167] "## Class: CauchyParameter"                                                            
[168] "setClass(\"CauchyParameter\", "                                                       
[169] "          representation = representation(location = \"numeric\", "                   
[170] "                                          scale = \"numeric\""                        
[171] "                                          ), "                                        
[172] "          prototype = prototype(location = 0, scale = 1, name = "                     
[173] "                      gettext(\"Parameter of a Cauchy distribution\")"                
[174] "                      ), "                                                            
[175] "          contains = \"Parameter\""                                                   
[176] "          )"                                                                          
[177] ""                                                                                     
[178] "## Class: NormParameter"                                                              
[179] "setClass(\"NormParameter\", "                                                         
[180] "          representation = representation(mean = \"numeric\", sd = \"vector\"), "     
[181] "          prototype = prototype(mean = 0, sd = 1, name = "                            
[182] "                      gettext(\"Parameter of a Normal distribution\")"                
[183] "                      ), "                                                            
[184] "          contains = \"Parameter\""                                                   
[185] "          )"                                                                          
[186] ""                                                                                     
[187] "## Class: UniNormParameter"                                                           
[188] "setClass(\"UniNormParameter\", "                                                      
[189] "          prototype = prototype(name = "                                              
[190] "                      gettext(\"Parameter of a univariate Normal distribution\")"     
[191] "                      ), "                                                            
[192] "          contains = \"NormParameter\""                                               
[193] "          )"                                                                          
[194] ""                                                                                     
[195] "## Class: UnifParameter"                                                              
[196] "setClass(\"UnifParameter\", "                                                         
[197] "          representation = representation(Min = \"numeric\", Max = \"numeric\"), "    
[198] "          prototype = prototype(Min = 0, Max = 1, name =  "                           
[199] "                      gettext(\"Parameter of a Uniform distribution\")"               
[200] "                      ), "                                                            
[201] "          contains = \"Parameter\""                                                   
[202] "          )"                                                                          
[203] ""                                                                                     
[204] "## Class: FParameter"                                                                 
[205] "setClass(\"FParameter\", "                                                            
[206] "          representation = representation(df1 = \"numeric\", df2 = \"numeric\", "     
[207] "                                          ncp = \"numeric\""                          
[208] "                                          ), "                                        
[209] "          prototype = prototype(df1 = 1, df2 = 1, ncp = 0, name = "                   
[210] "                      gettext(\"Parameter of a Fisher-Snedecor/F distribution\")"     
[211] "                      ), "                                                            
[212] "          contains = \"Parameter\""                                                   
[213] "          )"                                                                          
[214] ""                                                                                     
[215] "## Class: TParameter"                                                                 
[216] "setClass(\"TParameter\", "                                                            
[217] "          representation = representation(df = \"numeric\", ncp = \"numeric\"), "     
[218] "          prototype = prototype(df = 1, ncp = 0, name = "                             
[219] "                      gettext(\"Parameter of a Student/T distribution\")"             
[220] "                      ), "                                                            
[221] "          contains = \"Parameter\""                                                   
[222] "          )"                                                                          
[223] ""                                                                                     
[224] "## Class: LNormParameter"                                                             
[225] "setClass(\"LnormParameter\", "                                                        
[226] "          representation = representation(meanlog = \"numeric\","                     
[227] "                                          sdlog = \"numeric\""                        
[228] "                                          ), "                                        
[229] "          prototype = prototype(meanlog = 0, meansd = 1, name =  "                    
[230] "                      gettext(\"Parameter of a Log-Normal distribution\")"            
[231] "                      ), "                                                            
[232] "          contains = \"Parameter\""                                                   
[233] "          )"                                                                          
[234] ""                                                                                     
[235] "## Class: BetaParameter"                                                              
[236] "setClass(\"BetaParameter\", "                                                         
[237] "          representation = representation(shape1 = \"numeric\", "                     
[238] "                                          shape2 = \"numeric\", ncp = \"numeric\""    
[239] "                                          ), "                                        
[240] "          prototype = prototype(shape1 = 1, shape2 = 1, ncp = 0, name = "             
[241] "                      gettext(\"Parameter of a Beta distribution\")"                  
[242] "                      ), "                                                            
[243] "          contains = \"Parameter\""                                                   
[244] "          )"                                                                          
[245] ""                                                                                     
[246] "## Class: LogisParameter"                                                             
[247] "setClass(\"LogisParameter\", "                                                        
[248] "          representation = representation(location = \"numeric\", "                   
[249] "                                          scale = \"numeric\""                        
[250] "                                          ), "                                        
[251] "          prototype = prototype(location = 0, scale = 1, name = "                     
[252] "                      gettext(\"Parameter of a Logistic distribution\")"              
[253] "                      ), "                                                            
[254] "          contains = \"Parameter\""                                                   
[255] "          )"                                                                          
[256] ""                                                                                     
[257] "## Class: WeibullParameter"                                                           
[258] "setClass(\"WeibullParameter\", "                                                      
[259] "          representation = representation(shape = \"numeric\", "                      
[260] "                                          scale = \"numeric\""                        
[261] "                                          ), "                                        
[262] "          prototype = prototype(shape = 1, scale = 1, name = "                        
[263] "                      gettext(\"Parameter of a Weibull distribution\")"               
[264] "                      ), "                                                            
[265] "          contains = \"Parameter\""                                                   
[266] "          )"                                                                          
[267] ""                                                                                     
[268] "################################"                                                     
[269] "##"                                                                                   
[270] "## matrix classes"                                                                    
[271] "##"                                                                                   
[272] "################################"                                                     
[273] "## positive definite, symmetric matrices with finite entries"                         
[274] "setClass(\"PosSemDefSymmMatrix\", contains = \"matrix\","                             
[275] "            prototype = prototype(matrix(1)),"                                        
[276] "            validity = function(object){"                                             
[277] "                if(nrow(object) != ncol(object))"                                     
[278] "                    stop(\"no square matrix\")"                                       
[279] "                if(any(!is.finite(object)))"                                          
[280] "                    stop(\"inifinite or missing values in matrix\")"                  
[281] "                if(!isTRUE(all.equal(object, t(object), .Machine$double.eps^0.5,"     
[282] "                                     check.attributes = FALSE)))"                     
[283] "                    stop(\"matrix is not symmetric\")"                                
[284] "                if(!all(eigen(object)$values > -100*.Machine$double.eps))"            
[285] "                   stop(\"matrix is (numerically) not positive semi - definite\")"    
[286] "               return(TRUE)"                                                          
[287] "            })"                                                                       

$lines
[1]  43 329

> 
> 
> 
> cleanEx()
> nameEx("isBaseOrRecommended")
> ### * isBaseOrRecommended
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isBaseOrRecommended
> ### Title: isBaseOrRecommended
> ### Aliases: isBaseOrRecommended
> ### Keywords: utilities internal
> 
> ### ** Examples
> 
> isBaseOrRecommended(pkgs = c("SweaveListingUtils","Matrix","splines"))
SweaveListingUtils             Matrix            splines 
             FALSE               TRUE               TRUE 
> 
> 
> cleanEx()
> nameEx("library")
> ### * library
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: library
> ### Title: Loading Packages with registering symbols for TeX package
> ###   'listing'
> ### Aliases: library require
> ### Keywords: utilities
> 
> ### ** Examples
> 
> require(survival)
Warning: closing unused connection 3 (http://r-forge.r-project.org/scm/viewvc.php/*checkout*/pkg/distr/R/AllClasses.R?root=distr)

\lstdefinestyle{RstyleO4}{style=RstyleO3,%
% --------------------------
% Registration of package survival [recommended or base] 
% --------------------------
morekeywords={[12]veteran,untangle.specials,tobin,tcut,survregDtest,%
survreg.fit,survreg.distributions,survreg.control,survreg,survobrien,%
survfit,survexp.usr,survexp.us,survexp.mnwhite,survexp.mn,%
survexp,survdiff,survSplit,survConcordance,strata,%
stanford2,ridge,rats,ratetable,qsurvreg,%
pyears,psurvreg,pspline,pbcseq,pbc,%
ovarian,nwtco,mgus2,mgus1,mgus,%
match.ratetable,lung,leukemia,labels.survreg,kidney,%
jasa1,jasa,is.ratetable,is.na.ratetable,is.na.coxph.penalty,%
is.na.Surv,is.Surv,heart,frailty.t,frailty.gaussian,%
frailty.gamma,frailty,format.Surv,dsurvreg,coxph.fit,%
coxph.detail,coxph.control,coxph,cox.zph,colon,%
cluster,clogit,cgd,cch,cancer,%
bladder2,bladder1,bladder,basehaz,attrassign,%
aml,aareg,Surv%
},%
keywordstyle={[12]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package splines [recommended or base] 
% --------------------------
morekeywords={[13]xyVector,splineOrder,splineKnots,splineDesign,spline.des,%
polySpline,periodicSpline,ns,interpSpline,bs,%
backSpline,asVector,as.polySpline%
},%
keywordstyle={[13]{\bf\color{RRecomdcolor}}}%
%
}%
\lstdefinestyle{Rstyle}{style=RstyleO4}

> 
> 
> 
> cleanEx()

detaching ‘package:survival’, ‘package:splines’

> nameEx("lstinputSourceFromRForge")
> ### * lstinputSourceFromRForge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lstinputSourceFromRForge
> ### Title: lstinputSourceFromRForge
> ### Aliases: lstinputSourceFromRForge
> ### Keywords: utilities
> 
> ### ** Examples
> 
> lstinputSourceFromRForge("distr","R","AllClasses.R","distr",
+                      "## Class: BinomParameter", "#-")
lines 185--194
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Class: BinomParameter
setClass("BinomParameter", 
          representation = representation(size = "numeric", prob = "numeric"), 
          prototype = prototype(size = 1, prob = 0.5, name = 
                      gettext("Parameter of a Binomial distribution")
                      ), 
          contains = "Parameter"
          )

#-
\end{lstlisting}
%------------------------------------------------------------------------------%
%

> 
> lstinputSourceFromRForge("distr","R","AllClasses.R","distr",
+                      from = "## Class: binomial distribution",
+                      to = "contains = \"LatticeDistribution\"", offset.after = 1)
lines 970--998
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Class: binomial distribution
setClass("Binom",
          prototype = prototype(
                      r = function(n){ rbinom(n, size = 1,prob = 0.5) },
                      d = function(x, log = FALSE){
                              dbinom(x, size = 1, prob = 0.5, log = log)
                                          },
                      p = function(q, lower.tail = TRUE, log.p = FALSE ){
                              pbinom(q, size = 1, prob = 0.5,
                                     lower.tail = lower.tail, log.p = log.p)
                                          },
                      q = function(p, lower.tail = TRUE, log.p = FALSE ){
                              qbinom(p, size = 1, prob = 0.5,
                                     lower.tail = lower.tail, log.p = log.p)
                                          },
                      img = new("Naturals"),
                      param = new("BinomParameter"),
                      support = 0:1,
                      lattice = new("Lattice",
                                pivot = 0, width = 1, Length = 2, name =
                                gettext(
                                  "lattice of a Binomial distribution"
                                       )
                                ),
                     .logExact = TRUE,
                     .lowerExact = TRUE
                      ),
          contains = "LatticeDistribution"
          )
\end{lstlisting}
%------------------------------------------------------------------------------%
%

> lstinputSourceFromRForge("distr","man","Binom-class.Rd","distr")
%------------------------------------------------------------------------------%
\begin{lstlisting}[style = Rdstyle]
\name{Binom-class} 
\docType{class}
\alias{Binom-class}
\alias{Binom}
\alias{initialize,Binom-method}

\title{Class "Binom" }
\description{The binomial distribution with \code{size} \eqn{= n}, by default 
  \eqn{=1}, and
  \code{prob} \eqn{= p}, by default \eqn{=0.5}, has density
  \deqn{p(x) = {n \choose x} {p}^{x} {(1-p)}^{n-x}}{
    p(x) = choose(n,x) p^x (1-p)^(n-x)}
  for \eqn{x = 0, \ldots, n}.

  C.f.\code{\link[stats:Binomial]{rbinom}}
}
\section{Objects from the Class}{
Objects can be created by calls of the form \code{Binom(prob, size)}.
This object is a binomial distribution. 
}
\section{Slots}{
  \describe{
    \item{\code{img}}{Object of class \code{"Naturals"}: The space of the 
     image of this distribution has got dimension 1 and the 
     name "Natural Space". }
    \item{\code{param}}{Object of class \code{"BinomParameter"}: the parameter 
          of this distribution (\code{prob}, \code{size}), declared at its 
          instantiation }
    \item{\code{r}}{Object of class \code{"function"}: generates random 
          numbers (calls function \code{rbinom}) }
    \item{\code{d}}{Object of class \code{"function"}: density function (calls 
          function \code{dbinom}) }
    \item{\code{p}}{Object of class \code{"function"}: cumulative function 
          (calls function \code{pbinom}) }
    \item{\code{q}}{Object of class \code{"function"}: inverse of the 
           cumulative function (calls function \code{qbinom}).
    The quantile is defined as the smallest value x such that F(x) >= p, where 
            F is the cumulative function. }
    \item{\code{support}}{Object of class \code{"numeric"}: a (sorted) 
            vector containing the support of the discrete density function}
    \item{\code{.withArith}}{logical: used internally to issue warnings as to 
            interpretation of arithmetics}
    \item{\code{.withSim}}{logical: used internally to issue warnings as to 
          accuracy}
    \item{\code{.logExact}}{logical: used internally to flag the case where 
    there are explicit formulae for the log version of density, cdf, and 
    quantile function}
    \item{\code{.lowerExact}}{logical: used internally to flag the case where 
    there are explicit formulae for the lower tail version of cdf and quantile 
    function}
    \item{\code{Symmetry}}{object of class \code{"DistributionSymmetry"};
     used internally to avoid unnecessary calculations.}
  }
}
\section{Extends}{
Class \code{"DiscreteDistribution"}, directly.\cr
Class \code{"UnivariateDistribution"}, by class \code{"DiscreteDistribution"}.\cr
Class \code{"Distribution"}, by class \code{"DiscreteDistribution"}.
}
\section{Methods}{
  \describe{
    \item{+}{\code{signature(e1 = "Binom", e2 = "Binom")}: For two binomial 
             distributions with equal probabilities the exact convolution 
             formula is implemented thereby improving the general numerical 
             accuracy.}
    \item{initialize}{\code{signature(.Object = "Binom")}: initialize method }
    \item{prob}{\code{signature(object = "Binom")}: returns the slot \code{prob} 
             of the parameter of the distribution }
    \item{prob<-}{\code{signature(object = "Binom")}: modifies the slot 
             \code{prob} of the parameter of the distribution }
    \item{size}{\code{signature(object = "Binom")}: returns the slot \code{size} 
             of the parameter of the distribution }
    \item{size<-}{\code{signature(object = "Binom")}: modifies the slot 
             \code{size} of the parameter of the distribution }
  }
}


\author{
  Thomas Stabla \email{statho3@web.de},\cr 
  Florian Camphausen \email{fcampi@gmx.de},\cr
  Peter Ruckdeschel \email{Peter.Ruckdeschel@itwm.fraunhofer.de},\cr 
  Matthias Kohl \email{Matthias.Kohl@stamats.de}
  }


\seealso{
\code{\link{BinomParameter-class}}
\code{\link{DiscreteDistribution-class}}
\code{\link{Naturals-class}}
\code{\link[stats:Binomial]{rbinom}}
}
\examples{
\end{lstlisting}\vspace{-2ex}
%------------------------------------------------------------------------------%
\begin{lstlisting}[style = Rstyle,basicstyle = \scriptsize\color{Rcolor}, xleftmargin = 2em]
B <- Binom(prob=0.5,size=1) # B is a binomial distribution with prob=0.5 and size=1.
r(B)(1) # # one random number generated from this distribution, e.g. 1
d(B)(1) # Density of this distribution is  0.5 for x=1.
p(B)(0.4) # Probability that x<0.4 is 0.5.
q(B)(.1) # x=0 is the smallest value x such that p(B)(x)>=0.1.
size(B) # size of this distribution is 1.
size(B) <- 2 # size of this distribution is now 2.
C <- Binom(prob = 0.5, size = 1) # C is a binomial distribution with prob=0.5 and size=1.
D <- Binom(prob = 0.6, size = 1) # D is a binomial distribution with prob=0.6 and size=1.
E <- B + C # E is a binomial distribution with prob=0.5 and size=3.
F <- B + D # F is an object of class LatticeDistribution.
G <- B + as(D,"DiscreteDistribution") ## DiscreteDistribution
\end{lstlisting}\vspace{-3ex}
%------------------------------------------------------------------------------%
\begin{lstlisting}[style = Rdstyle]
}
\keyword{distribution}
\concept{discrete distribution}
\concept{lattice distribution}
\concept{Binomial family}
\concept{Binomial distribution}
\concept{S4 distribution class}
\concept{generating function}
\end{lstlisting}
%------------------------------------------------------------------------------%
%

> 
> lstinputSourceFromRForge("distr","R","BinomialDistribution.R","distr",
+                      from = c("## Access Methods", "## wrapped access methods"),
+                      to = c("setReplaceMethod\\(\"prob\", \"BinomParameter\"",
+                             "size = value\\)\\)") ,
+                      offset.after = c(1,1))
lines 8--15, and
43--53
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Access Methods
setMethod("size", "BinomParameter", function(object) object@size)
setMethod("prob", "BinomParameter", function(object) object@prob)
## Replace Methods
setReplaceMethod("size", "BinomParameter", 
                  function(object, value){ object@size <- value; object})
setReplaceMethod("prob", "BinomParameter", 
                  function(object, value){ object@prob <- value; object})
\end{lstlisting}
%------------------------------------------------------------------------------%
%

%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## wrapped access methods
setMethod("prob", "Binom", function(object) prob(param(object)))
setMethod("size", "Binom", function(object) size(param(object)))
## wrapped replace methods
setMethod("prob<-", "Binom", 
           function(object, value) new("Binom", prob = value, 
                                        size = size(object)))
setMethod("size<-", "Binom", 
           function(object, value) new("Binom", prob = prob(object), 
                                        size = value))

\end{lstlisting}
%------------------------------------------------------------------------------%
%

> lstinputSourceFromRForge("distr","R","BinomialDistribution.R","distr",
+                      from = c(8,43,45), to = c(16,53,45))
lines 8--16, 
43--53, and
45
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Access Methods
setMethod("size", "BinomParameter", function(object) object@size)
setMethod("prob", "BinomParameter", function(object) object@prob)
## Replace Methods
setReplaceMethod("size", "BinomParameter", 
                  function(object, value){ object@size <- value; object})
setReplaceMethod("prob", "BinomParameter", 
                  function(object, value){ object@prob <- value; object})

\end{lstlisting}
%------------------------------------------------------------------------------%
%

%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## wrapped access methods
setMethod("prob", "Binom", function(object) prob(param(object)))
setMethod("size", "Binom", function(object) size(param(object)))
## wrapped replace methods
setMethod("prob<-", "Binom", 
           function(object, value) new("Binom", prob = value, 
                                        size = size(object)))
setMethod("size<-", "Binom", 
           function(object, value) new("Binom", prob = prob(object), 
                                        size = value))

\end{lstlisting}
%------------------------------------------------------------------------------%
%

%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
setMethod("size", "Binom", function(object) size(param(object)))
\end{lstlisting}
%------------------------------------------------------------------------------%
%

> lstinputSourceFromRForge("distr","R","BinomialDistribution.R","distr",
+                      from = c("## Access Methods", "## wrapped access methods"),
+                      to = c("setReplaceMethod\\(\"prob\", \"BinomParameter\"",
+                             "size = value\\)\\)") ,
+                      offset.after = c(1,1))
lines 8--15, and
43--53
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Access Methods
setMethod("size", "BinomParameter", function(object) object@size)
setMethod("prob", "BinomParameter", function(object) object@prob)
## Replace Methods
setReplaceMethod("size", "BinomParameter", 
                  function(object, value){ object@size <- value; object})
setReplaceMethod("prob", "BinomParameter", 
                  function(object, value){ object@prob <- value; object})
\end{lstlisting}
%------------------------------------------------------------------------------%
%

%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## wrapped access methods
setMethod("prob", "Binom", function(object) prob(param(object)))
setMethod("size", "Binom", function(object) size(param(object)))
## wrapped replace methods
setMethod("prob<-", "Binom", 
           function(object, value) new("Binom", prob = value, 
                                        size = size(object)))
setMethod("size<-", "Binom", 
           function(object, value) new("Binom", prob = prob(object), 
                                        size = value))

\end{lstlisting}
%------------------------------------------------------------------------------%
%

> 
> 
> 
> cleanEx()
> nameEx("lstset")
> ### * lstset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lstset
> ### Title: lstset and friends
> ### Aliases: lstset lstsetRd lstsetR lstsetRin lstsetRout lstsetRcode
> ###   lstdefRstyle lstsetRall
> ### Keywords: utilities
> 
> ### ** Examples
> 
> lstset(taglist(A="H", b=2, 3),30)
\lstset{
A=H,b=2,V3=3}%
> lstset(taglist(A="H", b=2, 3),30, startS = "\\lstdefinestyle{Rstyle}{")
\lstdefinestyle{Rstyle}{A=H,%
                        b=2,%
                        V3=3}%
> lstsetR()

%----------------
NULL
}%
%----------------
> lstsetRd()

%----------------
NULL
}%
%----------------
> 
> 
> 
> cleanEx()
> nameEx("lstsetLanguage")
> ### * lstsetLanguage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lstsetLanguage
> ### Title: lstsetLanguage
> ### Aliases: lstsetLanguage
> ### Keywords: utilities
> 
> ### ** Examples
> 
> require(MASS)
> lstsetLanguage(pkgs = c("MASS","stats"),
+                keywordstyles  = paste("\\bfseries\\color{",c("blue","red"),"}",
+                          sep="", collapse=""))
> ### not to be used:
> print(SweaveListingUtils:::.alreadyDefinedPkgs)
 [1] "SweaveListingUtils" "startupmsg"         "stats"             
 [4] "graphics"           "grDevices"          "utils"             
 [7] "datasets"           "methods"            "base"              
[10] "MASS"               "survival"           "splines"           
> print(SweaveListingUtils:::.keywordsR)
  [1] "abbreviate"        "abline"            "abs"              
  [4] "acos"              "acosh"             "action"           
  [7] "add1"              "add"               "aggregate"        
 [10] "alias"             "Alias"             "alist"            
 [13] "all"               "anova"             "any"              
 [16] "aov"               "aperm"             "append"           
 [19] "apply"             "approx"            "approxfun"        
 [22] "apropos"           "Arg"               "args"             
 [25] "array"             "arrows"            "as"               
 [28] "asin"              "asinh"             "atan"             
 [31] "atan2"             "atanh"             "attach"           
 [34] "attr"              "attributes"        "autoload"         
 [37] "autoloader"        "ave"               "axis"             
 [40] "backsolve"         "barplot"           "basename"         
 [43] "besselI"           "besselJ"           "besselK"          
 [46] "besselY"           "beta"              "binomial"         
 [49] "body"              "box"               "boxplot"          
 [52] "break"             "browser"           "bug"              
 [55] "builtins"          "bxp"               "by"               
 [58] "c"                 "C"                 "call"             
 [61] "Call"              "case"              "cat"              
 [64] "category"          "cbind"             "ceiling"          
 [67] "character"         "char"              "charmatch"        
 [70] "check"             "chol"              "chol2inv"         
 [73] "choose"            "chull"             "class"            
 [76] "close"             "cm"                "codes"            
 [79] "coef"              "coefficients"      "co"               
 [82] "col"               "colnames"          "colors"           
 [85] "colours"           "commandArgs"       "comment"          
 [88] "complete"          "complex"           "conflicts"        
 [91] "Conj"              "contents"          "contour"          
 [94] "contrasts"         "contr"             "control"          
 [97] "helmert"           "contrib"           "convolve"         
[100] "cooks"             "coords"            "distance"         
[103] "coplot"            "cor"               "cos"              
[106] "cosh"              "count"             "fields"           
[109] "cov"               "covratio"          "wt"               
[112] "CRAN"              "create"            "crossprod"        
[115] "cummax"            "cummin"            "cumprod"          
[118] "cumsum"            "curve"             "cut"              
[121] "cycle"             "D"                 "data"             
[124] "dataentry"         "date"              "dbeta"            
[127] "dbinom"            "dcauchy"           "dchisq"           
[130] "de"                "debug"             "debugger"         
[133] "Defunct"           "default"           "delay"            
[136] "delete"            "deltat"            "demo"             
[139] "de"                "density"           "deparse"          
[142] "dependencies"      "Deprecated"        "deriv"            
[145] "description"       "detach"            "dev2bitmap"       
[148] "dev"               "cur"               "deviance"         
[151] "off"               "prev"              ""                 
[154] "dexp"              "df"                "dfbetas"          
[157] "dffits"            "dgamma"            "dgeom"            
[160] "dget"              "dhyper"            "diag"             
[163] "diff"              "digamma"           "dim"              
[166] "dimnames"          "dir"               "dirname"          
[169] "dlnorm"            "dlogis"            "dnbinom"          
[172] "dnchisq"           "dnorm"             "do"               
[175] "dotplot"           "double"            "download"         
[178] "dpois"             "dput"              "drop"             
[181] "drop1"             "dsignrank"         "dt"               
[184] "dummy"             "dump"              "dunif"            
[187] "duplicated"        "dweibull"          "dwilcox"          
[190] "dyn"               "edit"              "eff"              
[193] "effects"           "eigen"             "else"             
[196] "emacs"             "end"               "environment"      
[199] "env"               "erase"             "eval"             
[202] "equal"             "evalq"             "example"          
[205] "exists"            "exit"              "exp"              
[208] "expand"            "expression"        "External"         
[211] "extract"           "extractAIC"        "factor"           
[214] "fail"              "family"            "fft"              
[217] "file"              "filled"            "find"             
[220] "fitted"            "fivenum"           "fix"              
[223] "floor"             "for"               "For"              
[226] "formals"           "format"            "formatC"          
[229] "formula"           "Fortran"           "forwardsolve"     
[232] "frame"             "frequency"         "ftable"           
[235] "ftable2table"      "function"          "gamma"            
[238] "Gamma"             "gammaCody"         "gaussian"         
[241] "gc"                "gcinfo"            "gctorture"        
[244] "get"               "getenv"            "geterrmessage"    
[247] "getOption"         "getwd"             "gl"               
[250] "glm"               "globalenv"         "gnome"            
[253] "GNOME"             "graphics"          "gray"             
[256] "grep"              "grey"              "grid"             
[259] "gsub"              "hasTsp"            "hat"              
[262] "heat"              "help"              "hist"             
[265] "home"              "hsv"               "httpclient"       
[268] "I"                 "identify"          "if"               
[271] "ifelse"            "Im"                "image"            
[274] "%in%"              "index"             "influence"        
[277] "measures"          "inherits"          "install"          
[280] "installed"         "integer"           "interaction"      
[283] "interactive"       "Internal"          "intersect"        
[286] "inverse"           "invisible"         "IQR"              
[289] "is"                "jitter"            "kappa"            
[292] "kronecker"         "labels"            "lapply"           
[295] "layout"            "lbeta"             "lchoose"          
[298] "lcm"               "legend"            "length"           
[301] "levels"            "lgamma"            "library"          
[304] "licence"           "license"           "lines"            
[307] "list"              "lm"                "load"             
[310] "local"             "locator"           "log"              
[313] "log10"             "log1p"             "log2"             
[316] "logical"           "loglin"            "lower"            
[319] "lowess"            "ls"                "lsfit"            
[322] "lsf"               "ls"                "machine"          
[325] "Machine"           "mad"               "mahalanobis"      
[328] "make"              "link"              "margin"           
[331] "match"             "Math"              "matlines"         
[334] "mat"               "matplot"           "matpoints"        
[337] "matrix"            "max"               "mean"             
[340] "median"            "memory"            "menu"             
[343] "merge"             "methods"           "min"              
[346] "missing"           "Mod"               "mode"             
[349] "model"             "response"          "mosaicplot"       
[352] "mtext"             "mvfft"             "na"               
[355] "nan"               "names"             "omit"             
[358] "nargs"             "nchar"             "ncol"             
[361] "NCOL"              "new"               "next"             
[364] "NextMethod"        "nextn"             "nlevels"          
[367] "nlm"               "noquote"           "NotYetImplemented"
[370] "NotYetUsed"        "nrow"              "NROW"             
[373] "null"              "numeric"           "%o%"              
[376] "objects"           "offset"            "old"              
[379] "on"                "Ops"               "optim"            
[382] "optimise"          "optimize"          "options"          
[385] "or"                "order"             "ordered"          
[388] "outer"             "package"           "packages"         
[391] "page"              "pairlist"          "pairs"            
[394] "palette"           "panel"             "par"              
[397] "parent"            "parse"             "paste"            
[400] "path"              "pbeta"             "pbinom"           
[403] "pcauchy"           "pchisq"            "pentagamma"       
[406] "persp"             "pexp"              "pf"               
[409] "pgamma"            "pgeom"             "phyper"           
[412] "pico"              "pictex"            "piechart"         
[415] "Platform"          "plnorm"            "plogis"           
[418] "plot"              "pmatch"            "pmax"             
[421] "pmin"              "pnbinom"           "pnchisq"          
[424] "pnorm"             "points"            "poisson"          
[427] "poly"              "polygon"           "polyroot"         
[430] "pos"               "postscript"        "power"            
[433] "ppoints"           "ppois"             "predict"          
[436] "preplot"           "pretty"            "Primitive"        
[439] "print"             "prmatrix"          "proc"             
[442] "prod"              "profile"           "proj"             
[445] "prompt"            "prop"              "provide"          
[448] "psignrank"         "ps"                "pt"               
[451] "ptukey"            "punif"             "pweibull"         
[454] "pwilcox"           "q"                 "qbeta"            
[457] "qbinom"            "qcauchy"           "qchisq"           
[460] "qexp"              "qf"                "qgamma"           
[463] "qgeom"             "qhyper"            "qlnorm"           
[466] "qlogis"            "qnbinom"           "qnchisq"          
[469] "qnorm"             "qpois"             "qqline"           
[472] "qqnorm"            "qqplot"            "qr"               
[475] "Q"                 "qty"               "qy"               
[478] "qsignrank"         "qt"                "qtukey"           
[481] "quantile"          "quasi"             "quit"             
[484] "qunif"             "quote"             "qweibull"         
[487] "qwilcox"           "rainbow"           "range"            
[490] "rank"              "rbeta"             "rbind"            
[493] "rbinom"            "rcauchy"           "rchisq"           
[496] "Re"                "read"              "csv"              
[499] "csv2"              "fwf"               "readline"         
[502] "socket"            "real"              "Recall"           
[505] "rect"              "reformulate"       "regexpr"          
[508] "relevel"           "remove"            "rep"              
[511] "repeat"            "replace"           "replications"     
[514] "report"            "require"           "resid"            
[517] "residuals"         "restart"           "return"           
[520] "rev"               "rexp"              "rf"               
[523] "rgamma"            "rgb"               "rgeom"            
[526] "R"                 "rhyper"            "rle"              
[529] "rlnorm"            "rlogis"            "rm"               
[532] "rnbinom"           "RNGkind"           "rnorm"            
[535] "round"             "row"               "rownames"         
[538] "rowsum"            "rpois"             "rsignrank"        
[541] "rstandard"         "rstudent"          "rt"               
[544] "rug"               "runif"             "rweibull"         
[547] "rwilcox"           "sample"            "sapply"           
[550] "save"              "scale"             "scan"             
[553] "scan"              "screen"            "sd"               
[556] "se"                "search"            "searchpaths"      
[559] "segments"          "seq"               "sequence"         
[562] "setdiff"           "setequal"          "set"              
[565] "setwd"             "show"              "sign"             
[568] "signif"            "sin"               "single"           
[571] "sinh"              "sink"              "solve"            
[574] "sort"              "source"            "spline"           
[577] "splinefun"         "split"             "sqrt"             
[580] "stars"             "start"             "stat"             
[583] "stem"              "step"              "stop"             
[586] "storage"           "strstrheight"      "stripplot"        
[589] "strsplit"          "structure"         "strwidth"         
[592] "sub"               "subset"            "substitute"       
[595] "substr"            "substring"         "sum"              
[598] "summary"           "sunflowerplot"     "svd"              
[601] "sweep"             "switch"            "symbol"           
[604] "symbols"           "symnum"            "sys"              
[607] "status"            "system"            "t"                
[610] "table"             "tabulate"          "tan"              
[613] "tanh"              "tapply"            "tempfile"         
[616] "terms"             "terrain"           "tetragamma"       
[619] "text"              "time"              "title"            
[622] "topo"              "trace"             "traceback"        
[625] "transform"         "tri"               "trigamma"         
[628] "trunc"             "try"               "ts"               
[631] "tsp"               "typeof"            "unclass"          
[634] "undebug"           "undoc"             "union"            
[637] "unique"            "uniroot"           "unix"             
[640] "unlink"            "unlist"            "unname"           
[643] "untrace"           "update"            "upper"            
[646] "url"               "UseMethod"         "var"              
[649] "variable"          "vector"            "Version"          
[652] "vi"                "warning"           "warnings"         
[655] "weighted"          "weights"           "which"            
[658] "while"             "window"            "write"            
[661] "%x%"               "x11"               "X11"              
[664] "xedit"             "xemacs"            "xinch"            
[667] "xor"               "xpdrows"           "xy"               
[670] "xyinch"            "yinch"             "zapsmall"         
[673] "zip"              
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("readPackageVersion")
> ### * readPackageVersion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readPkgVersion
> ### Title: readPkgVersion
> ### Aliases: readPkgVersion
> ### Keywords: utilities
> 
> ### ** Examples
> 
> readPkgVersion(package = "distr")
Warning: closing unused connection 4 (http://r-forge.r-project.org/scm/viewvc.php/*checkout*/pkg/distr/R/BinomialDistribution.R?root=distr)
Warning: closing unused connection 3 (http://r-forge.r-project.org/scm/viewvc.php/*checkout*/pkg/distr/man/Binom-class.Rd?root=distr)
     Version
[1,] "2.3"  
> 
> 
> 
> cleanEx()
> nameEx("readSourceFromRForge")
> ### * readSourceFromRForge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readSourceFromRForge
> ### Title: readSourceFromRForge
> ### Aliases: readSourceFromRForge
> ### Keywords: utilities
> 
> ### ** Examples
> 
> readSourceFromRForge("distr","R","AllClasses.R","distr")
   [1] "############# preparations ################"                                                                                            
   [2] "# (.onload, .onattach ...)"                                                                                                             
   [3] ".onLoad <- function(lib, pkg) { # extended 03-28-06: P.R. "                                                                             
   [4] "    require(\"methods\", character = TRUE, quietly = TRUE)"                                                                             
   [5] "}"                                                                                                                                      
   [6] ""                                                                                                                                       
   [7] ""                                                                                                                                       
   [8] ""                                                                                                                                       
   [9] ".onAttach <- function(library, pkg)"                                                                                                    
  [10] "{"                                                                                                                                      
  [11] "  unlockBinding(\".distroptions\", asNamespace(\"distr\"))"                                                                             
  [12] "  unlockBinding(\".distrExInstalled\", asNamespace(\"distr\"))"                                                                         
  [13] ""                                                                                                                                       
  [14] "## global variable needed for flat.R"                                                                                                   
  [15] "##  unlockBinding(\".OkTyp\", asNamespace(\"distr\"))"                                                                                  
  [16] "    msga <- gettext("                                                                                                                   
  [17] "    \"Attention: Arithmetics on distribution objects are understood as \""                                                              
  [18] "                   )"                                                                                                                   
  [19] "    msgb <- gettext("                                                                                                                   
  [20] "    \"operations on corresponding random variables (r.v.s); see distrARITH().\\n\""                                                     
  [21] "                   )"                                                                                                                   
  [22] "    msgc <- gettext("                                                                                                                   
  [23] "    \"Some functions from package 'stats' are intentionally masked ---see distrMASK().\\n\""                                            
  [24] "                   )"                                                                                                                   
  [25] "    msgd <- gettext("                                                                                                                   
  [26] "    \"Note that global options are controlled by distroptions() ---c.f. ?\\\"distroptions\\\".\""                                       
  [27] "                   )"                                                                                                                   
  [28] "buildStartupMessage(pkg = \"distr\", msga, msgb, msgc, msgd, library = library, "                                                       
  [29] "                    packageHelp = TRUE, "                                                                                               
  [30] "# MANUAL = \"http://www.uni-bayreuth.de/departments/math/org/mathe7/DISTR/distr.pdf\","                                                 
  [31] "                    VIGNETTE = gettext("                                                                                                
  [32] "\"Package \\\"distrDoc\\\" provides a vignette to this package as well as to several extension packages; try vignette(\\\"distr\\\").\""
  [33] "                                      )"                                                                                                
  [34] "                   )"                                                                                                                   
  [35] "  invisible()"                                                                                                                          
  [36] "} "                                                                                                                                     
  [37] ""                                                                                                                                       
  [38] "################################"                                                                                                       
  [39] "##"                                                                                                                                     
  [40] "## Optional..-classes"                                                                                                                  
  [41] "##"                                                                                                                                     
  [42] "################################"                                                                                                       
  [43] "setClassUnion(\"OptionalMatrix\", "                                                                                                     
  [44] "               c(\"matrix\",\"NULL\")"                                                                                                  
  [45] "               )"                                                                                                                       
  [46] "### from Matthias' thesis / ROptEst"                                                                                                    
  [47] "## optional numeric"                                                                                                                    
  [48] "setClassUnion(\"OptionalNumeric\", c(\"numeric\", \"NULL\"))"                                                                           
  [49] ""                                                                                                                                       
  [50] "################################"                                                                                                       
  [51] "##"                                                                                                                                     
  [52] "## utility classes "                                                                                                                    
  [53] "##"                                                                                                                                     
  [54] "################################"                                                                                                       
  [55] ""                                                                                                                                       
  [56] "setClass(\"Integer\", contains =\"numeric\","                                                                                           
  [57] "          validity = function(object) all(.isInteger(object)))"                                                                         
  [58] ""                                                                                                                                       
  [59] "################################"                                                                                                       
  [60] "##"                                                                                                                                     
  [61] "## space classes "                                                                                                                      
  [62] "##"                                                                                                                                     
  [63] "################################"                                                                                                       
  [64] ""                                                                                                                                       
  [65] "## virtal Class: rSpace"                                                                                                                
  [66] "setClass(\"rSpace\", "                                                                                                                  
  [67] "          representation = representation(name = \"character\"), "                                                                      
  [68] "          prototype = prototype(name = gettext(\"a space\")), "                                                                         
  [69] "          contains = \"VIRTUAL\""                                                                                                       
  [70] "          )"                                                                                                                            
  [71] ""                                                                                                                                       
  [72] "## Class: EuclideanSpace"                                                                                                               
  [73] "setClass(\"EuclideanSpace\", "                                                                                                          
  [74] "          representation = representation(dimension = \"numeric\"), "                                                                   
  [75] "          contains = \"rSpace\","                                                                                                       
  [76] "          prototype = prototype(dimension = 1, "                                                                                        
  [77] "                                name = gettext(\"Euclidean Space\")"                                                                    
  [78] "                                )"                                                                                                      
  [79] "         )"                                                                                                                             
  [80] ""                                                                                                                                       
  [81] "## Class: Reals"                                                                                                                        
  [82] "setClass(\"Reals\",  "                                                                                                                  
  [83] "          contains = \"EuclideanSpace\""                                                                                                
  [84] "          )"                                                                                                                            
  [85] ""                                                                                                                                       
  [86] ""                                                                                                                                       
  [87] "## Class: Lattice"                                                                                                                      
  [88] "setClass(\"Lattice\", "                                                                                                                 
  [89] "          representation = representation(pivot = \"numeric\", width = \"numeric\", "                                                   
  [90] "                                          Length = \"numeric\""                                                                         
  [91] "### masking not possible here -> Length instead of length"                                                                              
  [92] "                                          ),"                                                                                           
  [93] "          prototype = prototype(pivot = 0, width = 1, Length = 2, "                                                                     
  [94] "                                name = gettext(\"a default lattice\")"                                                                  
  [95] "                                ),"                                                                                                     
  [96] "          contains = \"rSpace\""                                                                                                        
  [97] "         )"                                                                                                                             
  [98] ""                                                                                                                                       
  [99] "## Class: Naturals"                                                                                                                     
 [100] "setClass(\"Naturals\", "                                                                                                                
 [101] "          contains = \"Reals\""                                                                                                         
 [102] "          )"                                                                                                                            
 [103] ""                                                                                                                                       
 [104] "################################"                                                                                                       
 [105] "##"                                                                                                                                     
 [106] "## parameter classes"                                                                                                                   
 [107] "##"                                                                                                                                     
 [108] "################################"                                                                                                       
 [109] ""                                                                                                                                       
 [110] "setClass(\"Parameter\", "                                                                                                               
 [111] "          representation = representation(name = \"character\"), "                                                                      
 [112] "          prototype = prototype(name = gettext(\"a parameter\"))"                                                                       
 [113] "          )"                                                                                                                            
 [114] ""                                                                                                                                       
 [115] "setClassUnion(\"OptionalParameter\", "                                                                                                  
 [116] "               c(\"Parameter\",\"NULL\")"                                                                                               
 [117] "               )"                                                                                                                       
 [118] ""                                                                                                                                       
 [119] ""                                                                                                                                       
 [120] "## Class: ChisqParameter"                                                                                                               
 [121] "setClass(\"ChisqParameter\", "                                                                                                          
 [122] "          representation = representation(df = \"numeric\", ncp = \"numeric\"), "                                                       
 [123] "          prototype = prototype(df = 1, ncp = 0, "                                                                                      
 [124] "                      name = gettext(\"Parameter of a Chisq distribution\")"                                                            
 [125] "                      ), "                                                                                                              
 [126] "          contains = \"Parameter\""                                                                                                     
 [127] "          )"                                                                                                                            
 [128] ""                                                                                                                                       
 [129] "### Class: DiracParameter"                                                                                                              
 [130] "setClass(\"DiracParameter\", "                                                                                                          
 [131] "          representation = representation(location = \"numeric\"), "                                                                    
 [132] "          prototype = prototype(location = 0, "                                                                                         
 [133] "                      name = gettext(\"Parameter of a Dirac distribution\")"                                                            
 [134] "                      ), "                                                                                                              
 [135] "          contains = \"Parameter\""                                                                                                     
 [136] "          )"                                                                                                                            
 [137] ""                                                                                                                                       
 [138] "## Class: ExpParameter"                                                                                                                 
 [139] "setClass(\"ExpParameter\", "                                                                                                            
 [140] "          representation = representation(rate = \"numeric\"), "                                                                        
 [141] "          prototype = prototype(rate = 1, name = "                                                                                      
 [142] "                      gettext(\"Parameter of an Exponential distribution\")"                                                            
 [143] "                      ),  "                                                                                                             
 [144] "          contains = \"Parameter\""                                                                                                     
 [145] "          )"                                                                                                                            
 [146] ""                                                                                                                                       
 [147] "## Class: GammaParameter"                                                                                                               
 [148] "setClass(\"GammaParameter\", "                                                                                                          
 [149] "          representation = representation(shape = \"numeric\", scale = \"numeric\"), "                                                  
 [150] "          prototype = prototype(shape = 1, scale = 1, "                                                                                 
 [151] "                      name = gettext(\"Parameter of a Gamma distribution\")"                                                            
 [152] "                      ), "                                                                                                              
 [153] "          contains = \"Parameter\""                                                                                                     
 [154] "          )"                                                                                                                            
 [155] ""                                                                                                                                       
 [156] "## Class: PoisParameter"                                                                                                                
 [157] "setClass(\"PoisParameter\", "                                                                                                           
 [158] "          representation = representation(lambda = \"numeric\"), "                                                                      
 [159] "          prototype = prototype(lambda = 1, "                                                                                           
 [160] "                      name = gettext(\"Parameter of a Poisson distribution\")"                                                          
 [161] "                      ), "                                                                                                              
 [162] "          contains = \"Parameter\""                                                                                                     
 [163] "          )"                                                                                                                            
 [164] ""                                                                                                                                       
 [165] "## Class: NbinomParameter"                                                                                                              
 [166] "setClass(\"NbinomParameter\", "                                                                                                         
 [167] "          representation = representation(size = \"numeric\", prob = \"numeric\"), "                                                    
 [168] "          prototype = prototype(size = 1, prob = 0.5, name = "                                                                          
 [169] "                      gettext(\"Parameter of a Negative Binomial distribution\")"                                                       
 [170] "                      ), "                                                                                                              
 [171] "          contains = \"Parameter\""                                                                                                     
 [172] "          )"                                                                                                                            
 [173] ""                                                                                                                                       
 [174] "## Class: HyperParameter"                                                                                                               
 [175] "setClass(\"HyperParameter\", "                                                                                                          
 [176] "          representation = representation(m = \"numeric\", n = \"numeric\", "                                                           
 [177] "                                          k = \"numeric\""                                                                              
 [178] "                                          ), "                                                                                          
 [179] "          prototype = prototype(m = 1, n = 1, k = 1, name = "                                                                           
 [180] "                      gettext(\"Parameter of a Hypergeometric distribution\")"                                                          
 [181] "                      ), "                                                                                                              
 [182] "          contains = \"Parameter\""                                                                                                     
 [183] "          )"                                                                                                                            
 [184] ""                                                                                                                                       
 [185] "## Class: BinomParameter"                                                                                                               
 [186] "setClass(\"BinomParameter\", "                                                                                                          
 [187] "          representation = representation(size = \"numeric\", prob = \"numeric\"), "                                                    
 [188] "          prototype = prototype(size = 1, prob = 0.5, name = "                                                                          
 [189] "                      gettext(\"Parameter of a Binomial distribution\")"                                                                
 [190] "                      ), "                                                                                                              
 [191] "          contains = \"Parameter\""                                                                                                     
 [192] "          )"                                                                                                                            
 [193] ""                                                                                                                                       
 [194] "#-"                                                                                                                                     
 [195] "## no longer needed: this is a negBinom with size 1 no longer "                                                                         
 [196] "#-"                                                                                                                                     
 [197] "### !!! deprecated as of version 1.9 !!!"                                                                                               
 [198] "##"                                                                                                                                     
 [199] "## Class: GeomParameter   "                                                                                                             
 [200] "setClass(\"GeomParameter\", "                                                                                                           
 [201] "          representation = representation(prob = \"numeric\"), "                                                                        
 [202] "          prototype = prototype(prob = 0.5, name = "                                                                                    
 [203] "                      gettext(\"Parameter of a Geometric distribution\")"                                                               
 [204] "                      ), "                                                                                                              
 [205] "          contains = \"Parameter\""                                                                                                     
 [206] "          )"                                                                                                                            
 [207] "### !!! end of deprecated !!! "                                                                                                         
 [208] ""                                                                                                                                       
 [209] "## Class: CauchyParameter"                                                                                                              
 [210] "setClass(\"CauchyParameter\", "                                                                                                         
 [211] "          representation = representation(location = \"numeric\", "                                                                     
 [212] "                                          scale = \"numeric\""                                                                          
 [213] "                                          ), "                                                                                          
 [214] "          prototype = prototype(location = 0, scale = 1, name = "                                                                       
 [215] "                      gettext(\"Parameter of a Cauchy distribution\")"                                                                  
 [216] "                      ), "                                                                                                              
 [217] "          contains = \"Parameter\""                                                                                                     
 [218] "          )"                                                                                                                            
 [219] ""                                                                                                                                       
 [220] "## Class: NormParameter"                                                                                                                
 [221] "setClass(\"NormParameter\", "                                                                                                           
 [222] "          representation = representation(mean = \"numeric\", sd = \"vector\"), "                                                       
 [223] "          prototype = prototype(mean = 0, sd = 1, name = "                                                                              
 [224] "                      gettext(\"Parameter of a Normal distribution\")"                                                                  
 [225] "                      ), "                                                                                                              
 [226] "          contains = \"Parameter\""                                                                                                     
 [227] "          )"                                                                                                                            
 [228] ""                                                                                                                                       
 [229] "## Class: UniNormParameter"                                                                                                             
 [230] "setClass(\"UniNormParameter\", "                                                                                                        
 [231] "          prototype = prototype(name = "                                                                                                
 [232] "                      gettext(\"Parameter of a univariate Normal distribution\")"                                                       
 [233] "                      ), "                                                                                                              
 [234] "          contains = \"NormParameter\""                                                                                                 
 [235] "          )"                                                                                                                            
 [236] ""                                                                                                                                       
 [237] "## Class: UnifParameter"                                                                                                                
 [238] "setClass(\"UnifParameter\", "                                                                                                           
 [239] "          representation = representation(Min = \"numeric\", Max = \"numeric\"), "                                                      
 [240] "          prototype = prototype(Min = 0, Max = 1, name =  "                                                                             
 [241] "                      gettext(\"Parameter of a Uniform distribution\")"                                                                 
 [242] "                      ), "                                                                                                              
 [243] "          contains = \"Parameter\""                                                                                                     
 [244] "          )"                                                                                                                            
 [245] ""                                                                                                                                       
 [246] "## Class: FParameter"                                                                                                                   
 [247] "setClass(\"FParameter\", "                                                                                                              
 [248] "          representation = representation(df1 = \"numeric\", df2 = \"numeric\", "                                                       
 [249] "                                          ncp = \"numeric\""                                                                            
 [250] "                                          ), "                                                                                          
 [251] "          prototype = prototype(df1 = 1, df2 = 1, ncp = 0, name = "                                                                     
 [252] "                      gettext(\"Parameter of a Fisher-Snedecor/F distribution\")"                                                       
 [253] "                      ), "                                                                                                              
 [254] "          contains = \"Parameter\""                                                                                                     
 [255] "          )"                                                                                                                            
 [256] ""                                                                                                                                       
 [257] "## Class: TParameter"                                                                                                                   
 [258] "setClass(\"TParameter\", "                                                                                                              
 [259] "          representation = representation(df = \"numeric\", ncp = \"numeric\"), "                                                       
 [260] "          prototype = prototype(df = 1, ncp = 0, name = "                                                                               
 [261] "                      gettext(\"Parameter of a Student/T distribution\")"                                                               
 [262] "                      ), "                                                                                                              
 [263] "          contains = \"Parameter\""                                                                                                     
 [264] "          )"                                                                                                                            
 [265] ""                                                                                                                                       
 [266] "## Class: LNormParameter"                                                                                                               
 [267] "setClass(\"LnormParameter\", "                                                                                                          
 [268] "          representation = representation(meanlog = \"numeric\","                                                                       
 [269] "                                          sdlog = \"numeric\""                                                                          
 [270] "                                          ), "                                                                                          
 [271] "          prototype = prototype(meanlog = 0, meansd = 1, name =  "                                                                      
 [272] "                      gettext(\"Parameter of a Log-Normal distribution\")"                                                              
 [273] "                      ), "                                                                                                              
 [274] "          contains = \"Parameter\""                                                                                                     
 [275] "          )"                                                                                                                            
 [276] ""                                                                                                                                       
 [277] "## Class: BetaParameter"                                                                                                                
 [278] "setClass(\"BetaParameter\", "                                                                                                           
 [279] "          representation = representation(shape1 = \"numeric\", "                                                                       
 [280] "                                          shape2 = \"numeric\", ncp = \"numeric\""                                                      
 [281] "                                          ), "                                                                                          
 [282] "          prototype = prototype(shape1 = 1, shape2 = 1, ncp = 0, name = "                                                               
 [283] "                      gettext(\"Parameter of a Beta distribution\")"                                                                    
 [284] "                      ), "                                                                                                              
 [285] "          contains = \"Parameter\""                                                                                                     
 [286] "          )"                                                                                                                            
 [287] ""                                                                                                                                       
 [288] "## Class: LogisParameter"                                                                                                               
 [289] "setClass(\"LogisParameter\", "                                                                                                          
 [290] "          representation = representation(location = \"numeric\", "                                                                     
 [291] "                                          scale = \"numeric\""                                                                          
 [292] "                                          ), "                                                                                          
 [293] "          prototype = prototype(location = 0, scale = 1, name = "                                                                       
 [294] "                      gettext(\"Parameter of a Logistic distribution\")"                                                                
 [295] "                      ), "                                                                                                              
 [296] "          contains = \"Parameter\""                                                                                                     
 [297] "          )"                                                                                                                            
 [298] ""                                                                                                                                       
 [299] "## Class: WeibullParameter"                                                                                                             
 [300] "setClass(\"WeibullParameter\", "                                                                                                        
 [301] "          representation = representation(shape = \"numeric\", "                                                                        
 [302] "                                          scale = \"numeric\""                                                                          
 [303] "                                          ), "                                                                                          
 [304] "          prototype = prototype(shape = 1, scale = 1, name = "                                                                          
 [305] "                      gettext(\"Parameter of a Weibull distribution\")"                                                                 
 [306] "                      ), "                                                                                                              
 [307] "          contains = \"Parameter\""                                                                                                     
 [308] "          )"                                                                                                                            
 [309] ""                                                                                                                                       
 [310] "################################"                                                                                                       
 [311] "##"                                                                                                                                     
 [312] "## matrix classes"                                                                                                                      
 [313] "##"                                                                                                                                     
 [314] "################################"                                                                                                       
 [315] "## positive definite, symmetric matrices with finite entries"                                                                           
 [316] "setClass(\"PosSemDefSymmMatrix\", contains = \"matrix\","                                                                               
 [317] "            prototype = prototype(matrix(1)),"                                                                                          
 [318] "            validity = function(object){"                                                                                               
 [319] "                if(nrow(object) != ncol(object))"                                                                                       
 [320] "                    stop(\"no square matrix\")"                                                                                         
 [321] "                if(any(!is.finite(object)))"                                                                                            
 [322] "                    stop(\"inifinite or missing values in matrix\")"                                                                    
 [323] "                if(!isTRUE(all.equal(object, t(object), .Machine$double.eps^0.5,"                                                       
 [324] "                                     check.attributes = FALSE)))"                                                                       
 [325] "                    stop(\"matrix is not symmetric\")"                                                                                  
 [326] "                if(!all(eigen(object)$values > -100*.Machine$double.eps))"                                                              
 [327] "                   stop(\"matrix is (numerically) not positive semi - definite\")"                                                      
 [328] "               return(TRUE)"                                                                                                            
 [329] "            })"                                                                                                                         
 [330] ""                                                                                                                                       
 [331] "## positive definite, symmetric matrices with finite entries"                                                                           
 [332] "setClass(\"PosDefSymmMatrix\", contains = \"PosSemDefSymmMatrix\","                                                                     
 [333] "            validity = function(object){"                                                                                               
 [334] "               if(!all(eigen(object)$values > 100*.Machine$double.eps))"                                                                
 [335] "                   stop(\"matrix is (numerically) not positive definite\")"                                                             
 [336] "               valid <- getValidity(getClass(\"PosSemDefSymmMatrix\"))"                                                                 
 [337] "               valid(as(object, \"PosSemDefSymmMatrix\"))"                                                                              
 [338] "               return(TRUE)"                                                                                                            
 [339] "            })"                                                                                                                         
 [340] ""                                                                                                                                       
 [341] ""                                                                                                                                       
 [342] "################################"                                                                                                       
 [343] "##"                                                                                                                                     
 [344] "## symmetry classes"                                                                                                                    
 [345] "##"                                                                                                                                     
 [346] "################################"                                                                                                       
 [347] ""                                                                                                                                       
 [348] "### from Matthias' thesis / ROptEst / moved from distrMod"                                                                              
 [349] ""                                                                                                                                       
 [350] "## class of symmetries"                                                                                                                 
 [351] "setClass(\"Symmetry\", representation(type = \"character\","                                                                            
 [352] "                                    SymmCenter = \"ANY\"),"                                                                             
 [353] "                     contains = \"VIRTUAL\")"                                                                                           
 [354] ""                                                                                                                                       
 [355] "## symmetry of distributions"                                                                                                           
 [356] "setClass(\"DistributionSymmetry\", contains = c(\"Symmetry\", \"VIRTUAL\"))"                                                            
 [357] ""                                                                                                                                       
 [358] "## no symmetry"                                                                                                                         
 [359] "setClass(\"NoSymmetry\", contains = \"DistributionSymmetry\","                                                                          
 [360] "            prototype = prototype(type = \"non-symmetric distribution\","                                                               
 [361] "                                  SymmCenter = NULL))"                                                                                  
 [362] ""                                                                                                                                       
 [363] "## elliptical symmetry"                                                                                                                 
 [364] "setClass(\"EllipticalSymmetry\", contains = \"DistributionSymmetry\","                                                                  
 [365] "            prototype = prototype(type = \"elliptically symmetric distribution\","                                                      
 [366] "                                  SymmCenter = numeric(0)))"                                                                            
 [367] ""                                                                                                                                       
 [368] "## spherical symmetry"                                                                                                                  
 [369] "setClass(\"SphericalSymmetry\", contains = \"EllipticalSymmetry\","                                                                     
 [370] "            prototype = prototype(type = \"spherically symmetric distribution\","                                                       
 [371] "                                  SymmCenter = numeric(0)))"                                                                            
 [372] ""                                                                                                                                       
 [373] "## list of symmetry types"                                                                                                              
 [374] "setClass(Class = \"DistrSymmList\","                                                                                                    
 [375] "            prototype = prototype(list(new(\"NoSymmetry\"))),"                                                                          
 [376] "            contains = \"list\","                                                                                                       
 [377] "            validity = function(object){"                                                                                               
 [378] "                nrvalues <- length(object)"                                                                                             
 [379] "                for(i in 1:nrvalues)"                                                                                                   
 [380] "                    if(!is(object[[i]], \"DistributionSymmetry\"))"                                                                     
 [381] "                        stop(\"element \", i, \" is no 'DistributionSymmetry'\")"                                                       
 [382] "                return(TRUE)"                                                                                                           
 [383] "            })"                                                                                                                         
 [384] ""                                                                                                                                       
 [385] ""                                                                                                                                       
 [386] "################################"                                                                                                       
 [387] "##"                                                                                                                                     
 [388] "## distribution classes"                                                                                                                
 [389] "##"                                                                                                                                     
 [390] "################################"                                                                                                       
 [391] ""                                                                                                                                       
 [392] "setClass(\"Distribution\","                                                                                                             
 [393] "          representation = representation("                                                                                             
 [394] "                      img = \"rSpace\","                                                                                                
 [395] "                      param = \"OptionalParameter\","                                                                                   
 [396] "                      r = \"function\","                                                                                                
 [397] "                      d = \"OptionalFunction\","                                                                                        
 [398] "                      p = \"OptionalFunction\","                                                                                        
 [399] "                      q = \"OptionalFunction\", # extended by P.R. 28-03-06"                                                            
 [400] "                      .withSim = \"logical\",   ## 'internal' slots => no"                                                              
 [401] "                      .withArith = \"logical\",  ## accessor/replacement functions"                                                     
 [402] "                      .logExact = \"logical\","                                                                                         
 [403] "                      .lowerExact = \"logical\","                                                                                       
 [404] "                      Symmetry = \"DistributionSymmetry\""                                                                              
 [405] "                      ),"                                                                                                               
 [406] "         prototype = prototype("                                                                                                        
 [407] "                     r = function(n){ rnorm(n, mean = 0, sd = 1) },"                                                                    
 [408] "                     d = function(x, log = FALSE)"                                                                                      
 [409] "                            { dnorm(x, mean = 0, sd = 1, log = log) },"                                                                 
 [410] "                     p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                                
 [411] "                             { pnorm(q, mean = 0, sd = 1,"                                                                              
 [412] "                                     lower.tail = lower.tail, log.p = log.p) },"                                                        
 [413] "                     q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                                
 [414] "                             { qnorm(p, mean = 0, sd = 1,"                                                                              
 [415] "                                     lower.tail = lower.tail, log.p = log.p) },"                                                        
 [416] "                     img = new(\"Reals\"),"                                                                                             
 [417] "                     param = NULL,"                                                                                                     
 [418] "                     .withArith = FALSE,"                                                                                               
 [419] "                     .withSim = FALSE,"                                                                                                 
 [420] "                     .logExact = FALSE,"                                                                                                
 [421] "                     .lowerExact = FALSE,"                                                                                              
 [422] "                     Symmetry = new(\"NoSymmetry\")"                                                                                    
 [423] "                     )"                                                                                                                 
 [424] "         )"                                                                                                                             
 [425] ""                                                                                                                                       
 [426] "## Class: UnivariateDistribution"                                                                                                       
 [427] "setClass(\"UnivariateDistribution\",  "                                                                                                 
 [428] "          contains = \"Distribution\""                                                                                                  
 [429] "          )"                                                                                                                            
 [430] ""                                                                                                                                       
 [431] "### ---- absolutely continuous distributions ---- ###"                                                                                  
 [432] ""                                                                                                                                       
 [433] "## AbscontDistribution"                                                                                                                 
 [434] "setClass(\"AbscontDistribution\", "                                                                                                     
 [435] "          representation = representation(gaps = \"OptionalMatrix\"),"                                                                  
 [436] "          prototype = prototype(gaps = NULL),"                                                                                          
 [437] "          contains = \"UnivariateDistribution\""                                                                                        
 [438] "          )"                                                                                                                            
 [439] ""                                                                                                                                       
 [440] ""                                                                                                                                       
 [441] ""                                                                                                                                       
 [442] "## inbetween-Class: ExpOrGammaOrChisq"                                                                                                  
 [443] ""                                                                                                                                       
 [444] "#not quite virtual ..."                                                                                                                 
 [445] "setClass(\"ExpOrGammaOrChisq\", "                                                                                                       
 [446] "          contains = c(\"AbscontDistribution\", \"VIRTUAL\")"                                                                           
 [447] "          )"                                                                                                                            
 [448] ""                                                                                                                                       
 [449] ""                                                                                                                                       
 [450] "## Class: exponential distribution"                                                                                                     
 [451] "setClass(\"Exp\","                                                                                                                      
 [452] "          prototype = prototype("                                                                                                       
 [453] "                      r = function(n){ rexp(n, rate = 1) },"                                                                            
 [454] "                      d = function(x, log = FALSE)"                                                                                     
 [455] "                                  { dexp(x, rate = 1, log = log) },"                                                                    
 [456] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [457] "                                  { pexp(q, rate = 1, lower.tail = lower.tail,"                                                         
 [458] "                                         log.p = log.p) },"                                                                             
 [459] "                      q = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [460] "                                  { qexp(p, rate = 1, lower.tail = lower.tail,"                                                         
 [461] "                                         log.p = log.p) },"                                                                             
 [462] "                      param = new(\"ExpParameter\"),"                                                                                   
 [463] "                     .logExact = TRUE,"                                                                                                 
 [464] "                     .lowerExact = TRUE"                                                                                                
 [465] "                      ),"                                                                                                               
 [466] "          contains = \"ExpOrGammaOrChisq\""                                                                                             
 [467] "          )"                                                                                                                            
 [468] ""                                                                                                                                       
 [469] "## Class: gamma distribution"                                                                                                           
 [470] "setClass(\"Gammad\","                                                                                                                   
 [471] "          prototype = prototype("                                                                                                       
 [472] "                      r = function(n){ rgamma(n, shape = 1, scale = 1) },"                                                              
 [473] "                      d = function(x, log = FALSE){"                                                                                    
 [474] "                              dgamma(x, shape = 1, scale = 1, log = log)"                                                               
 [475] "                                          },"                                                                                           
 [476] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [477] "                              pgamma(q, shape = 1, scale = 1,"                                                                          
 [478] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [479] "                                          },"                                                                                           
 [480] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [481] "                              qgamma(p, shape = 1, scale = 1,"                                                                          
 [482] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [483] "                                          },"                                                                                           
 [484] "                      param = new(\"GammaParameter\"),"                                                                                 
 [485] "                     .logExact = TRUE,"                                                                                                 
 [486] "                     .lowerExact = TRUE"                                                                                                
 [487] "                      ),"                                                                                                               
 [488] "          contains = \"ExpOrGammaOrChisq\""                                                                                             
 [489] "          )"                                                                                                                            
 [490] ""                                                                                                                                       
 [491] "## Class: Chi squared distribution"                                                                                                     
 [492] "setClass(\"Chisq\","                                                                                                                    
 [493] "          prototype = prototype("                                                                                                       
 [494] "                      r = function(n){ rchisq(n, df = 1, ncp = 0) },"                                                                   
 [495] "                      d = function(x, log = FALSE)"                                                                                     
 [496] "                                  { dchisq(x, df = 1, ncp = 0, log = log) },"                                                           
 [497] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [498] "                                  { pchisq(q, df = 1, ncp = 0,"                                                                         
 [499] "                                           lower.tail = lower.tail,"                                                                    
 [500] "                                           log.p = log.p) },"                                                                           
 [501] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [502] "                                  { qchisq(p, df = 1, ncp = 0,"                                                                         
 [503] "                                           lower.tail = lower.tail,"                                                                    
 [504] "                                           log.p = log.p) },"                                                                           
 [505] "                      param = new(\"ChisqParameter\"),"                                                                                 
 [506] "                     .logExact = TRUE,"                                                                                                 
 [507] "                     .lowerExact = TRUE"                                                                                                
 [508] "                      ),"                                                                                                               
 [509] "          contains = \"ExpOrGammaOrChisq\""                                                                                             
 [510] "          )"                                                                                                                            
 [511] ""                                                                                                                                       
 [512] "## Class: Laplace or Double Exponential distribution"                                                                                   
 [513] "setClass(\"DExp\","                                                                                                                     
 [514] "          prototype = prototype("                                                                                                       
 [515] "                      r = function(n){"                                                                                                 
 [516] "                              (2*rbinom(n ,size = 1, prob = 0.5)-1) *"                                                                  
 [517] "                                 rexp(n, rate = 1)"                                                                                     
 [518] "                              },"                                                                                                       
 [519] "                      d = function(x, log = FALSE)"                                                                                     
 [520] "                              { d0 <-  dexp(abs(x), rate = 1, log = log)"                                                               
 [521] "                                d0 <- if (log) d0-log(2) else d0 <- d0 / 2"                                                             
 [522] "                                return(d0) },"                                                                                          
 [523] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [524] "                                   if (!lower.tail) q <- -q"                                                                            
 [525] "                                   p0 <- ifelse( q <= 0,"                                                                               
 [526] "                                                 0.5*pexp(-q, rate = 1,"                                                                
 [527] "                                                          lower.tail = FALSE),"                                                         
 [528] "                                                 0.5 + 0.5*pexp( q, rate = 1)"                                                          
 [529] "                                                    )"                                                                                  
 [530] "                                   if (log.p)  p0 <- log(p0)"                                                                           
 [531] "                                   return(p0)"                                                                                          
 [532] "                                   },"                                                                                                  
 [533] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [534] "                              if (log.p) p <- exp(p)"                                                                                   
 [535] "                              if (!lower.tail) p <- 1-p"                                                                                
 [536] "                              ifelse( p <= 0.25,"                                                                                       
 [537] "                                  -qexp(2*p, rate = 1, lower.tail = FALSE),"                                                            
 [538] "                                  ifelse( p <= 0.5,"                                                                                    
 [539] "                                      -qexp(1-2*p, rate = 1),"                                                                          
 [540] "                                      ifelse( p <= 0.75   ,"                                                                            
 [541] "                                          qexp(2*p - 1, rate = 1),"                                                                     
 [542] "                                          qexp(2*(1-p), rate = 1,"                                                                      
 [543] "                                               lower.tail = FALSE)"                                                                     
 [544] "                                            )"                                                                                          
 [545] "                                         )"                                                                                             
 [546] "                                     )},"                                                                                               
 [547] "                      param = new(\"ExpParameter\", name ="                                                                             
 [548] "                      gettext(\"Parameter of a Laplace/Double Exponential distribution\")"                                              
 [549] "                                 ),"                                                                                                    
 [550] "                     .logExact = TRUE,"                                                                                                 
 [551] "                     .lowerExact = TRUE,"                                                                                               
 [552] "                     Symmetry = new(\"SphericalSymmetry\", "                                                                            
 [553] "                                     type = \"univariate symmetric distribution\","                                                     
 [554] "                                     SymmCenter = 0)"                                                                                   
 [555] "                      ),"                                                                                                               
 [556] "          contains = \"AbscontDistribution\""                                                                                           
 [557] "          )"                                                                                                                            
 [558] ""                                                                                                                                       
 [559] "## Class: CauchyDistribution"                                                                                                           
 [560] "setClass(\"Cauchy\","                                                                                                                   
 [561] "          prototype = prototype("                                                                                                       
 [562] "                      r = function(n){ rcauchy(n,  location = 0, scale = 1) },"                                                         
 [563] "                      d = function(x, log = FALSE){"                                                                                    
 [564] "                              dcauchy(x,  location = 0, scale = 1, log = log)"                                                          
 [565] "                                          },"                                                                                           
 [566] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [567] "                              pcauchy(q,  location = 0, scale = 1,"                                                                     
 [568] "                                      lower.tail = lower.tail, log.p = log.p)"                                                          
 [569] "                                          },"                                                                                           
 [570] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [571] "                              qcauchy(p,  location = 0, scale = 1,"                                                                     
 [572] "                                      lower.tail = lower.tail, log.p = log.p)"                                                          
 [573] "                                          },"                                                                                           
 [574] "                      param = new(\"CauchyParameter\"),"                                                                                
 [575] "                     .logExact = TRUE,"                                                                                                 
 [576] "                     .lowerExact = TRUE,"                                                                                               
 [577] "                     Symmetry = new(\"SphericalSymmetry\", "                                                                            
 [578] "                                     type = \"univariate symmetric distribution\","                                                     
 [579] "                                     SymmCenter = 0)"                                                                                   
 [580] "                      ),"                                                                                                               
 [581] "          contains = \"AbscontDistribution\""                                                                                           
 [582] "          )"                                                                                                                            
 [583] ""                                                                                                                                       
 [584] "## Class: normal distribution"                                                                                                          
 [585] "setClass(\"Norm\","                                                                                                                     
 [586] "          prototype = prototype("                                                                                                       
 [587] "                      r = function(n){ rnorm(n, mean = 0, sd = 1) },"                                                                   
 [588] "                      d = function(x, log = FALSE)"                                                                                     
 [589] "                              { dnorm(x, mean = 0, sd = 1, log = log) },"                                                               
 [590] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [591] "                              { pnorm(q, mean = 0, sd = 1,"                                                                             
 [592] "                                      lower.tail = lower.tail, log.p = log.p) },"                                                       
 [593] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [594] "                              { qnorm(p, mean = 0, sd = 1,"                                                                             
 [595] "                                      lower.tail = lower.tail, log.p = log.p) },"                                                       
 [596] "                      param = new(\"UniNormParameter\"),"                                                                               
 [597] "                     .logExact = TRUE,"                                                                                                 
 [598] "                     .lowerExact = TRUE,"                                                                                               
 [599] "                     Symmetry = new(\"SphericalSymmetry\", "                                                                            
 [600] "                                     type = \"univariate symmetric distribution\","                                                     
 [601] "                                     SymmCenter = 0)"                                                                                   
 [602] "                      ),"                                                                                                               
 [603] "          contains = \"AbscontDistribution\""                                                                                           
 [604] "          )"                                                                                                                            
 [605] ""                                                                                                                                       
 [606] "## Class: lognormal distribution"                                                                                                       
 [607] "setClass(\"Lnorm\","                                                                                                                    
 [608] "          prototype = prototype("                                                                                                       
 [609] "                      r = function(n){ rlnorm(n, meanlog = 0, sdlog = 1) },"                                                            
 [610] "                      d = function(x, log = FALSE){"                                                                                    
 [611] "                              dlnorm(x, meanlog = 0, sdlog = 1, log = log)"                                                             
 [612] "                                          },"                                                                                           
 [613] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [614] "                              plnorm(q, meanlog = 0, sdlog = 1,"                                                                        
 [615] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [616] "                                          },"                                                                                           
 [617] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [618] "                              qlnorm(p, meanlog = 0, sdlog = 1,"                                                                        
 [619] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [620] "                                          },"                                                                                           
 [621] "                      param = new(\"LnormParameter\"),"                                                                                 
 [622] "                     .logExact = TRUE,"                                                                                                 
 [623] "                     .lowerExact = TRUE"                                                                                                
 [624] "                      ),"                                                                                                               
 [625] "          contains = \"AbscontDistribution\""                                                                                           
 [626] "          )"                                                                                                                            
 [627] ""                                                                                                                                       
 [628] "## Class: uniform distribution"                                                                                                         
 [629] "setClass(\"Unif\","                                                                                                                     
 [630] "          prototype = prototype("                                                                                                       
 [631] "                      r = function(n){ runif(n, min = 0, max = 1) },"                                                                   
 [632] "                      d = function(x, log = FALSE)"                                                                                     
 [633] "                              { dunif(x,  min = 0, max = 1, log = log) },"                                                              
 [634] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [635] "                              { punif(q,  min = 0, max = 1,"                                                                            
 [636] "                                      lower.tail = lower.tail, log.p = log.p) },"                                                       
 [637] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [638] "                              { qunif(p,  min = 0, max = 1,"                                                                            
 [639] "                                      lower.tail = lower.tail, log.p = log.p) },"                                                       
 [640] "                      param = new(\"UnifParameter\"),"                                                                                  
 [641] "                     .logExact = TRUE,"                                                                                                 
 [642] "                     .lowerExact = TRUE,"                                                                                               
 [643] "                     Symmetry = new(\"SphericalSymmetry\", "                                                                            
 [644] "                                     type = \"univariate symmetric distribution\","                                                     
 [645] "                                     SymmCenter = .5)"                                                                                  
 [646] "                      ),"                                                                                                               
 [647] "          contains = \"AbscontDistribution\""                                                                                           
 [648] "          )"                                                                                                                            
 [649] ""                                                                                                                                       
 [650] "## Class: F distribution"                                                                                                               
 [651] "setClass(\"Fd\","                                                                                                                       
 [652] "          prototype = prototype("                                                                                                       
 [653] "                      r = function(n){ rf(n,  df1 = 1, df2 = 1, ncp = 0) },"                                                            
 [654] "                      d = function(x, log = FALSE){"                                                                                    
 [655] "                              df(x, df1 = 1, df2 = 1, ncp = 0, log = log)"                                                              
 [656] "                                          },"                                                                                           
 [657] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [658] "                              pf(q, df1 = 1, df2 = 1, ncp = 0,"                                                                         
 [659] "                                 lower.tail = lower.tail, log.p = log.p)"                                                               
 [660] "                                          },"                                                                                           
 [661] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [662] "                              qf(p, df1 = 1, df2 = 1, ncp = 0,"                                                                         
 [663] "                                 lower.tail = lower.tail, log.p = log.p)"                                                               
 [664] "                                          },"                                                                                           
 [665] "                      param = new(\"FParameter\"),"                                                                                     
 [666] "                     .logExact = TRUE,"                                                                                                 
 [667] "                     .lowerExact = TRUE"                                                                                                
 [668] "                      ),"                                                                                                               
 [669] "          contains = \"AbscontDistribution\""                                                                                           
 [670] "          )"                                                                                                                            
 [671] ""                                                                                                                                       
 [672] "## Class: Student distribution"                                                                                                         
 [673] "setClass(\"Td\","                                                                                                                       
 [674] "          prototype = prototype("                                                                                                       
 [675] "                      r = function(n){ rt(n,  df = 1, ncp = 0) },"                                                                      
 [676] "                      d = function(x, log = FALSE)"                                                                                     
 [677] "                              { dt(x,  df = 1, ncp = 0, log = log) },"                                                                  
 [678] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [679] "                              { pt(q,  df = 1, ncp = 0,"                                                                                
 [680] "                                   lower.tail = lower.tail, log.p = log.p) },"                                                          
 [681] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [682] "                              { qt(p,  df = 1, ncp = 0,"                                                                                
 [683] "                                   lower.tail = lower.tail, log.p = log.p) },"                                                          
 [684] "                      param = new(\"TParameter\"),"                                                                                     
 [685] "                     .logExact = TRUE,"                                                                                                 
 [686] "                     .lowerExact = TRUE,"                                                                                               
 [687] "                     Symmetry = new(\"SphericalSymmetry\", "                                                                            
 [688] "                                     type = \"univariate symmetric distribution\","                                                     
 [689] "                                     SymmCenter = 0)"                                                                                   
 [690] "                      ),"                                                                                                               
 [691] "          contains = \"AbscontDistribution\""                                                                                           
 [692] "          )"                                                                                                                            
 [693] ""                                                                                                                                       
 [694] ""                                                                                                                                       
 [695] "## Class: logistic distribution"                                                                                                        
 [696] "setClass(\"Logis\","                                                                                                                    
 [697] "          prototype = prototype("                                                                                                       
 [698] "                      r = function(n){ rlogis(n, location = 0, scale = 1) },"                                                           
 [699] "                      d = function(x, log = FALSE){"                                                                                    
 [700] "                              dlogis(x, location = 0, scale = 1, log = log)"                                                            
 [701] "                                          },"                                                                                           
 [702] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [703] "                              plogis(q, location = 0, scale = 1,"                                                                       
 [704] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [705] "                                          },"                                                                                           
 [706] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [707] "                              qlogis(p, location = 0, scale = 1,"                                                                       
 [708] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [709] "                                          },"                                                                                           
 [710] "                      param = new(\"LogisParameter\"),"                                                                                 
 [711] "                     .logExact = TRUE,"                                                                                                 
 [712] "                     .lowerExact = TRUE"                                                                                                
 [713] "                      ),"                                                                                                               
 [714] "          contains = \"AbscontDistribution\""                                                                                           
 [715] "          )"                                                                                                                            
 [716] ""                                                                                                                                       
 [717] "## Class: BetaDistribution"                                                                                                             
 [718] "setClass(\"Beta\","                                                                                                                     
 [719] "          prototype = prototype("                                                                                                       
 [720] "                      r = function(n){"                                                                                                 
 [721] "                              rbeta(n,  shape1 = 1, shape2 = 1, ncp = 0)"                                                               
 [722] "                                     },"                                                                                                
 [723] "                      d = function(x, log = FALSE){"                                                                                    
 [724] "                              dbeta(x,  shape1 = 1, shape2 = 1, ncp = 0,"                                                               
 [725] "                                    lower.tail = lower.tail, log.p = log.p)"                                                            
 [726] "                                          },"                                                                                           
 [727] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [728] "                              pbeta(q,  shape1 = 1, shape2 = 1, ncp = 0,"                                                               
 [729] "                                    lower.tail = lower.tail, log.p = log.p)"                                                            
 [730] "                                          },"                                                                                           
 [731] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [732] "                              qbeta(p,  shape1 = 1, shape2 = 1, ncp = 0,"                                                               
 [733] "                                    lower.tail = lower.tail, log.p = log.p)"                                                            
 [734] "                                          },"                                                                                           
 [735] "                      param = new(\"BetaParameter\"),"                                                                                  
 [736] "                     .logExact = TRUE,"                                                                                                 
 [737] "                     .lowerExact = TRUE"                                                                                                
 [738] "                      ),"                                                                                                               
 [739] "          contains = \"AbscontDistribution\""                                                                                           
 [740] "          )"                                                                                                                            
 [741] ""                                                                                                                                       
 [742] "## Class: Weibull distribution"                                                                                                         
 [743] "setClass(\"Weibull\","                                                                                                                  
 [744] "          prototype = prototype("                                                                                                       
 [745] "                      r = function(n){ rweibull(n, shape = 1, scale = 1) },"                                                            
 [746] "                      d = function(x, log = FALSE){"                                                                                    
 [747] "                              dweibull(x, shape = 1, scale = 1, log = log)"                                                             
 [748] "                                          },"                                                                                           
 [749] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [750] "                              pweibull(q, shape = 1, scale = 1,"                                                                        
 [751] "                                       lower.tail = lower.tail, log.p = log.p)"                                                         
 [752] "                                          },"                                                                                           
 [753] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [754] "                              qweibull(p, shape = 1, scale = 1,"                                                                        
 [755] "                                       lower.tail = lower.tail, log.p = log.p)"                                                         
 [756] "                                          },"                                                                                           
 [757] "                      param = new(\"WeibullParameter\"),"                                                                               
 [758] "                     .logExact = TRUE,"                                                                                                 
 [759] "                     .lowerExact = TRUE"                                                                                                
 [760] "                      ),"                                                                                                               
 [761] "          contains = \"AbscontDistribution\""                                                                                           
 [762] "          )"                                                                                                                            
 [763] ""                                                                                                                                       
 [764] "## Class: Arcsine distribution"                                                                                                         
 [765] "setClass(\"Arcsine\","                                                                                                                  
 [766] "          prototype = prototype("                                                                                                       
 [767] "                      r = function(n){ sin((runif(n)-.5)*pi) },"                                                                        
 [768] "                      d = function(x, log = FALSE){"                                                                                    
 [769] "                              x0 <- (abs(x)<1-.Machine$double.eps)"                                                                     
 [770] "                              x1 <- x^2*x0"                                                                                             
 [771] "                              d <-  x0/sqrt(1-x1)/pi"                                                                                   
 [772] "                              d[.isEqual(abs(x),1)] <- Inf"                                                                             
 [773] "                              if(log) d<- log(d)"                                                                                       
 [774] "                              return(d)},"                                                                                              
 [775] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [776] "                              if(!lower.tail) q<- -q"                                                                                   
 [777] "                              q <- pmin(pmax(q,-1),1)"                                                                                  
 [778] "                              p <- asin(q)/pi+1/2"                                                                                      
 [779] "                              if(log.p) p <- log(p)"                                                                                    
 [780] "                              return(p)},"                                                                                              
 [781] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [782] "                              if(log.p) p <- exp(p)"                                                                                    
 [783] "                              p1 <- p"                                                                                                  
 [784] "                              p1[p<0|p>1] <- 0.5"                                                                                       
 [785] "                              if(!lower.tail) p1 <- 1-p1"                                                                               
 [786] "                              q <- sin( (p1-1/2)*pi)"                                                                                   
 [787] "                              q[p<0|p>1] <- NA"                                                                                         
 [788] "                              q[.isEqual(p,0)] <- -1"                                                                                   
 [789] "                              q[.isEqual(p,1)] <-  1"                                                                                   
 [790] "                              return(q)},"                                                                                              
 [791] "                     .logExact = TRUE,"                                                                                                 
 [792] "                     .lowerExact = TRUE,"                                                                                               
 [793] "                     Symmetry = new(\"SphericalSymmetry\", "                                                                            
 [794] "                                     type = \"univariate symmetric distribution\","                                                     
 [795] "                                     SymmCenter = 0)"                                                                                   
 [796] "                      ),"                                                                                                               
 [797] "          contains = \"AbscontDistribution\""                                                                                           
 [798] "          )"                                                                                                                            
 [799] ""                                                                                                                                       
 [800] ""                                                                                                                                       
 [801] "## inbetween-Class: AffLinAbscontDistribution"                                                                                          
 [802] ""                                                                                                                                       
 [803] "setClass(\"AffLinAbscontDistribution\", "                                                                                               
 [804] "          representation = representation(a = \"numeric\", b = \"numeric\","                                                            
 [805] "          X0 = \"AbscontDistribution\"),"                                                                                               
 [806] "          prototype = prototype(a = 1, b = 0, X0 = new(\"Norm\")),"                                                                     
 [807] "          contains = \"AbscontDistribution\""                                                                                           
 [808] "          )"                                                                                                                            
 [809] ""                                                                                                                                       
 [810] "### ---- discrete distributions ---- ###"                                                                                               
 [811] ""                                                                                                                                       
 [812] "## DiscreteDistribution"                                                                                                                
 [813] "setClass(\"DiscreteDistribution\", "                                                                                                    
 [814] "          representation = representation(support = \"numeric\"),"                                                                      
 [815] "          prototype = prototype("                                                                                                       
 [816] "                      r = function(n){ rbinom(n, size=1, prob=0.5) },"                                                                  
 [817] "                      d = function(x, log = FALSE)"                                                                                     
 [818] "                              { dbinom(x, size=1, prob=0.5, log = log) },"                                                              
 [819] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [820] "                              { pbinom(q, size=1, prob=0.5, "                                                                           
 [821] "                                       lower.tail = lower.tail, log.p = log.p) },"                                                      
 [822] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [823] "                              { qbinom(p, size=1, prob=0.5, "                                                                           
 [824] "                                       lower.tail = lower.tail, log.p = log.p) },"                                                      
 [825] "                      img = new(\"Reals\"),"                                                                                            
 [826] "                      support = 0:1 "                                                                                                   
 [827] "                      ), "                                                                                                              
 [828] "          contains = \"UnivariateDistribution\""                                                                                        
 [829] "          )"                                                                                                                            
 [830] ""                                                                                                                                       
 [831] "## LatticeDistribution"                                                                                                                 
 [832] "setClass(\"LatticeDistribution\", "                                                                                                     
 [833] "          representation = representation(lattice = \"Lattice\"),"                                                                      
 [834] "          prototype = prototype(lattice = new(\"Lattice\")),"                                                                           
 [835] "          contains = \"DiscreteDistribution\""                                                                                          
 [836] "          )"                                                                                                                            
 [837] ""                                                                                                                                       
 [838] ""                                                                                                                                       
 [839] "### Class: Dirac distribution"                                                                                                          
 [840] "setClass(\"Dirac\","                                                                                                                    
 [841] "          prototype = prototype("                                                                                                       
 [842] "                      r = function(n){ array(0, n)},"                                                                                   
 [843] "                      d = function(x, log)"                                                                                             
 [844] "                              { y <- rep(0,length(x))"                                                                                  
 [845] "                                d0 <- as.numeric(x == y)"                                                                               
 [846] "                                if(log) d0 <- log(d0)"                                                                                  
 [847] "                                return(d0)"                                                                                             
 [848] "                              },"                                                                                                       
 [849] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [850] "                              { p0 <- as.numeric(q + 10^-10 >= 0)"                                                                      
 [851] "                                if (!lower.tail) p0 <- 1-p0"                                                                            
 [852] "                                if (log.p) p0 <- log(p0)"                                                                               
 [853] "                                return(p0)"                                                                                             
 [854] "                              },"                                                                                                       
 [855] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [856] "                             {  if (log.p) p <- exp(p)"                                                                                 
 [857] "                                if(any((p < 0)|(p > 1)))"                                                                               
 [858] "                                   warning(\"q Method of class Dirac produced NaN's.\")"                                                
 [859] "                                q0 <- 0 * p"                                                                                            
 [860] "                                q0[(p<0) | (p>1)] <- NaN"                                                                               
 [861] "                                return(q0)"                                                                                             
 [862] "                              },"                                                                                                       
 [863] "                      param = new(\"DiracParameter\"),"                                                                                 
 [864] "                      support = 0,"                                                                                                     
 [865] "                      lattice = new(\"Lattice\","                                                                                       
 [866] "                                pivot = 0, width = 1, Length = 1, name ="                                                               
 [867] "                                gettext(\"lattice of a Dirac distribution\")"                                                           
 [868] "                                ),"                                                                                                     
 [869] "                     .logExact = TRUE,"                                                                                                 
 [870] "                     .lowerExact = TRUE"                                                                                                
 [871] "                      ),"                                                                                                               
 [872] "          contains = \"LatticeDistribution\""                                                                                           
 [873] "          )"                                                                                                                            
 [874] ""                                                                                                                                       
 [875] "## Class: Poisson distribution"                                                                                                         
 [876] "setClass(\"Pois\","                                                                                                                     
 [877] "          prototype = prototype("                                                                                                       
 [878] "                      r = function(n){ rpois(n, lambda = 1) },"                                                                         
 [879] "                      d = function(x, log = FALSE)"                                                                                     
 [880] "                              { dpois(x, lambda = 1, log = log) },"                                                                     
 [881] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [882] "                              { ppois(q, lambda = 1, lower.tail = lower.tail,"                                                          
 [883] "                                      log.p = log.p) },"                                                                                
 [884] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [885] "                              { qpois(p, lambda = 1, lower.tail = lower.tail,"                                                          
 [886] "                                      log.p = log.p) },"                                                                                
 [887] "                      img = new(\"Naturals\"),"                                                                                         
 [888] "                      param = new(\"PoisParameter\"),"                                                                                  
 [889] "                      support = seq( 0,"                                                                                                
 [890] "                                     qpois(getdistrOption(\"TruncQuantile\"),"                                                          
 [891] "                                           lambda = 1, lower.tail = FALSE),"                                                            
 [892] "                                     by = 1"                                                                                            
 [893] "                                    ),"                                                                                                 
 [894] "                      lattice = new(\"Lattice\","                                                                                       
 [895] "                                pivot = 0, width = 1, Length = Inf, name ="                                                             
 [896] "                                gettext(\"lattice of a Poisson distribution\")"                                                         
 [897] "                                ),"                                                                                                     
 [898] "                     .logExact = TRUE,"                                                                                                 
 [899] "                     .lowerExact = TRUE"                                                                                                
 [900] "                      ),"                                                                                                               
 [901] "          contains = \"LatticeDistribution\""                                                                                           
 [902] "          )"                                                                                                                            
 [903] ""                                                                                                                                       
 [904] "## Class: negative binomial distribution"                                                                                               
 [905] "setClass(\"Nbinom\","                                                                                                                   
 [906] "          prototype = prototype("                                                                                                       
 [907] "                      r = function(n){ rnbinom(n, size = 1, prob = 0.5) },"                                                             
 [908] "                      d = function(x, log = FALSE){"                                                                                    
 [909] "                              dnbinom(x, size = 1, prob = 0.5, log = log)"                                                              
 [910] "                                          },"                                                                                           
 [911] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [912] "                              pnbinom(q, size = 1, prob = 0.5,"                                                                         
 [913] "                                      lower.tail = lower.tail, log.p = log.p)"                                                          
 [914] "                                          },"                                                                                           
 [915] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [916] "                              qnbinom(p, size = 1, prob = 0.5,"                                                                         
 [917] "                                      lower.tail = lower.tail, log.p = log.p)"                                                          
 [918] "                                          },"                                                                                           
 [919] "                      img = new(\"Naturals\"),"                                                                                         
 [920] "                      param = new(\"NbinomParameter\"),"                                                                                
 [921] "                      support = seq( 0,"                                                                                                
 [922] "                                     qnbinom("                                                                                          
 [923] "                                        getdistrOption(\"TruncQuantile\"),"                                                             
 [924] "                                        size = 1, prob = 0.5, lower.tail = FALSE"                                                       
 [925] "                                            ),"                                                                                         
 [926] "                                     by = 1"                                                                                            
 [927] "                                     ),"                                                                                                
 [928] "                      lattice = new(\"Lattice\","                                                                                       
 [929] "                                pivot = 0, width = 1, Length = Inf, name ="                                                             
 [930] "                                gettext("                                                                                               
 [931] "                                  \"lattice of a Negative Binomial distribution\""                                                      
 [932] "                                       )"                                                                                               
 [933] "                                ),"                                                                                                     
 [934] "                     .logExact = TRUE,"                                                                                                 
 [935] "                     .lowerExact = TRUE"                                                                                                
 [936] "                      ),"                                                                                                               
 [937] "          contains = \"LatticeDistribution\""                                                                                           
 [938] "          )"                                                                                                                            
 [939] ""                                                                                                                                       
 [940] "## Class: hypergeometric distribution"                                                                                                  
 [941] "setClass(\"Hyper\","                                                                                                                    
 [942] "          prototype = prototype("                                                                                                       
 [943] "                      r = function(nn){ rhyper(nn, m = 1, n = 1, k = 1) },"                                                             
 [944] "                      d = function(x, log = FALSE){"                                                                                    
 [945] "                              dhyper(x, m = 1, n = 1, k = 1, log = log)"                                                                
 [946] "                                          },"                                                                                           
 [947] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [948] "                              phyper(q, m = 1, n = 1, k = 1,"                                                                           
 [949] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [950] "                                          },"                                                                                           
 [951] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [952] "                              qhyper(p, m = 1, n = 1, k = 1,"                                                                           
 [953] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [954] "                                          },"                                                                                           
 [955] "                      img = new(\"Naturals\"),"                                                                                         
 [956] "                      param = new(\"HyperParameter\"),"                                                                                 
 [957] "                      support = 0:1,"                                                                                                   
 [958] "                      lattice = new(\"Lattice\","                                                                                       
 [959] "                                pivot = 0, width = 1, Length = 2, name ="                                                               
 [960] "                                gettext("                                                                                               
 [961] "                                  \"lattice of a Hypergeometric distribution\""                                                         
 [962] "                                       )"                                                                                               
 [963] "                                ),"                                                                                                     
 [964] "                     .logExact = TRUE,"                                                                                                 
 [965] "                     .lowerExact = TRUE"                                                                                                
 [966] "                      ),"                                                                                                               
 [967] "          contains = \"LatticeDistribution\""                                                                                           
 [968] "          )"                                                                                                                            
 [969] ""                                                                                                                                       
 [970] "## Class: binomial distribution"                                                                                                        
 [971] "setClass(\"Binom\","                                                                                                                    
 [972] "          prototype = prototype("                                                                                                       
 [973] "                      r = function(n){ rbinom(n, size = 1,prob = 0.5) },"                                                               
 [974] "                      d = function(x, log = FALSE){"                                                                                    
 [975] "                              dbinom(x, size = 1, prob = 0.5, log = log)"                                                               
 [976] "                                          },"                                                                                           
 [977] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [978] "                              pbinom(q, size = 1, prob = 0.5,"                                                                          
 [979] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [980] "                                          },"                                                                                           
 [981] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [982] "                              qbinom(p, size = 1, prob = 0.5,"                                                                          
 [983] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [984] "                                          },"                                                                                           
 [985] "                      img = new(\"Naturals\"),"                                                                                         
 [986] "                      param = new(\"BinomParameter\"),"                                                                                 
 [987] "                      support = 0:1,"                                                                                                   
 [988] "                      lattice = new(\"Lattice\","                                                                                       
 [989] "                                pivot = 0, width = 1, Length = 2, name ="                                                               
 [990] "                                gettext("                                                                                               
 [991] "                                  \"lattice of a Binomial distribution\""                                                               
 [992] "                                       )"                                                                                               
 [993] "                                ),"                                                                                                     
 [994] "                     .logExact = TRUE,"                                                                                                 
 [995] "                     .lowerExact = TRUE"                                                                                                
 [996] "                      ),"                                                                                                               
 [997] "          contains = \"LatticeDistribution\""                                                                                           
 [998] "          )"                                                                                                                            
 [999] ""                                                                                                                                       
[1000] "## Class: geometric distribution"                                                                                                       
[1001] "setClass(\"Geom\","                                                                                                                     
[1002] "          prototype = prototype("                                                                                                       
[1003] "                      r = function(n){ rgeom(n, prob = 0.5) },"                                                                         
[1004] "                      d = function(x, log = FALSE)"                                                                                     
[1005] "                              { dgeom(x, prob = 0.5, log = log) },"                                                                     
[1006] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
[1007] "                              { pgeom(q, prob = 0.5, lower.tail = lower.tail,"                                                          
[1008] "                                      log.p = log.p) },"                                                                                
[1009] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
[1010] "                              { qgeom(p, prob = 0.5, lower.tail = lower.tail,"                                                          
[1011] "                                      log.p = log.p) },"                                                                                
[1012] "                      param = new(\"NbinomParameter\", name ="                                                                          
[1013] "                              gettext(\"Parameter of a Geometric distribution\")"                                                       
[1014] "                              ),"                                                                                                       
[1015] "                      support = seq( 0,"                                                                                                
[1016] "                                     qgeom(getdistrOption(\"TruncQuantile\"),"                                                          
[1017] "                                           prob = 0.5, lower.tail = FALSE),"                                                            
[1018] "                                     by = 1"                                                                                            
[1019] "                                    ),"                                                                                                 
[1020] "                      lattice = new(\"Lattice\","                                                                                       
[1021] "                                pivot = 0, width = 1, Length = Inf, name ="                                                             
[1022] "                                gettext("                                                                                               
[1023] "                                  \"lattice of a Geometric distribution\""                                                              
[1024] "                                       )"                                                                                               
[1025] "                                ),"                                                                                                     
[1026] "                     .logExact = TRUE,"                                                                                                 
[1027] "                     .lowerExact = TRUE"                                                                                                
[1028] "                      ),"                                                                                                               
[1029] "          contains = \"Nbinom\""                                                                                                        
[1030] "          )"                                                                                                                            
[1031] ""                                                                                                                                       
[1032] "### ---- List of distributions by M. Kohl ---- ###"                                                                                     
[1033] ""                                                                                                                                       
[1034] "setClass(Class = \"DistrList\", "                                                                                                       
[1035] "            prototype = prototype(list(new(\"Norm\"))), "                                                                               
[1036] "            contains = \"list\","                                                                                                       
[1037] "            validity = function(object){"                                                                                               
[1038] "                nrvalues <- length(object)"                                                                                             
[1039] "                for(i in 1:nrvalues)"                                                                                                   
[1040] "                    if(!is(object[[i]], \"Distribution\")) "                                                                            
[1041] "                        stop(\"element \", i, \" is no 'Distribution'\")"                                                               
[1042] "                return(TRUE) "                                                                                                          
[1043] "            })"                                                                                                                         
[1044] ""                                                                                                                                       
[1045] "## inbetween-Classes: AffLinDiscreteDistribution, AffLinLatticeDistribution"                                                            
[1046] ""                                                                                                                                       
[1047] "setClass(\"AffLinDiscreteDistribution\", "                                                                                              
[1048] "          representation = representation(a = \"numeric\", b = \"numeric\","                                                            
[1049] "          X0 = \"DiscreteDistribution\"),"                                                                                              
[1050] "          prototype = prototype(a = 1, b = 0, X0 = new(\"Binom\")),"                                                                    
[1051] "          contains = \"DiscreteDistribution\""                                                                                          
[1052] "          )"                                                                                                                            
[1053] ""                                                                                                                                       
[1054] "setClass(\"AffLinLatticeDistribution\", "                                                                                               
[1055] "          contains = c(\"LatticeDistribution\", \"AffLinDiscreteDistribution\")"                                                        
[1056] "          )"                                                                                                                            
[1057] ""                                                                                                                                       
[1058] ""                                                                                                                                       
[1059] ""                                                                                                                                       
[1060] ""                                                                                                                                       
[1061] "################################"                                                                                                       
[1062] "##"                                                                                                                                     
[1063] "## Distribution List classes "                                                                                                          
[1064] "##"                                                                                                                                     
[1065] "################################"                                                                                                       
[1066] ""                                                                                                                                       
[1067] "setClass(\"UnivarDistrList\", "                                                                                                         
[1068] "            prototype = prototype(list(new(\"Norm\"))), "                                                                               
[1069] "            contains = \"DistrList\", "                                                                                                 
[1070] "            validity = function(object){"                                                                                               
[1071] "                nrvalues <- length(object)"                                                                                             
[1072] "                for(i in 1:nrvalues)"                                                                                                   
[1073] "                    if(!is(object[[i]], \"UnivariateDistribution\"))"                                                                   
[1074] "                        stop(\"element \", i, \" is no 'UnivariateDistribution'\")"                                                     
[1075] "                return(TRUE) "                                                                                                          
[1076] "            })"                                                                                                                         
[1077] ""                                                                                                                                       
[1078] ""                                                                                                                                       
[1079] "#### new from version 2.0: Mixing Distributions"                                                                                        
[1080] ""                                                                                                                                       
[1081] "################################"                                                                                                       
[1082] "##"                                                                                                                                     
[1083] "## Mixing Distribution classes "                                                                                                        
[1084] "##"                                                                                                                                     
[1085] "################################"                                                                                                       
[1086] ""                                                                                                                                       
[1087] "setClass(\"UnivarMixingDistribution\","                                                                                                 
[1088] "            representation = representation(mixCoeff = \"numeric\","                                                                    
[1089] "                             mixDistr = \"UnivarDistrList\","                                                                           
[1090] "                             gaps = \"OptionalMatrix\","                                                                                
[1091] "                             support = \"numeric\","                                                                                    
[1092] "                             Symmetry = \"DistributionSymmetry\","                                                                      
[1093] "                             .withArith = \"logical\","                                                                                 
[1094] "                             .withSim = \"logical\","                                                                                   
[1095] "                             .logExact = \"logical\","                                                                                  
[1096] "                             .lowerExact = \"logical\""                                                                                 
[1097] "                             ),"                                                                                                        
[1098] "            prototype = prototype(mixCoeff = 1, "                                                                                       
[1099] "                                  mixDistr = new(\"UnivarDistrList\"),"                                                                 
[1100] "                                  gaps = NULL,"                                                                                         
[1101] "                                  support = numeric(0),"                                                                                
[1102] "                                  Symmetry = new(\"NoSymmetry\"),"                                                                      
[1103] "                                 .withArith = FALSE,"                                                                                   
[1104] "                                 .withSim = FALSE,"                                                                                     
[1105] "                                 .logExact = TRUE,"                                                                                     
[1106] "                                 .lowerExact = TRUE"                                                                                    
[1107] "                                  ),"                                                                                                   
[1108] "            contains = \"UnivariateDistribution\","                                                                                     
[1109] "            validity = function(object){"                                                                                               
[1110] "                if(any(object@mixCoeff< -.Machine$double.eps) || "                                                                      
[1111] "                   sum(object@mixCoeff)>1+.Machine$double.eps)"                                                                         
[1112] "                   stop(\"mixing coefficients are no probabilities\")"                                                                  
[1113] "                return(TRUE)"                                                                                                           
[1114] "            })"                                                                                                                         
[1115] ""                                                                                                                                       
[1116] "setClass(\"UnivarLebDecDistribution\","                                                                                                 
[1117] "            representation = representation(mixCoeff = \"numeric\","                                                                    
[1118] "                             mixDistr = \"UnivarDistrList\"),"                                                                          
[1119] "            prototype = prototype(mixCoeff = c(\"acWeight\" = 1, "                                                                      
[1120] "                                               \"discreteWeight\" = 0),"                                                                
[1121] "                                  mixDistr = new(\"UnivarDistrList\","                                                                  
[1122] "                                              list(\"acPart\" = new(\"Norm\"),"                                                         
[1123] "                                                   \"discretePart\" = new(\"Dirac\")"                                                   
[1124] "                                                   )"                                                                                   
[1125] "                                  )),"                                                                                                  
[1126] "            contains = \"UnivarMixingDistribution\","                                                                                   
[1127] "            validity = function(object){"                                                                                               
[1128] "                if (length(object@mixCoeff)!=2)"                                                                                        
[1129] "                    stop(\"number of mixing components is not 2\")"                                                                     
[1130] "                if (!is(object@mixDistr[[1]], \"AbscontDistribution\"))"                                                                
[1131] "                    stop(\"first component must be absolutely continuous\")"                                                            
[1132] "                if (!is(object@mixDistr[[2]], \"DiscreteDistribution\"))"                                                               
[1133] "                    stop(\"second component must be discrete\")"                                                                        
[1134] "                return(TRUE)"                                                                                                           
[1135] "            })"                                                                                                                         
[1136] ""                                                                                                                                       
[1137] "setClass(\"AffLinUnivarLebDecDistribution\","                                                                                           
[1138] "          representation = representation(a = \"numeric\", b = \"numeric\","                                                            
[1139] "          X0 = \"UnivarLebDecDistribution\"),"                                                                                          
[1140] "          prototype = prototype(a = 1, b = 0, "                                                                                         
[1141] "                                X0 = new(\"UnivarLebDecDistribution\")),"                                                               
[1142] "          contains = \"UnivarLebDecDistribution\""                                                                                      
[1143] "          )"                                                                                                                            
[1144] ""                                                                                                                                       
[1145] "         "                                                                                                                              
[1146] "setClassUnion(\"UnivDistrListOrDistribution\","                                                                                         
[1147] "               c(\"UnivarDistrList\",\"UnivariateDistribution\"))"                                                                      
[1148] ""                                                                                                                                       
[1149] "setClass(\"CompoundDistribution\", representation=representation("                                                                      
[1150] "             NumbOfSummandsDistr = \"DiscreteDistribution\","                                                                           
[1151] "             SummandsDistr = \"UnivDistrListOrDistribution\"),"                                                                         
[1152] "          prototype=prototype(NumbOfSummandsDistr = new(\"Pois\"),"                                                                     
[1153] "              SummandsDistr=new(\"Norm\")),"                                                                                            
[1154] "          contains = \"UnivarMixingDistribution\""                                                                                      
[1155] "         )"                                                                                                                             
[1156] ""                                                                                                                                       
[1157] "################################"                                                                                                       
[1158] "##"                                                                                                                                     
[1159] "## virtual Distribution class Unions "                                                                                                  
[1160] "##"                                                                                                                                     
[1161] "################################"                                                                                                       
[1162] ""                                                                                                                                       
[1163] "setClassUnion(\"AcDcLcDistribution\", c(\"AbscontDistribution\","                                                                       
[1164] "               \"DiscreteDistribution\", \"UnivarLebDecDistribution\","                                                                 
[1165] "               \"CompoundDistribution\"))"                                                                                              
[1166] ""                                                                                                                                       
[1167] "setClassUnion(\"AffLinDistribution\", c(\"AffLinAbscontDistribution\","                                                                 
[1168] "               \"AffLinDiscreteDistribution\", \"AffLinUnivarLebDecDistribution\"))"                                                    
[1169] ""                                                                                                                                       
> 
> 
> 
> cleanEx()
> nameEx("setToBeDefinedPkgs")
> ### * setToBeDefinedPkgs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setToBeDefinedPkgs
> ### Title: setToBeDefinedPkgs
> ### Aliases: setToBeDefinedPkgs
> ### Keywords: utilities
> 
> ### ** Examples
> 
> setToBeDefinedPkgs(pkgs = c("distr","distrEx"),
+                    keywordstyles = paste("\\bfseries\\color{",c("blue","red"),"}",
+                          sep="", collapse=""))
> ### not to be used:
> print(SweaveListingUtils:::.tobeDefinedPkgs)
     [,1]      [,2]                                           
[1,] "distr"   "\\bfseries\\color{blue}\\bfseries\\color{red}"
[2,] "distrEx" "\\bfseries\\color{blue}\\bfseries\\color{red}"
> 
> 
> 
> cleanEx()
> nameEx("taglist")
> ### * taglist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taglist
> ### Title: S3 class taglist
> ### Aliases: print.taglist taglist
> ### Keywords: utilities
> 
> ### ** Examples
> 
>  TL <- taglist("HA"=8,"JUI"=7,"butzi", list=list("HU"="AHAL","HA"="BETA","BUZ"))
>  print(TL)

HU=AHAL,HA=BETA,V3=BUZ,HA=8,JUI=7,V6=butzi
>  print(TL, LineLength=10, first.print="myList=", offset.start=4,
+            withFinalLineBreak = FALSE)
myList=HU=AHAL,%
    HA=BETA,%
    V3=BUZ,%
    HA=8,%
    JUI=7,%
    V6=butzi>  
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.29 0.05 1.969 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
