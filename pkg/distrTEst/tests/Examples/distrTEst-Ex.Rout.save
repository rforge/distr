
R Under development (unstable) (2019-02-27 r76167) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "distrTEst"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('distrTEst')
Loading required package: setRNG
Loading required package: distrSim
Loading required package: distr
Loading required package: startupmsg
:startupmsg>  Utilities for Start-Up Messages (version 0.9.6)
:startupmsg> 
:startupmsg>  For more information see ?"startupmsg",
:startupmsg>  NEWS("startupmsg")

Loading required package: sfsmisc
:distr>  Object Oriented Implementation of Distributions (version
:distr>  2.8.0)
:distr> 
:distr>  Attention: Arithmetics on distribution objects are
:distr>  understood as operations on corresponding random variables
:distr>  (r.v.s); see distrARITH().
:distr> 
:distr>  Some functions from package 'stats' are intentionally masked
:distr>  ---see distrMASK().
:distr> 
:distr>  Note that global options are controlled by distroptions()
:distr>  ---c.f. ?"distroptions".
:distr> 
:distr>  For more information see ?"distr", NEWS("distr"), as well as
:distr>    http://distr.r-forge.r-project.org/
:distr>  Package "distrDoc" provides a vignette to this package as
:distr>  well as to several extension packages; try
:distr>  vignette("distr").


Attaching package: 'distr'

The following objects are masked from 'package:stats':

    df, qqplot, sd

:distrSim>  Simulation Classes Based on Package 'distr' (version
:distrSim>  2.8.0)
:distrSim> 
:distrSim>  Some functions from package 'stats' are intentionally
:distrSim>  masked ---see distrSimMASK().
:distrSim> 
:distrSim> 
:distrSim>  For more information see ?"distrSim",
:distrSim>  NEWS("distrSim"), as well as
:distrSim>    http://distr.r-forge.r-project.org/
:distrSim>  Package "distrDoc" provides a vignette to this package
:distrSim>  as well as to several related packages; try
:distrSim>  vignette("distr").


Attaching package: 'distrSim'

The following object is masked from 'package:stats':

    simulate

The following object is masked from 'package:base':

    rbind

:distrTEst>  Estimation and Testing Classes Based on Package
:distrTEst>  'distr' (version 2.8.0)
:distrTEst> 
:distrTEst>  For more information see ?"distrTEst",
:distrTEst>  NEWS("distrTEst"), as well as
:distrTEst>    http://distr.r-forge.r-project.org/
:distrTEst>  Package "distrDoc" provides a vignette to this
:distrTEst>  package as well as to several related packages; try
:distrTEst>  vignette("distr").

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Evaluation-class")
> ### * Evaluation-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Evaluation-class
> ### Title: Class "Evaluation"
> ### Aliases: Evaluation-class initialize,Evaluation-method
> ### Keywords: manip
> 
> ### ** Examples
> 
> N <- Norm() # N is a standard normal distribution.
> C <- Cauchy() # C is a Cauchy distribution
> cs <- Contsimulation(filename = "csim",
+                      runs = 5,
+                      samplesize=5000,
+                      seed=setRNG(),
+                      distribution.id = N,
+                      distribution.c = C,
+                      rate = 0.1)
> simulate(cs)
> # Each of the 25000 random numbers is ideal (N-distributed) with
> # probability 0.9 and contaminated (C-distributed) with probability = 0.1
> summary(cs)
name of simulation: csim
rate of contamination: 0.100000
real Data:
dimension of the observations: 1
number of runs: 5
size of sample: 5000
, , 1

                 [,1]
Min.    -4.633490e+02
1st Qu. -6.888459e-01
Median  -9.882021e-03
Mean    -5.080783e-02
3rd Qu.  7.173830e-01
Max.     1.133495e+02

, , 2

                [,1]
Min.    -70.35789202
1st Qu.  -0.69272191
Median   -0.01483657
Mean     -0.03786769
3rd Qu.   0.65772067
Max.     35.48851664

, , 3

                 [,1]
Min.    -197.97591572
1st Qu.   -0.72411517
Median    -0.05110836
Mean       0.41375812
3rd Qu.    0.67296223
Max.    1753.05267872

, , 4

                 [,1]
Min.    -3.247230e+02
1st Qu. -6.898012e-01
Median   5.873658e-04
Mean    -1.625241e-01
3rd Qu.  6.886116e-01
Max.     4.682074e+01

, , 5

                 [,1]
Min.    -339.09053967
1st Qu.   -0.65139327
Median     0.05992411
Mean      -0.01367076
3rd Qu.    0.69832753
Max.     131.54877669

> ev1 <- evaluate(cs, mean, resname="mean") # estimates the data with mean
> ev1 # bad results
An Evaluation Object
name of Dataobject: object
name of Datafile: csim
estimator: mean
Result: 'data.frame':	5 obs. of  2 variables:
 $ mean.id: num  -0.00319 -0.00989 -0.02207 0.01369 0.02614
 $ mean.re: num  -0.0508 -0.0379 0.4138 -0.1625 -0.0137
> ev2 <- evaluate(cs,median, resname="median") # estimates the data with median
> ev2 # better results because median is robust
An Evaluation Object
name of Dataobject: object
name of Datafile: csim
estimator: median
Result: 'data.frame':	5 obs. of  2 variables:
 $ medn.id: num  -0.01549 -0.01739 -0.04523 0.00723 0.05344
 $ medn.re: num  -0.009882 -0.014837 -0.051108 0.000587 0.059924
> savedata(ev1)
[1] "csim.mean"
[1] "ev1"
[1] "csim.mean.comment"
[1] "ev1.comment"
> # saves the evaluation with result as "csim.mean" and without result as
> # "csim.mean.comment" in the working directory # of R - "csim" is the
> # filename of the Contsimulation object, mean the name of the estimator
> rm(ev1)
> cload("csim.mean")
> # loads the evaluation without result - the object is called ev1.comment
> ev1.comment
An Evaluation Object
name of Dataobject: object
name of Datafile: csim
estimator: mean
> load("csim.mean") # loads the evaluation with result
> ev1
An Evaluation Object
name of Dataobject: object
name of Datafile: csim
estimator: mean
Result: 'data.frame':	5 obs. of  2 variables:
 $ mean.id: num  -0.00319 -0.00989 -0.02207 0.01369 0.02614
 $ mean.re: num  -0.0508 -0.0379 0.4138 -0.1625 -0.0137
> plot(ev1)
> #
> #another function to be evaluated:
> severalThings<- function(x) {list("mean"=mean(x),"sd"=sd(as.vector(x)), "mad"=mad(x))}
> ev3 <- evaluate(cs, severalThings, resname="several") 
> plot(ev3)
> plot(ev3, ylim=c(0,10), col=c("blue","green", "red"))
> 
> 
> 
> cleanEx()
> nameEx("EvaluationList-class")
> ### * EvaluationList-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EvaluationList-class
> ### Title: Class "EvaluationList"
> ### Aliases: Elist EvaluationList EvaluationList-class
> ###   initialize,EvaluationList-method savedata,EvaluationList-method
> ###   name,EvaluationList-method name<-,EvaluationList-method
> ###   Elist,EvaluationList-method
> ### Keywords: list manip
> 
> ### ** Examples
> 
> N <- Norm() # N is a standard normal distribution.
> C <- Cauchy() # C is a Cauchy distribution
> cs <- Contsimulation(filename = "csim",
+                      runs = 15,
+                      samplesize=500,
+                      seed=setRNG(),
+                      distribution.id = N,
+                      distribution.c = C,
+                      rate = 0.1)
> simulate(cs)
> # Each of the 25000 random numbers is ideal (N-distributed) with
> # probability 0.9 and contaminated (C-distributed) with probability = 0.1
> summary(cs)
name of simulation: csim
rate of contamination: 0.100000
real Data:
dimension of the observations: 1
number of runs: 15
size of sample: 500
, , 1

                [,1]
Min.    -7.832396604
1st Qu. -0.592890036
Median  -0.006141507
Mean     0.262077411
3rd Qu.  0.681857921
Max.    76.611044388

, , 2

                [,1]
Min.    -20.18009849
1st Qu.  -0.79008137
Median   -0.03902092
Mean      0.09945868
3rd Qu.   0.71340224
Max.     69.33805682

, , 3

                 [,1]
Min.    -107.59151840
1st Qu.   -0.71174775
Median    -0.07457291
Mean      -0.23255295
3rd Qu.    0.72736496
Max.       4.94752147

, , 4

                [,1]
Min.    -16.20236063
1st Qu.  -0.67083250
Median    0.02934018
Mean      0.17747436
3rd Qu.   0.76710888
Max.     52.53181907

, , 5

               [,1]
Min.    -4.05069578
1st Qu. -0.69020559
Median  -0.05907523
Mean     0.01636011
3rd Qu.  0.73177211
Max.    14.23080601

, , 6

               [,1]
Min.    -6.67851639
1st Qu. -0.60522688
Median  -0.01255796
Mean    -0.01040876
3rd Qu.  0.67909015
Max.     6.83257414

> ev1 <- evaluate(cs, mean) # estimates the data with mean
> ev1 # bad results
An Evaluation Object
name of Dataobject: object
name of Datafile: csim
estimator: mean
Result: 'data.frame':	15 obs. of  2 variables:
 $ mean.id: num  0.02264 -0.04594 -0.00299 -0.02954 0.0091 ...
 $ mean.re: num  0.2621 0.0995 -0.2326 0.1775 0.0164 ...
> ev2 <- evaluate(cs,median) # estimates the data with median
> ev2 # better results because median is robust
An Evaluation Object
name of Dataobject: object
name of Datafile: csim
estimator: median
Result: 'data.frame':	15 obs. of  2 variables:
 $ medn.id: num  -0.0368 -0.0213 -0.0536 -0.0189 -0.0482 ...
 $ medn.re: num  -0.00614 -0.03902 -0.07457 0.02934 -0.05908 ...
> savedata(ev1)
[1] "csim.mean"
[1] "ev1"
[1] "csim.mean.comment"
[1] "ev1.comment"
> # saves the EvaluationList with result as "csim.mean" and without result as
> # "csim.mean.comment" in the working directory # of R - "csim" is the
> # filename of the Contsimulation object, mean the name of the estimator
> rm(ev1)
> cload("csim.mean")
> # loads the EvaluationList without result - the object is called ev1.comment
> ev1.comment
An Evaluation Object
name of Dataobject: object
name of Datafile: csim
estimator: mean
> load("csim.mean") # loads the EvaluationList with result
> ev1
An Evaluation Object
name of Dataobject: object
name of Datafile: csim
estimator: mean
Result: 'data.frame':	15 obs. of  2 variables:
 $ mean.id: num  0.02264 -0.04594 -0.00299 -0.02954 0.0091 ...
 $ mean.re: num  0.2621 0.0995 -0.2326 0.1775 0.0164 ...
> ElistObj <- EvaluationList(ev1,ev2,name0="myEvalList")
> plot(ElistObj,ylim=matrix(c(-0.5,0.5,0.5,4),nrow=2),main=c("location","scale"))
> plot(ElistObj,ylim=c(-0.5,0.5),main=c("location"),runs0=3:12,dims0=1,evals0=2)
> ElistObj
An EvaluationList Object
name of Evaluation List: myEvalList
name of Dataobject: object
name of Datafile: csim
----------------------------------
An Evaluation Object
estimator: mean
Result: 'data.frame':	15 obs. of  2 variables:
 $ mean.id: num  0.02264 -0.04594 -0.00299 -0.02954 0.0091 ...
 $ mean.re: num  0.2621 0.0995 -0.2326 0.1775 0.0164 ...
----------------------------------
An Evaluation Object
estimator: median
Result: 'data.frame':	15 obs. of  2 variables:
 $ medn.id: num  -0.0368 -0.0213 -0.0536 -0.0189 -0.0482 ...
 $ medn.re: num  -0.00614 -0.03902 -0.07457 0.02934 -0.05908 ...
> summary(ElistObj)
name of Evaluation List: myEvalList
name of Dataobject: object
name of Datafile: csim
----------------------------------
name of Evaluation: object
estimator: mean
Result:
    mean.id             mean.re        
 Min.   :-0.056414   Min.   :-0.33898  
 1st Qu.:-0.031666   1st Qu.:-0.03277  
 Median :-0.006922   Median : 0.02029  
 Mean   :-0.006906   Mean   : 0.02481  
 3rd Qu.: 0.005326   3rd Qu.: 0.13042  
 Max.   : 0.089858   Max.   : 0.26208  
----------------------------------
name of Evaluation: object
estimator: median
Result:
    medn.id            medn.re        
 Min.   :-0.09221   Min.   :-0.13948  
 1st Qu.:-0.05020   1st Qu.:-0.03568  
 Median :-0.02996   Median :-0.02969  
 Mean   :-0.01646   Mean   :-0.01515  
 3rd Qu.: 0.01899   3rd Qu.: 0.02496  
 Max.   : 0.08584   Max.   : 0.07802  
> 
> 
> 
> cleanEx()
> nameEx("distrTEstoptions")
> ### * distrTEstoptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distrTEstoptions
> ### Title: functions to change the global variables of the package
> ###   'distrTEst'
> ### Aliases: distrTEstoptions getdistrTEstOption
> ###   MaxNumberofPlottedEvaluationDims MaxNumberofPlottedEvaluations
> ###   MaxNumberofSummarizedEvaluationDims MaxNumberofSummarizedEvaluations
> ### Keywords: misc
> 
> ### ** Examples
> 
> distrTEstoptions()
$MaxNumberofPlottedEvaluationDims
[1] 6

$MaxNumberofPlottedEvaluations
[1] 6

$MaxNumberofSummarizedEvaluations
[1] 15

$MaxNumberofPrintedEvaluations
[1] 15

> distrTEstoptions("MaxNumberofPlottedEvaluationDims")
$MaxNumberofPlottedEvaluationDims
[1] 6

> distrTEstoptions("MaxNumberofPlottedEvaluationDims" = 5)
> # or
> getdistrTEstOption("MaxNumberofPlottedEvaluationDims")
[1] 5
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  22.15 0.47 24.64 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
