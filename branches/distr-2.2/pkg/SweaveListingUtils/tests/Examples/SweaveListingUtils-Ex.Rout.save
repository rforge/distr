
R version 2.10.0 beta (2009-10-15 r50107)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx",
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+                outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            grid::pushViewport(grid::viewport(width=grid::unit(1, "npc") -
+                               grid::unit(1, "lines"), x=0, just="left"))
+            grid::grid.text(sprintf("help(\"%s\")", nameEx()),
+                            x=grid::unit(1, "npc") + grid::unit(0.5, "lines"),
+                            y=grid::unit(0.8, "npc"), rot=90,
+                            gp=grid::gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> ## at least one package changes these via ps.options(), so do this
> ## before loading the package.
> ## Use postscript as incomplete files may be viewable, unlike PDF.
> ## Choose a size that is close to on-screen devices, fix paper
> grDevices::ps.options(width = 7, height = 7, paper = "a4", reset = TRUE)
> grDevices::postscript("SweaveListingUtils-Ex.ps")
> 
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> options(warn = 1)
> library('SweaveListingUtils')
Loading required package: startupmsg
:startupmsg>  Utilities for start-up messages (version 0.7)
:startupmsg> 
:startupmsg>  For more information see ?"startupmsg",
:startupmsg>  NEWS("startupmsg")

:SweaveListingUtils>  Utilities for Sweave together with
:SweaveListingUtils>  TeX listings package (version 0.4)
:SweaveListingUtils> 
:SweaveListingUtils>  Some functions from package 'base'
:SweaveListingUtils>  are intentionally masked ---see
:SweaveListingUtils>  SweaveListingMASK().
:SweaveListingUtils> 
:SweaveListingUtils>  Note that global options are
:SweaveListingUtils>  controlled by
:SweaveListingUtils>  SweaveListingoptions() ---c.f.
:SweaveListingUtils>  ?"SweaveListingoptions".
:SweaveListingUtils> 
:SweaveListingUtils>  For more information see
:SweaveListingUtils>  ?"SweaveListingUtils",
:SweaveListingUtils>  NEWS("SweaveListingUtils")
:SweaveListingUtils>  There is a vignette to this
:SweaveListingUtils>  package; try
:SweaveListingUtils>  vignette("ExampleSweaveListingUtils").


Attaching package: 'SweaveListingUtils'


	The following object(s) are masked from package:base :

	 library,
	 require 

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("SweaveListingMASK")
> ### * SweaveListingMASK
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SweaveListingMASK
> ### Title: Masking of/by other functions in package "SweaveListingUtils"
> ### Aliases: SweaveListingMASK MASKING
> ### Keywords: programming documentation
> 
> ### ** Examples
> 
> SweaveListingMASK()
######################################################################
#  On masking of and by other functions in package "SweaveListingUtils"       
######################################################################

Attention:

*** intentional masking: ***

To be able to use the usual calls to 'library' resp. 'require'
but at the same time register the new symbols for "nice" printing
with TeX package 'listings' with the possibility to "tune" the
corresponding keywordstyle for both the package required/"library"-ed
and respective intermediate packages loaded/attached automatically,
we intentionally mask base functions 'library' and 'require' --- 
however all these functions may still be used in exactly the same 
way as before masking.

Still, for completely returning to the usual behaviour (i.e.; stop
issuing TeX code for registering new keywords) and unmasking 
the original versions of 'library' and 'require', at the end of 
your .Rnw file, you should include an Sweave chunk like

<<cleanup, echo=FALSE>>=
unloadNamespace("SweaveListingUtils")
@

*** non-intentional masking: ***

... nothing discovered so far ...
> 
> 
> 
> cleanEx(); nameEx("SweaveListingOptions")
> ### * SweaveListingOptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SweaveListingOptions
> ### Title: Function to change the global options of the package
> ###   `SweaveListingUtils'
> ### Aliases: SweaveListingOptions SweaveListingoptions
> ###   getSweaveListingOption Rset Rdset Rin Rout Rcode Rcolor Rbcolor
> ###   Routcolor RRecomdcolor Rcommentcolor pkg pkv Keywordstyle
> ###   Recomd.Keywordstyle interm.Keywordstyle intermediate overwrite
> ###   inSweave fromRForge base.url addRset addRdset fileCommand pkgCommand
> ### Keywords: misc utilities
> 
> ### ** Examples
> 
> SweaveListingOptions()
$Rset
$Rset$fancyvrb
[1] "true"

$Rset$escapechar
[1] "`"

$Rset$extendedchars
[1] "false"

$Rset$language
[1] "R"

$Rset$basicstyle
[1] "{\\color{Rcolor}\\small}"

$Rset$keywordstyle
[1] "{\\bf\\color{Rcolor}}"

$Rset$commentstyle
[1] "{\\color{Rcommentcolor}\\ttfamily\\itshape}"

$Rset$literate
[1] "{<-}{{$\\leftarrow$}}2{<<-}{{$\\twoheadleftarrow$}}2{~}{{$\\sim$}}1{<=}{{$\\leq$}}2{>=}{{$\\geq$}}2{^}{{$\\scriptstyle\\wedge$}}1"

$Rset$alsoother
[1] "{$}"

$Rset$alsoletter
[1] "{.<-}"

$Rset$otherkeywords
[1] "{!,!=,~,$,*,\\&,\\%/\\%,\\%*\\%,\\%\\%,<-,<<-,/}"

$Rset$escapeinside
[1] "{(*}{*)}"


$Rdset
$Rdset$fancyvrb
[1] "true"

$Rdset$language
[1] "Rd"

$Rdset$keywordstyle
[1] "{\\bf}"

$Rdset$basicstyle
[1] "{\\color{black}\\footnotesize}"

$Rdset$commentstyle
[1] "{\\ttfamily\\itshape}"

$Rdset$alsolanguage
[1] "R"


$Rin
$Rin$style
[1] "Rstyle"

$Rin$fancyvrb
[1] "true"

$Rin$basicstyle
[1] "\\color{Rcolor}\\small"


$Rout
$Rout$fancyvrb
[1] "false"

$Rout$basicstyle
[1] "\\color{Routcolor}\\small"


$Rcode
$Rcode$style
[1] "Rstyle"

$Rcode$fancyvrb
[1] "true"

$Rcode$fontshape
[1] "sl"

$Rcode$basicstyle
[1] "\\color{Rcolor}"


$Rcolor
[1] 0.0 0.5 0.5

$RRecomdcolor
[1] 0.0 0.6 0.4

$Rbcolor
[1] 0.0 0.6 0.6

$Routcolor
[1] 0.461 0.039 0.102

$Rcommentcolor
[1] 0.101 0.043 0.432

$pkv
[1] "2.1.4"

$pkg
[1] "distr"

$Keywordstyle
[1] "{\\bf}"

$Recomd.Keywordstyle
[1] "{\\bf\\color{RRecomdcolor}}"

$interm.Keywordstyle
[1] "{\\bf\\color{Rbcolor}}"

$overwrite
[1] FALSE

$intermediate
[1] TRUE

$inSweave
[1] FALSE

$fromRForge
[1] TRUE

$base.url
[1] "http://r-forge.r-project.org/plugins/scmsvn/viewcvs.php/*checkout*/pkg/"

$addRset
[1] TRUE

$addRdset
[1] TRUE

$addRinset
[1] TRUE

$addRoutset
[1] TRUE

$addRcodeset
[1] TRUE

$fileCommand
[1] "\\def\\file#1{{\\tt #1}}"

$pkgCommand
[1] "\\def\\pkg#1{{\\tt \"#1\"}}"

> SweaveListingOptions("Rout")
$Rout
$Rout$fancyvrb
[1] "false"

$Rout$basicstyle
[1] "\\color{Routcolor}\\small"


> SweaveListingOptions("Rout" = c(0,0,0))
> # or
> SweaveListingOptions(Rout = c(0,1,0))
> getSweaveListingOption("Rout")
[1] 0 1 0
> 
> 
> 
> cleanEx(); nameEx("SweaveListingPreparations")
> ### * SweaveListingPreparations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SweaveListingPreparations
> ### Title: SweaveListingPreparations
> ### Aliases: SweaveListingPreparations
> ### Keywords: utilities
> 
> ### ** Examples
> 
> SweaveListingPreparations()
%------------------------------------------------------------------------------%
%Preparations for Sweave and Listings
%------------------------------------------------------------------------------%
%
\RequirePackage{color}
\definecolor{Rcolor}{rgb}{0, 0.5, 0.5}
\definecolor{RRecomdcolor}{rgb}{0, 0.6, 0.4}
\definecolor{Rbcolor}{rgb}{0, 0.6, 0.6}
\definecolor{Routcolor}{rgb}{0.461, 0.039, 0.102}
\definecolor{Rcommentcolor}{rgb}{0.101, 0.043, 0.432}
%------------------------------------------------------------------------------%
\lstdefinelanguage{Rd}[common]{TeX}%
{moretexcs={acronym,alias,arguments,author,bold,cite,%
          code,command,concept,cr,deqn,describe,%
          description,details,dfn,doctype,dots,%
          dontrun,dontshow,donttest,dQuote,%
          email,emph,enc,encoding,enumerate,env,eqn,%
          examples,file,format,item,itemize,kbd,keyword,%
          ldots,link,linkS4class,method,name,note,%
          option,pkg,preformatted,R,Rdopts,Rdversion,%
          references,S3method,S4method,Sexpr,samp,section,%
          seealso,source,sp,special,%
          sQuote,strong,synopsis,tab,tabular,testonly,%
          title,url,usage,value,var,verb},
   sensitive=true,%
   morecomment=[l]\%% 2008/9 Peter Ruckdeschel
}[keywords,comments]%%
%------------------------------------------------------------------------------%

%----------------
\lstdefinestyle{RstyleO1}{fancyvrb=true,escapechar=`,extendedchars=false,%
                          language=R,%
                          basicstyle={\color{Rcolor}\small},%
                          keywordstyle={\bf\color{Rcolor}},%
                          commentstyle={\color{Rcommentcolor}\ttfamily\itshape},%
                          literate={<-}{{$\leftarrow$}}2{<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$\scriptstyle\wedge$}}1,%
                          alsoother={$},%
                          alsoletter={.<-},%
                          otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                          escapeinside={(*}{*)}}%
%----------------
\lstdefinestyle{Rstyle}{style=RstyleO1}

%----------------
\lstdefinestyle{Rdstyle}{fancyvrb=true,language=Rd,keywordstyle={\bf},%
                         basicstyle={\color{black}\footnotesize},%
                         commentstyle={\ttfamily\itshape},%
                         alsolanguage=R}%
%----------------
%------------------------------------------------------------------------------%
\global\def\Rlstset{\lstset{style=Rstyle}}%
\global\def\Rdlstset{\lstset{style=Rdstyle}}%
%------------------------------------------------------------------------------%
\global\def\Rinlstset{\lstset{style=Rinstyle}}%
\global\def\Routlstset{\lstset{style=Routstyle}}%
\global\def\Rcodelstset{\lstset{style=Rcodestyle}}%
%------------------------------------------------------------------------------%
\Rlstset
%------------------------------------------------------------------------------%
%copying relevant parts of Sweave.sty
%------------------------------------------------------------------------------%
%
\RequirePackage{graphicx,fancyvrb}%
\IfFileExists{upquote.sty}{\RequirePackage{upquote}}{}%

\RequirePackage{ifthen}%
\newboolean{Sweave@gin}%
\setboolean{Sweave@gin}{true}%
\setkeys{Gin}{width=0.8\textwidth}%
\newboolean{Sweave@ae}
\setboolean{Sweave@ae}{true}%
\RequirePackage[T1]{fontenc}
\RequirePackage{ae}
%
\newenvironment{Schunk}{}{}

\newcommand{\Sconcordance}[1]{% 
\ifx\pdfoutput\undefined% 
\csname newcount\endcsname\pdfoutput\fi% 
\ifcase\pdfoutput\special{#1}% 
\else\immediate\pdfobj{#1}\fi} 

%------------------------------------------------------------------------------%
% ---- end of parts of Sweave.sty
%------------------------------------------------------------------------------%
%
% ---- input 
\lstdefinestyle{RinstyleO}{style=Rstyle,fancyvrb=true,%
                           basicstyle=\color{Rcolor}\small}%
\lstdefinestyle{Rinstyle}{style=RinstyleO}
\lstnewenvironment{Sinput}{\Rinlstset}{\Rlstset}
%
% ---- output 
\lstdefinestyle{RoutstyleO}{
V1=0,V2=1,V3=0}%
\lstdefinestyle{Routstyle}{style=RoutstyleO}
\lstnewenvironment{Soutput}{\Routlstset}{\Rlstset}
%
% ---- code 
\lstdefinestyle{RcodestyleO}{style=Rstyle,fancyvrb=true,fontshape=sl,%
                             basicstyle=\color{Rcolor}}%
\lstdefinestyle{Rcodestyle}{style=RcodestyleO}
\lstnewenvironment{Scode}{\Rcodelstset}{\Rlstset}
%
%------------------------------------------------------------------------------%
\let\code\lstinline
\def\Code#1{{\tt\color{Rcolor} #1}}
\def\file#1{{\tt #1}} 
\def\pkg#1{{\tt "#1"}} 
\newcommand{\pkgversion}{{\tt 2.2}}
%------------------------------------------------------------------------------%
Warning in kws[idxRec] <- rep(getSweaveListingOption("Recomd.Keywordstyle"),  :
  number of items to replace is not a multiple of replacement length

\lstdefinestyle{RstyleO2}{style=RstyleO1,%
% --------------------------
% Registration of package SweaveListingUtils
% --------------------------
morekeywords={[2]taglist,SweaveListingPreparations,SweaveListingOptions,SweaveListingoptions,SweaveListingMASK,%
setToBeDefinedPkgs,setBaseOrRecommended,readSourceFromRForge,readPkgVersion,lstsetRout,%
lstsetRin,lstsetRd,lstsetRcode,lstsetRall,lstsetR,%
lstsetLanguage,lstset,lstinputSourceFromRForge,lstdefRstyle,isBaseOrRecommended,%
getSweaveListingOption,copySourceFromRForge,changeKeywordstyles%
},%
keywordstyle={[2]{\bf}},%
%
% --------------------------
% Registration of package startupmsg
% --------------------------
morekeywords={[3]TOBEDONE,suppressStartupMessages,startupType,startupPackage,StartupMessage,%
startupMessage,startupEndline,readVersionInformation,readURLInformation,pointertoNEWS,%
onlytypeStartupMessages,NEWS,mystartupMessage,mySMHandler,infoShow,%
buildStartupMessage%
},%
keywordstyle={[3]{\bf}},%
%
% --------------------------
% Registration of package stats [recommended or base] 
% --------------------------
morekeywords={[4]xtabs,write.ftable,window<-,wilcox.test,weighted.residuals,%
weighted.mean,vcov,var.test,varimax,variable.names,%
update.formula,update.default,TukeyHSD.aov,TukeyHSD,t.test,%
ts.union,tsSmooth,ts.plot,tsp<-,ts.intersect,%
tsdiag,toeplitz,terms.terms,terms.formula,terms.default,%
terms.aovlist,termplot,supsmu,summary.stepfun,summary.mlm,%
summary.manova,summary.lm,summary.infl,summary.glm,summary.aovlist,%
summary.aov,StructTS,stl,stepfun,stat.anova,%
SSweibull,SSmicmen,SSlogis,SSgompertz,SSfpl,%
SSfol,SSD,SSbiexp,SSasympOrig,SSasympOff,%
SSasymp,splinefunH,spectrum,spec.taper,spec.pgram,%
spec.ar,sortedXyData,smooth.spline,smoothEnds,smooth,%
simulate,shapiro.test,setNames,selfStart,se.contrast,%
screeplot,scatter.smooth,runmed,rstudent.lm,rstudent.glm,%
rstandard.lm,rstandard.glm,rmultinom,residuals.lm,residuals.glm,%
residuals.default,reshapeWide,reshapeLong,reshape,reorder,%
rect.hclust,read.ftable,r2dtable,quasipoisson,quasibinomial,%
quantile.default,quade.test,qqnorm.default,qbirthday,prop.trend.test,%
prop.test,promax,print.ts,print.terms,print.logLik,%
print.lm,print.integrate,print.infl,print.glm,print.ftable,%
print.formula,print.family,print.density,printCoefmat,print.coefmat,%
print.anova,princomp,predict.poly,predict.mlm,predict.lm,%
predict.glm,prcomp,PP.test,ppr,power.t.test,%
power.prop.test,power.anova.test,polym,poisson.test,plot.TukeyHSD,%
plot.ts,plot.stepfun,plot.spec.phase,plot.spec.coherency,plot.spec,%
plot.mlm,plot.lm,plot.ecdf,plot.density,plclust,%
pbirthday,pairwise.wilcox.test,pairwise.t.test,pairwise.table,pairwise.prop.test,%
p.adjust.methods,p.adjust,pacf,order.dendrogram,oneway.test,%
numericDeriv,NLSstRtAsymptote,NLSstLfAsymptote,NLSstClosestX,NLSstAsymptotic,%
nls.control,nls,nlminb,naresid,naprint,%
napredict,na.pass,na.omit,na.fail,na.exclude,%
na.contiguous,na.action,mood.test,monthplot,model.weights,%
model.tables,model.response,model.offset,model.matrix.lm,model.matrix.default,%
model.matrix,model.frame.lm,model.frame.glm,model.frame.default,model.frame.aovlist,%
model.frame,model.extract,medpolish,median.default,mcnemar.test,%
mauchly.test,mauchley.test,mantelhaen.test,manova,makepredictcall,%
make.link,makeARIMA,ls.print,ls.diag,logLik,%
loess.smooth,loess.control,loess,loadings,lm.wfit.null,%
lm.wfit,lm.influence,lm.fit.null,lm.fit,lines.ts,%
line,lag.plot,lag,ks.test,ksmooth,%
kruskal.test,knots,kmeans,kernel,kernapply,%
KalmanSmooth,KalmanRun,KalmanLike,KalmanForecast,is.tskernel,%
is.ts,is.stepfun,isoreg,is.mts,is.leaf,%
is.empty.model,inverse.gaussian,interaction.plot,integrate,influence.measures,%
HoltWinters,heatmap,hclust,hatvalues.lm,hatvalues,%
glm.fit.null,glm.fit,glm.control,getInitial,get_all_vars,%
friedman.test,fligner.test,fitted.values,fisher.test,filter,%
factor.scope,factanal,expand.model.frame,estVar,embed,%
eff.aovlist,ecdf,dummy.coef,drop.terms,drop.scope,%
dmultinom,dist,diff.ts,diffinv,df.residual,%
df.kernel,dfbeta,deriv.formula,deriv.default,deriv3.formula,%
deriv3.default,deriv3,density.default,dendrapply,delete.response,%
decompose,cutree,cpgram,cov.wt,cov2cor,%
cor.test,cophenetic,cooks.distance,contr.treatment,contr.sum,%
contr.SAS,contr.poly,contr.helmert,contrasts<-,constrOptim,%
confint.default,confint,complete.cases,cmdscale,clearNames,%
chisq.test,ccf,case.names,cancor,bw.ucv,%
bw.SJ,bw.nrd0,bw.nrd,bw.bcv,Box.test,%
biplot,binom.test,bartlett.test,bandwidth.kernel,as.ts,%
as.stepfun,asOneSidedFormula,as.hclust,as.formula,as.dist,%
as.dendrogram,ar.yw,ar.ols,ar.mle,ARMAtoMA,%
ARMAacf,arima.sim,arima0.diag,arima0,arima,%
ar.burg,ar,ansari.test,anova.mlm,anova.lmlist,%
anova.lm,anovalist.lm,anova.glmlist,anova.glm,AIC,%
aggregate.ts,aggregate.default,aggregate.data.frame,add.scope,addmargins,%
acf2AR,acf%
},%
keywordstyle={[4]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package graphics [recommended or base] 
% --------------------------
morekeywords={[5]xspline,text.default,stripchart,strheight,split.screen,%
spineplot,smoothScatter,points.default,plot.xy,plot.window,%
plot.new,plot.design,plot.default,pie,panel.smooth,%
pairs.default,lines.default,layout.show,image.default,hist.default,%
grconvertY,grconvertX,fourfoldplot,filled.contour,erase.screen,%
dotchart,contour.default,co.intervals,close.screen,clip,%
cdplot,boxplot.matrix,boxplot.default,barplot.default,axTicks,%
axis.POSIXct,axis.Date,Axis,assocplot%
},%
keywordstyle={[5]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package grDevices [recommended or base] 
% --------------------------
morekeywords={[6]xyz.coords,xyTable,xy.coords,xfig,X11.options,%
X11Fonts,X11Font,Type1Font,trans3d,topo.colors,%
tiff,terrain.colors,svg,setPS,setEPS,%
savePlot,rgb2hsv,replayPlot,recordPlot,recordGraphics,%
quartz.options,quartzFonts,quartzFont,quartz,ps.options,%
postscriptFonts,postscriptFont,png,pdf.options,pdfFonts,%
pdf,nclass.Sturges,nclass.scott,nclass.FD,n2mfrow,%
make.rgb,jpeg,Hershey,heat.colors,hcl,%
grey.colors,gray.colors,graphics.off,getGraphicsEvent,extendrange,%
embedFonts,dev.size,dev.set,dev.print,dev.prev,%
dev.off,dev.next,dev.new,dev.list,dev.interactive,%
deviceIsInteractive,dev.cur,dev.copy2pdf,dev.copy2eps,dev.copy,%
dev.control,devAskNewPage,densCols,convertColor,contourLines,%
colorspaces,colorRampPalette,colorRamp,colorConverter,col2rgb,%
cm.colors,CIDFont,check.options,cairo_ps,cairo_pdf,%
boxplot.stats,bmp,blues9,bitmap,as.graphicsAnnot%
},%
keywordstyle={[6]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package utils [recommended or base] 
% --------------------------
morekeywords={[7]zip.file.extract,wsbrowser,write.table,write.socket,write.csv2,%
write.csv,vignette,View,url.show,URLencode,%
URLdecode,upgrade,update.packageStatus,update.packages,unzip,%
untar,unstack,type.convert,txtProgressBar,toLatex,%
toBibtex,timestamp,tar,tail.matrix,tail,%
SweaveSyntConv,SweaveSyntaxNoweb,SweaveSyntaxLatex,SweaveHooks,Sweave,%
summaryRprof,strOptions,str,Stangle,stack,%
setTxtProgressBar,setRepositories,setBreakpoint,sessionInfo,select.list,%
savehistory,RweaveTryStop,RweaveLatexWritedoc,RweaveLatexSetup,RweaveLatexOptions,%
RweaveLatexFinish,RweaveLatex,RweaveEvalWithOpt,RweaveChunkPrefix,RtangleWritedoc,%
RtangleSetup,Rtangle,rtags,RSiteSearch,RShowDoc,%
Rprofmem,Rprof,remove.packages,relist,recover,%
read.table,read.socket,read.fwf,read.fortran,read.DIF,%
read.delim2,read.delim,read.csv2,read.csv,readCitationFile,%
rc.status,rc.settings,rc.options,rc.getOption,promptPackage,%
promptData,personList,person,packageStatus,package.skeleton,%
packageDescription,package.contents,old.packages,object.size,nsl,%
normalizePath,news,new.packages,modifyList,mirror2html,%
memory.size,memory.limit,make.socket,makeRweaveLatexCodeRunner,make.packages.html,%
ls.str,lsf.str,localeToCharset,loadhistory,limitedLabels,%
is.relistable,install.packages,installed.packages,index.search,history,%
help.start,help.search,help.request,head.matrix,head,%
glob2rx,getTxtProgressBar,getS3method,getFromNamespace,getCRANmirrors,%
getAnywhere,formatUL,formatOL,flush.console,fixInNamespace,%
findLineNum,file_test,file.edit,dump.frames,download.packages,%
download.file,de.setup,de.restore,de.ncols,data.entry,%
CRAN.packages,count.fields,contrib.url,compareVersion,combn,%
close.socket,citHeader,citFooter,citEntry,citation,%
chooseCRANmirror,checkCRAN,capture.output,bug.report,browseVignettes,%
browseURL,browseEnv,available.packages,assignInNamespace,as.roman,%
as.relistable,as.personList,as.person,aspell,argsAnywhere,%
alarm%
},%
keywordstyle={[7]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package datasets [recommended or base] 
% --------------------------
morekeywords={[8]WWWusage,WorldPhones,women,warpbreaks,volcano,%
VADeaths,uspop,USPersonalExpenditure,USJudgeRatings,USArrests,%
USAccDeaths,UKgas,UKDriverDeaths,UCBAdmissions,trees,%
treering,ToothGrowth,Titanic,Theoph,swiss,%
sunspot.year,sunspots,sunspot.month,state.x77,state.region,%
state.name,state.division,state.center,state.area,state.abb,%
stack.x,stackloss,stack.loss,sleep,Seatbelts,%
rock,rivers,randu,quakes,Puromycin,%
pressure,presidents,precip,PlantGrowth,OrchardSprays,%
Orange,occupationalStatus,nottem,Nile,nhtemp,%
mtcars,morley,mdeaths,lynx,longley,%
Loblolly,LifeCycleSavings,lh,ldeaths,LakeHuron,%
JohnsonJohnson,islands,iris3,iris,InsectSprays,%
infert,Indometh,Harman74.cor,Harman23.cor,HairEyeColor,%
freeny.y,freeny.x,freeny,Formaldehyde,fdeaths,%
faithful,EuStockMarkets,eurodist,euro.cross,euro,%
esoph,DNase,discoveries,crimtab,CO2,%
co2,chickwts,ChickWeight,cars,BOD,%
BJsales.lead,BJsales,beaver2,beaver1,austres,%
attitude,attenu,anscombe,airquality,AirPassengers,%
airmiles,ability.cov%
},%
keywordstyle={[8]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package methods [recommended or base] 
% --------------------------
morekeywords={[9]validSlotNames,validObject,unRematchDefinition,trySilent,tryNew,%
traceOn,traceOff,testVirtual,testInheritedMethods,superClassDepth,%
Summary,substituteFunctionArgs,substituteDirect,slotsFromS3,slotNames,%
slot<-,slot,sigToEnv,SignatureMethod,signature,%
showMlist,showMethods,showExtends,showDefault,showClass,%
setValidity,setReplaceMethod,setPrimitiveMethods,setPackageName,setOldClass,%
setMethod,setIs,setGroupGeneric,setGenericImplicit,setGeneric,%
setDataPart,setClassUnion,setClass,setAs,sessionData,%
selectSuperClasses,selectMethod,seemsS4Object,sealClass,S3Part<-,%
S3Part,S3Class<-,S3Class,resetGeneric,resetClass,%
requireMethods,representation,removeMethodsObject,removeMethods,removeMethod,%
removeGeneric,removeClass,rematchDefinition,registerImplicitGenerics,reconcilePropertiesAndPrototype,%
rbind2,Quote,prototype,promptMethods,promptClass,%
prohibitGeneric,possibleExtends,packageSlot<-,packageSlot,newEmptyObject,%
newClassRepresentation,newBasic,mlistMetaName,missingArg,methodsPackageMetaName,%
MethodsListSelect,MethodsList,method.skeleton,methodSignatureMatrix,MethodAddCoerce,%
metaNameUndo,mergeMethods,Math2,matchSignature,makeStandardGeneric,%
makePrototypeFromClassDef,makeMethodsList,makeGeneric,makeExtends,makeClassRepresentation,%
Logic,loadMethod,listFromMlist,listFromMethods,linearizeMlist,%
languageEl<-,languageEl,isXS3Class,isVirtualClass,isSealedMethod,%
isSealedClass,isGroup,isGrammarSymbol,isGeneric,isClassUnion,%
isClassDef,isClass,insertMethod,initialize,inheritedSlotNames,%
implicitGeneric,hasMethods,hasMethod,hasArg,getVirtual,%
getValidity,getSubclasses,getSlots,getPrototype,getProperties,%
getPackageName,getMethodsMetaData,getMethodsForDispatch,getMethods,getMethod,%
getGroupMembers,getGroup,getGenerics,getGeneric,getFunction,%
getExtends,getDataPart,getClassPackage,getClassName,getClasses,%
getClassDef,getClass,getAllSuperClasses,getAllMethods,getAccess,%
generic.skeleton,functionBody<-,functionBody,formalArgs,fixPre1.8,%
findUnique,findMethodSignatures,findMethods,findMethod,findFunction,%
findClass,finalDefaultMethod,extends,existsMethod,existsFunction,%
emptyMethodsList,empty.dump,elNamed<-,elNamed,el<-,%
el,dumpMethods,dumpMethod,doPrimitiveMethod,defaultPrototype,%
defaultDumpName,conformMethod,Complex,completeSubclasses,completeExtends,%
completeClassDefinition,Compare,coerce<-,coerce,classMetaName,%
classesToAM,checkSlotAssignment,cbind2,canCoerce,callNextMethod,%
callGeneric,cacheMethod,cacheMetaData,cacheGenericsMetaData,body<-,%
balanceMethodsList,assignMethodsMetaData,assignClassDef,asMethodDefinition,as<-,%
Arith,allNames,allGenerics,addNextMethod%
},%
keywordstyle={[9]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package base [recommended or base] 
% --------------------------
morekeywords={[10]xzfile,xtfrm.Surv,xtfrm.POSIXlt,xtfrm.POSIXct,xtfrm.numeric_version,%
xtfrm.factor,xtfrm.default,xtfrm.Date,xtfrm,xpdrows.data.frame,%
write.table0,writeLines,write.dcf,writeChar,writeBin,%
withVisible,withRestarts,within.list,within.data.frame,within,%
with.default,withCallingHandlers,with,which.min,which.max,%
weekdays.POSIXt,weekdays.Date,weekdays,version,Vectorize,%
utf8ToInt,upper.tri,unz,untracemem,unsplit,%
unserialize,unlockBinding,unloadNamespace,unix.time,units.difftime,%
units<-.difftime,units<-,units,unique.POSIXlt,unique.numeric_version,%
unique.matrix,unique.default,unique.data.frame,unique.array,tryCatch,%
trunc.POSIXt,trunc.Date,truncate.connection,truncate,transform.default,%
transform.data.frame,tracingState,tracemem,toupper,toString.default,%
toString,topenv,tolower,textConnectionValue,textConnection,%
testPlatformEquivalence,tempdir,t.default,t.data.frame,tcrossprod,%
taskCallbackManager,T,Sys.which,Sys.unsetenv,Sys.umask,%
Sys.timezone,Sys.time,system.time,system.file,sys.status,%
sys.source,Sys.sleep,Sys.setlocale,Sys.setenv,sys.save.image,%
Sys.readlink,Sys.putenv,sys.parents,sys.parent,sys.on.exit,%
sys.nframe,Sys.localeconv,sys.load.image,Sys.info,Sys.glob,%
Sys.getpid,Sys.getlocale,Sys.getenv,sys.function,sys.frames,%
sys.frame,Sys.Date,Sys.chmod,sys.calls,sys.call,%
symbol.For,symbol.C,suppressWarnings,suppressPackageStartupMessages,suppressMessages,%
summary.table,Summary.POSIXlt,summary.POSIXlt,Summary.POSIXct,summary.POSIXct,%
Summary.numeric_version,summary.matrix,Summary.factor,summary.factor,Summary.difftime,%
summary.default,Summary.Date,summary.Date,Summary.data.frame,summary.data.frame,%
summary.connection,substring<-,substr<-,subset.matrix,subset.default,%
subset.data.frame,strwrap,strtrim,strptime,strftime,%
storage.mode<-,storage.mode,stopifnot,stdout,stdin,%
stderr,standardGeneric,srcref,srcfilecopy,srcfile,%
sQuote,sprintf,split.POSIXct,split.default,split<-.default,%
split.Date,split.data.frame,split<-.data.frame,split<-,source.url,%
sort.POSIXlt,sort.list,sort.int,sort.default,solve.qr,%
solve.default,socketSelect,socketConnection,slice.index,sink.number,%
simpleWarning,simpleMessage,simpleError,simpleCondition,signalCondition,%
shQuote,showConnections,setTimeLimit,setSessionTimeLimit,set.seed,%
setNamespaceInfo,setHook,setCConverterStatus,serialize,seq.POSIXt,%
seq_len,seq.int,seq.default,seq.Date,seq_along,%
seek.connection,seek,scan.url,scale.default,saveNamespaceImage,%
save.image,sample.int,R.version.string,R.Version,R.version,%
R_system_version,rowSums,rowsum.default,rowsum.data.frame,row.names.default,%
row.names<-.default,row.names.data.frame,row.names<-.data.frame,rownames<-,row.names<-,%
row.names,rowMeans,round.POSIXt,round.Date,RNGversion,%
R.home,rev.default,retracemem,restartFormals,restartDescription,%
rep.POSIXlt,rep.POSIXct,rep.numeric_version,replicate,rep.int,%
rep.factor,rep.Date,removeTaskCallback,removeCConverter,registerS3methods,%
registerS3method,reg.finalizer,Reduce,read.table.url,readLines,%
read.dcf,readChar,readBin,rcond,rbind.data.frame,%
rawToChar,rawToBits,rawShift,rawConnectionValue,rawConnection,%
raw,rapply,range.default,quarters.POSIXt,quarters.Date,%
quarters,qr.X,qr.solve,qr.resid,qr.R,%
qr.qy,qr.qty,qr.Q,qr.fitted,qr.default,%
qr.coef,pushBackLength,pushBack,psigamma,prop.table,%
proc.time,print.warnings,print.table,print.summary.table,print.srcref,%
print.srcfile,print.simple.list,print.rle,print.restart,print.proc_time,%
print.POSIXlt,print.POSIXct,print.packageInfo,print.octmode,print.numeric_version,%
print.noquote,printNoClass,print.NativeRoutineList,print.listof,print.libraryIQR,%
print.hexmode,print.function,print.factor,print.DLLRegisteredRoutines,print.DLLInfoList,%
print.DLLInfo,print.difftime,print.default,print.Date,print.data.frame,%
print.connection,print.condition,print.by,print.AsIs,prettyNum,%
pos.to.env,Position,pmin.int,pmax.int,pipe,%
pi,path.expand,parseNamespaceFile,parse.dcf,parent.frame,%
parent.env<-,parent.env,packBits,package_version,packageStartupMessage,%
packageHasNamespace,packageEvent,package.description,Ops.POSIXt,Ops.ordered,%
Ops.numeric_version,Ops.factor,Ops.difftime,Ops.Date,Ops.data.frame,%
open.srcfilecopy,open.srcfile,open.connection,open,on.exit,%
oldClass<-,oldClass,nzchar,numeric_version,ngettext,%
new.env,Negate,namespaceImportMethods,namespaceImportFrom,namespaceImportClasses,%
namespaceImport,namespaceExport,names<-,mostattributes<-,months.POSIXt,%
months.Date,months,month.name,month.abb,mode<-,%
mget,message,merge.default,merge.data.frame,memory.profile,%
mem.limits,memDecompress,memCompress,mean.POSIXlt,mean.POSIXct,%
mean.difftime,mean.default,mean.Date,mean.data.frame,max.col,%
mat.or.vec,Math.POSIXt,Math.factor,Math.difftime,Math.Date,%
Math.data.frame,match.fun,match.call,match.arg,margin.table,%
mapply,Map,manglePackageName,make.unique,make.names,%
makeActiveBinding,lower.tri,logb,lockEnvironment,lockBinding,%
loadURL,loadNamespace,loadingNamespaceInfo,loadedNamespaces,list.files,%
library.dynam.unload,library.dynam,lfactorial,levels<-.factor,levels.default,%
levels<-,LETTERS,letters,length<-.factor,length<-,%
lazyLoadDBfetch,lazyLoad,La.svd,La.eigen,La.chol2inv,%
La.chol,labels.default,l10n_info,kappa.tri,kappa.qr,%
kappa.lm,kappa.default,julian.POSIXt,julian.Date,julian,%
is.vector,is.unsorted,isTRUE,is.table,isSymmetric.matrix,%
isSymmetric,is.symbol,is.single,isSeekable,isS4,%
isRestart,is.recursive,is.real,is.raw,is.R,%
is.qr,is.primitive,is.pairlist,is.package_version,is.ordered,%
isOpen,ISOdatetime,ISOdate,is.object,is.numeric_version,%
is.numeric.POSIXt,is.numeric.Date,is.numeric,is.null,is.na.POSIXlt,%
is.na.numeric_version,is.nan,isNamespace,is.name,is.na<-.factor,%
is.na<-.default,is.na.data.frame,is.na<-,is.na,is.matrix,%
is.logical,is.loaded,is.list,is.language,is.integer,%
is.infinite,isIncomplete,is.function,is.finite,is.factor,%
is.expression,is.environment,is.element,is.double,isdebugged,%
is.data.frame,is.complex,is.character,is.call,isBaseNamespace,%
is.atomic,is.array,invokeRestartInteractively,invokeRestart,inverse.rle,%
intToUtf8,intToBits,importIntoEnv,identity,identical,%
icuSetCollate,iconvlist,iconv,gzfile,gzcon,%
grepl,gregexpr,gettextf,gettext,getTaskCallbackNames,%
getSrcLines,getRversion,getNumCConverters,getNativeSymbolInfo,getNamespaceVersion,%
getNamespaceUsers,getNamespaceName,getNamespaceInfo,getNamespaceImports,getNamespaceExports,%
getNamespace,getLoadedDLLs,getHook,getExportedValue,getDLLRegisteredRoutines.DLLInfo,%
getDLLRegisteredRoutines.character,getDLLRegisteredRoutines,getConnection,getCConverterStatus,getCConverterDescriptions,%
getCallingDLLe,getCallingDLL,getAllConnections,gc.time,format.pval,%
format.POSIXlt,format.POSIXct,format.octmode,format.info,format.hexmode,%
format.factor,formatDL,format.difftime,format.default,format.Date,%
format.data.frame,format.char,format.AsIs,formals<-,force,%
flush.connection,flush,findRestart,findPackageEnv,findInterval,%
Find,Filter,file.symlink,file.show,file.rename,%
file.remove,file.path,file.info,file.exists,file.create,%
file.copy,file.choose,file.append,file.access,fifo,%
factorial,F,expm1,expand.grid,eval.parent,%
env.profile,environmentName,environmentIsLocked,environment<-,Encoding<-,%
Encoding,encodeString,emptyenv,eapply,dyn.unload,%
dyn.load,duplicated.POSIXlt,duplicated.numeric_version,duplicated.matrix,duplicated.default,%
duplicated.data.frame,duplicated.array,dQuote,do.call,dir.create,%
dimnames.data.frame,dimnames<-.data.frame,dimnames<-,dim.data.frame,dim<-,%
difftime,diff.POSIXt,diff.default,diff.Date,diag<-,%
determinant.matrix,determinant,det,delayedAssign,default.stringsAsFactors,%
debugonce,data.matrix,data.frame,data.class,cut.POSIXt,%
cut.default,cut.Date,Cstack_info,c.POSIXlt,c.POSIXct,%
contributors,conditionMessage.condition,conditionMessage,conditionCall.condition,conditionCall,%
computeRestarts,comment<-,colSums,colnames<-,colMeans,%
codes.ordered,codes.factor,codes<-,c.numeric_version,c.noquote,%
close.srcfile,close.connection,closeAllConnections,class<-,chol.default,%
check_tzones,chartr,charToRaw,char.expand,c.Date,%
cbind.data.frame,casefold,capabilities,callCC,bzfile,%
by.default,by.data.frame,browserText,browserSetDebug,browserCondition,%
bquote,body<-,bindtextdomain,bindingIsLocked,bindingIsActive,%
baseenv,attributes<-,attr.all.equal,attr<-,attachNamespace,%
as.vector.factor,as.vector,as.table.default,as.table,as.symbol,%
as.single.default,as.single,assign,asS4,as.real,%
as.raw,as.qr,as.POSIXlt.POSIXct,as.POSIXlt.numeric,as.POSIXlt.factor,%
as.POSIXlt.default,as.POSIXlt.dates,as.POSIXlt.Date,as.POSIXlt.date,as.POSIXlt.character,%
as.POSIXlt,as.POSIXct.POSIXlt,as.POSIXct.numeric,as.POSIXct.default,as.POSIXct.dates,%
as.POSIXct.Date,as.POSIXct.date,as.POSIXct,as.pairlist,as.package_version,%
as.ordered,as.octmode,as.numeric_version,as.numeric,as.null.default,%
as.null,asNamespace,as.name,as.matrix.POSIXlt,as.matrix.noquote,%
as.matrix.default,as.matrix.data.frame,as.matrix,as.logical,as.list.numeric_version,%
as.list.function,as.list.factor,as.list.environment,as.list.default,as.list.data.frame,%
as.list,as.integer,as.hexmode,as.function.default,as.function,%
as.factor,as.expression.default,as.expression,as.environment,as.double.POSIXlt,%
as.double.difftime,as.double,as.difftime,as.Date.POSIXlt,as.Date.POSIXct,%
as.Date.numeric,as.Date.factor,as.Date.default,as.Date.dates,as.Date.date,%
as.Date.character,as.Date,as.data.frame.vector,as.data.frame.ts,as.data.frame.table,%
as.data.frame.raw,as.data.frame.POSIXlt,as.data.frame.POSIXct,as.data.frame.ordered,as.data.frame.numeric_version,%
as.data.frame.numeric,as.data.frame.model.matrix,as.data.frame.matrix,as.data.frame.logical,as.data.frame.list,%
as.data.frame.integer,as.data.frame.factor,as.data.frame.difftime,as.data.frame.default,as.data.frame.Date,%
as.data.frame.data.frame,as.data.frame.complex,as.data.frame.character,as.data.frame.AsIs,as.data.frame.array,%
as.data.frame,as.complex,as.character.srcref,as.character.POSIXt,as.character.octmode,%
as.character.numeric_version,as.character.hexmode,as.character.factor,as.character.error,as.character.default,%
as.character.Date,as.character.condition,as.character,as.call,as.array.default,%
as.array,anyDuplicated.matrix,anyDuplicated.default,anyDuplicated.data.frame,anyDuplicated.array,%
anyDuplicated,all.vars,all.names,all.equal.raw,all.equal.POSIXct,%
all.equal.numeric,all.equal.list,all.equal.language,all.equal.formula,all.equal.factor,%
all.equal.default,all.equal.character,all.equal,agrep,addTaskCallback,%
addNA%
},%
keywordstyle={[10]{\bf\color{RRecomdcolor}}}%
%
}%
\lstdefinestyle{Rstyle}{style=RstyleO2}

%------------------------------------------------------------------------------%
%
%

> SweaveListingPreparations(pkv="2.1")
%------------------------------------------------------------------------------%
%Preparations for Sweave and Listings
%------------------------------------------------------------------------------%
%
\RequirePackage{color}
\definecolor{Rcolor}{rgb}{0, 0.5, 0.5}
\definecolor{RRecomdcolor}{rgb}{0, 0.6, 0.4}
\definecolor{Rbcolor}{rgb}{0, 0.6, 0.6}
\definecolor{Routcolor}{rgb}{0.461, 0.039, 0.102}
\definecolor{Rcommentcolor}{rgb}{0.101, 0.043, 0.432}
%------------------------------------------------------------------------------%
\lstdefinelanguage{Rd}[common]{TeX}%
{moretexcs={acronym,alias,arguments,author,bold,cite,%
          code,command,concept,cr,deqn,describe,%
          description,details,dfn,doctype,dots,%
          dontrun,dontshow,donttest,dQuote,%
          email,emph,enc,encoding,enumerate,env,eqn,%
          examples,file,format,item,itemize,kbd,keyword,%
          ldots,link,linkS4class,method,name,note,%
          option,pkg,preformatted,R,Rdopts,Rdversion,%
          references,S3method,S4method,Sexpr,samp,section,%
          seealso,source,sp,special,%
          sQuote,strong,synopsis,tab,tabular,testonly,%
          title,url,usage,value,var,verb},
   sensitive=true,%
   morecomment=[l]\%% 2008/9 Peter Ruckdeschel
}[keywords,comments]%%
%------------------------------------------------------------------------------%

%----------------
\lstdefinestyle{RstyleO1}{fancyvrb=true,escapechar=`,extendedchars=false,%
                          language=R,%
                          basicstyle={\color{Rcolor}\small},%
                          keywordstyle={\bf\color{Rcolor}},%
                          commentstyle={\color{Rcommentcolor}\ttfamily\itshape},%
                          literate={<-}{{$\leftarrow$}}2{<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$\scriptstyle\wedge$}}1,%
                          alsoother={$},%
                          alsoletter={.<-},%
                          otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                          escapeinside={(*}{*)}}%
%----------------
\lstdefinestyle{Rstyle}{style=RstyleO1}

%----------------
\lstdefinestyle{Rdstyle}{fancyvrb=true,language=Rd,keywordstyle={\bf},%
                         basicstyle={\color{black}\footnotesize},%
                         commentstyle={\ttfamily\itshape},%
                         alsolanguage=R}%
%----------------
%------------------------------------------------------------------------------%
\global\def\Rlstset{\lstset{style=Rstyle}}%
\global\def\Rdlstset{\lstset{style=Rdstyle}}%
%------------------------------------------------------------------------------%
\global\def\Rinlstset{\lstset{style=Rinstyle}}%
\global\def\Routlstset{\lstset{style=Routstyle}}%
\global\def\Rcodelstset{\lstset{style=Rcodestyle}}%
%------------------------------------------------------------------------------%
\Rlstset
%------------------------------------------------------------------------------%
%copying relevant parts of Sweave.sty
%------------------------------------------------------------------------------%
%
\RequirePackage{graphicx,fancyvrb}%
\IfFileExists{upquote.sty}{\RequirePackage{upquote}}{}%

\RequirePackage{ifthen}%
\newboolean{Sweave@gin}%
\setboolean{Sweave@gin}{true}%
\setkeys{Gin}{width=0.8\textwidth}%
\newboolean{Sweave@ae}
\setboolean{Sweave@ae}{true}%
\RequirePackage[T1]{fontenc}
\RequirePackage{ae}
%
\newenvironment{Schunk}{}{}

\newcommand{\Sconcordance}[1]{% 
\ifx\pdfoutput\undefined% 
\csname newcount\endcsname\pdfoutput\fi% 
\ifcase\pdfoutput\special{#1}% 
\else\immediate\pdfobj{#1}\fi} 

%------------------------------------------------------------------------------%
% ---- end of parts of Sweave.sty
%------------------------------------------------------------------------------%
%
% ---- input 
\lstdefinestyle{RinstyleO}{style=Rstyle,fancyvrb=true,%
                           basicstyle=\color{Rcolor}\small}%
\lstdefinestyle{Rinstyle}{style=RinstyleO}
\lstnewenvironment{Sinput}{\Rinlstset}{\Rlstset}
%
% ---- output 
\lstdefinestyle{RoutstyleO}{
V1=0,V2=1,V3=0}%
\lstdefinestyle{Routstyle}{style=RoutstyleO}
\lstnewenvironment{Soutput}{\Routlstset}{\Rlstset}
%
% ---- code 
\lstdefinestyle{RcodestyleO}{style=Rstyle,fancyvrb=true,fontshape=sl,%
                             basicstyle=\color{Rcolor}}%
\lstdefinestyle{Rcodestyle}{style=RcodestyleO}
\lstnewenvironment{Scode}{\Rcodelstset}{\Rlstset}
%
%------------------------------------------------------------------------------%
\let\code\lstinline
\def\Code#1{{\tt\color{Rcolor} #1}}
\def\file#1{{\tt #1}} 
\def\pkg#1{{\tt "#1"}} 
\newcommand{\pkgversion}{{\tt 2.1}}
%------------------------------------------------------------------------------%
%------------------------------------------------------------------------------%
%
%

> 
> 
> 
> cleanEx(); nameEx("changeKeywordstyles")
> ### * changeKeywordstyles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: changeKeywordstyles
> ### Title: changeKeywordstyles
> ### Aliases: changeKeywordstyles
> ### Keywords: utilities
> 
> ### ** Examples
> 
> require(MASS)

\lstdefinestyle{RstyleO3}{style=RstyleO2,%
% --------------------------
% Registration of package MASS [recommended or base] 
% --------------------------
morekeywords={[11]wtloss,write.matrix,width.SJ,whiteside,waders,%
VA,UScrime,UScereal,ucv,truehist,%
Traffic,theta.mm,theta.ml,theta.md,synth.tr,%
synth.te,survey,studres,stormer,stepAIC,%
steam,stdres,SP500,snails,Skye,%
Sitka89,Sitka,shuttle,shrimp,shoes,%
ships,Shepard,select,sammon,Rubber,%
rotifer,road,rnegbin,rms.curv,rlm,%
renumerate.formula,renumerate,rational,Rabbit,quine,%
qda,psi.huber,psi.hampel,psi.bisquare,polr,%
Pima.tr2,Pima.tr,Pima.te,phones,petrol,%
parcoord,painters,OME,oats,Null,%
npr1,npk,nlschools,newcomb,negexp.SSival,%
neg.bin,negative.binomial,nclass.freq,mvrnorm,muscle,%
motors,minn38,michelson,menarche,Melanoma,%
mcycle,mca,mammals,ltsreg,lqs.formula,%
lqs,logtrans,loglm1,loglm,lmwork,%
lmsreg,lm.ridge,lm.gls,leuk,ldahist,%
lda,kde2d,isoMDS,is.fractions,Insurance,%
immer,hubers,huber,housing,hist.scott,%
hist.FD,hills,glm.nb,glmmPQL,glm.convert,%
ginv,gilgais,geyser,genotype,gehan,%
gamma.shape,gamma.dispersion,galaxies,GAGurine,frequency.polygon,%
fractions,forbes,fitdistr,fgl,fbeta,%
farms,eqscplot,epil,enlist,eagles,%
dropterm,drivers,dose.p,denumerate.formula,denumerate,%
deaths,DDT,Cushings,crabs,cpus,%
cov.trob,cov.rob,cov.mve,cov.mcd,corresp,%
coop,contr.sdif,con2tr,chem,cement,%
cats,Cars93,caith,cabbages,boxcox,%
Boston,birthwt,biopsy,beav2,beav1,%
bcv,bandwidth.nrd,bacteria,as.fractions,area,%
anorexia,Animals,Aids2,addterm,accdeaths,%
abbey%
},%
keywordstyle={[11]{\bf\color{RRecomdcolor}}}%
%
}%
\lstdefinestyle{Rstyle}{style=RstyleO3}

> lstsetLanguage(pkgs = c("MASS","stats"),
+                keywordstyles  = paste("\\bfseries\\color{",c("blue","red"),"}",
+                          sep="", collapse=""))
> changeKeywordstyles(pkgs = c("distr","distrEx"),
+                     keywordstyles = paste("\\bfseries\\color{",c("green","blue"),"}",
+                     collapse="", sep = ""))
> 
> 
> 
> cleanEx(); nameEx("copySourceFromRForge")
> ### * copySourceFromRForge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copySourceFromRForge
> ### Title: copySourceFromRForge
> ### Aliases: copySourceFromRForge
> ### Keywords: utilities
> 
> ### ** Examples
> 
> copySourceFromRForge("distr","R","AllClasses.R","distr", from =2, to =3,
+                      offset.after=2)
$text
[1] "# (.onload, .onattach ...)"                                
[2] ".onLoad <- function(lib, pkg) { # extended 03-28-06: P.R. "
[3] "    require(\"methods\", character = TRUE, quietly = TRUE)"
[4] "}"                                                         

$lines
[1] 2 5

> copySourceFromRForge("distr","R","AllClasses.R","distr", from ="setClass",
+                       to ="\}")
Warning: '\}' is an unrecognized escape in a character string
Warning: unrecognized escape removed from "\}"
$text
  [1] "setClassUnion(\"OptionalMatrix\", "                                                   
  [2] "               c(\"matrix\",\"NULL\")"                                                
  [3] "               )"                                                                     
  [4] ""                                                                                     
  [5] "################################"                                                     
  [6] "##"                                                                                   
  [7] "## utility classes "                                                                  
  [8] "##"                                                                                   
  [9] "################################"                                                     
 [10] ""                                                                                     
 [11] "setClass(\"Integer\", contains =\"numeric\","                                         
 [12] "          validity = function(object) all(.isInteger(object)))"                       
 [13] ""                                                                                     
 [14] "################################"                                                     
 [15] "##"                                                                                   
 [16] "## space classes "                                                                    
 [17] "##"                                                                                   
 [18] "################################"                                                     
 [19] ""                                                                                     
 [20] "## virtal Class: rSpace"                                                              
 [21] "setClass(\"rSpace\", "                                                                
 [22] "          representation = representation(name = \"character\"), "                    
 [23] "          prototype = prototype(name = gettext(\"a space\")), "                       
 [24] "          contains = \"VIRTUAL\""                                                     
 [25] "          )"                                                                          
 [26] ""                                                                                     
 [27] "## Class: EuclideanSpace"                                                             
 [28] "setClass(\"EuclideanSpace\", "                                                        
 [29] "          representation = representation(dimension = \"numeric\"), "                 
 [30] "          contains = \"rSpace\","                                                     
 [31] "          prototype = prototype(dimension = 1, "                                      
 [32] "                                name = gettext(\"Euclidean Space\")"                  
 [33] "                                )"                                                    
 [34] "         )"                                                                           
 [35] ""                                                                                     
 [36] "## Class: Reals"                                                                      
 [37] "setClass(\"Reals\",  "                                                                
 [38] "          contains = \"EuclideanSpace\""                                              
 [39] "          )"                                                                          
 [40] ""                                                                                     
 [41] ""                                                                                     
 [42] "## Class: Lattice"                                                                    
 [43] "setClass(\"Lattice\", "                                                               
 [44] "          representation = representation(pivot = \"numeric\", width = \"numeric\", " 
 [45] "                                          Length = \"numeric\""                       
 [46] "### masking not possible here -> Length instead of length"                            
 [47] "                                          ),"                                         
 [48] "          prototype = prototype(pivot = 0, width = 1, Length = 2, "                   
 [49] "                                name = gettext(\"a default lattice\")"                
 [50] "                                ),"                                                   
 [51] "          contains = \"rSpace\""                                                      
 [52] "         )"                                                                           
 [53] ""                                                                                     
 [54] "## Class: Naturals"                                                                   
 [55] "setClass(\"Naturals\", "                                                              
 [56] "          contains = \"Reals\""                                                       
 [57] "          )"                                                                          
 [58] ""                                                                                     
 [59] "################################"                                                     
 [60] "##"                                                                                   
 [61] "## parameter classes"                                                                 
 [62] "##"                                                                                   
 [63] "################################"                                                     
 [64] ""                                                                                     
 [65] "setClass(\"Parameter\", "                                                             
 [66] "          representation = representation(name = \"character\"), "                    
 [67] "          prototype = prototype(name = gettext(\"a parameter\"))"                     
 [68] "          )"                                                                          
 [69] ""                                                                                     
 [70] "setClassUnion(\"OptionalParameter\", "                                                
 [71] "               c(\"Parameter\",\"NULL\")"                                             
 [72] "               )"                                                                     
 [73] ""                                                                                     
 [74] ""                                                                                     
 [75] "## Class: ChisqParameter"                                                             
 [76] "setClass(\"ChisqParameter\", "                                                        
 [77] "          representation = representation(df = \"numeric\", ncp = \"numeric\"), "     
 [78] "          prototype = prototype(df = 1, ncp = 0, "                                    
 [79] "                      name = gettext(\"Parameter of a Chisq distribution\")"          
 [80] "                      ), "                                                            
 [81] "          contains = \"Parameter\""                                                   
 [82] "          )"                                                                          
 [83] ""                                                                                     
 [84] "### Class: DiracParameter"                                                            
 [85] "setClass(\"DiracParameter\", "                                                        
 [86] "          representation = representation(location = \"numeric\"), "                  
 [87] "          prototype = prototype(location = 0, "                                       
 [88] "                      name = gettext(\"Parameter of a Dirac distribution\")"          
 [89] "                      ), "                                                            
 [90] "          contains = \"Parameter\""                                                   
 [91] "          )"                                                                          
 [92] ""                                                                                     
 [93] "## Class: ExpParameter"                                                               
 [94] "setClass(\"ExpParameter\", "                                                          
 [95] "          representation = representation(rate = \"numeric\"), "                      
 [96] "          prototype = prototype(rate = 1, name = "                                    
 [97] "                      gettext(\"Parameter of an Exponential distribution\")"          
 [98] "                      ),  "                                                           
 [99] "          contains = \"Parameter\""                                                   
[100] "          )"                                                                          
[101] ""                                                                                     
[102] "## Class: GammaParameter"                                                             
[103] "setClass(\"GammaParameter\", "                                                        
[104] "          representation = representation(shape = \"numeric\", scale = \"numeric\"), "
[105] "          prototype = prototype(shape = 1, scale = 1, "                               
[106] "                      name = gettext(\"Parameter of a Gamma distribution\")"          
[107] "                      ), "                                                            
[108] "          contains = \"Parameter\""                                                   
[109] "          )"                                                                          
[110] ""                                                                                     
[111] "## Class: PoisParameter"                                                              
[112] "setClass(\"PoisParameter\", "                                                         
[113] "          representation = representation(lambda = \"numeric\"), "                    
[114] "          prototype = prototype(lambda = 1, "                                         
[115] "                      name = gettext(\"Parameter of a Poisson distribution\")"        
[116] "                      ), "                                                            
[117] "          contains = \"Parameter\""                                                   
[118] "          )"                                                                          
[119] ""                                                                                     
[120] "## Class: NbinomParameter"                                                            
[121] "setClass(\"NbinomParameter\", "                                                       
[122] "          representation = representation(size = \"numeric\", prob = \"numeric\"), "  
[123] "          prototype = prototype(size = 1, prob = 0.5, name = "                        
[124] "                      gettext(\"Parameter of a Negative Binomial distribution\")"     
[125] "                      ), "                                                            
[126] "          contains = \"Parameter\""                                                   
[127] "          )"                                                                          
[128] ""                                                                                     
[129] "## Class: HyperParameter"                                                             
[130] "setClass(\"HyperParameter\", "                                                        
[131] "          representation = representation(m = \"numeric\", n = \"numeric\", "         
[132] "                                          k = \"numeric\""                            
[133] "                                          ), "                                        
[134] "          prototype = prototype(m = 1, n = 1, k = 1, name = "                         
[135] "                      gettext(\"Parameter of a Hypergeometric distribution\")"        
[136] "                      ), "                                                            
[137] "          contains = \"Parameter\""                                                   
[138] "          )"                                                                          
[139] ""                                                                                     
[140] "## Class: BinomParameter"                                                             
[141] "setClass(\"BinomParameter\", "                                                        
[142] "          representation = representation(size = \"numeric\", prob = \"numeric\"), "  
[143] "          prototype = prototype(size = 1, prob = 0.5, name = "                        
[144] "                      gettext(\"Parameter of a Binomial distribution\")"              
[145] "                      ), "                                                            
[146] "          contains = \"Parameter\""                                                   
[147] "          )"                                                                          
[148] ""                                                                                     
[149] "#-"                                                                                   
[150] "## no longer needed: this is a negBinom with size 1 no longer "                       
[151] "#-"                                                                                   
[152] "### !!! deprecated as of version 1.9 !!!"                                             
[153] "##"                                                                                   
[154] "## Class: GeomParameter   "                                                           
[155] "setClass(\"GeomParameter\", "                                                         
[156] "          representation = representation(prob = \"numeric\"), "                      
[157] "          prototype = prototype(prob = 0.5, name = "                                  
[158] "                      gettext(\"Parameter of a Geometric distribution\")"             
[159] "                      ), "                                                            
[160] "          contains = \"Parameter\""                                                   
[161] "          )"                                                                          
[162] "### !!! end of deprecated !!! "                                                       
[163] ""                                                                                     
[164] "## Class: CauchyParameter"                                                            
[165] "setClass(\"CauchyParameter\", "                                                       
[166] "          representation = representation(location = \"numeric\", "                   
[167] "                                          scale = \"numeric\""                        
[168] "                                          ), "                                        
[169] "          prototype = prototype(location = 0, scale = 1, name = "                     
[170] "                      gettext(\"Parameter of a Cauchy distribution\")"                
[171] "                      ), "                                                            
[172] "          contains = \"Parameter\""                                                   
[173] "          )"                                                                          
[174] ""                                                                                     
[175] "## Class: NormParameter"                                                              
[176] "setClass(\"NormParameter\", "                                                         
[177] "          representation = representation(mean = \"numeric\", sd = \"vector\"), "     
[178] "          prototype = prototype(mean = 0, sd = 1, name = "                            
[179] "                      gettext(\"Parameter of a Normal distribution\")"                
[180] "                      ), "                                                            
[181] "          contains = \"Parameter\""                                                   
[182] "          )"                                                                          
[183] ""                                                                                     
[184] "## Class: UniNormParameter"                                                           
[185] "setClass(\"UniNormParameter\", "                                                      
[186] "          prototype = prototype(name = "                                              
[187] "                      gettext(\"Parameter of a univariate Normal distribution\")"     
[188] "                      ), "                                                            
[189] "          contains = \"NormParameter\""                                               
[190] "          )"                                                                          
[191] ""                                                                                     
[192] "## Class: UnifParameter"                                                              
[193] "setClass(\"UnifParameter\", "                                                         
[194] "          representation = representation(Min = \"numeric\", Max = \"numeric\"), "    
[195] "          prototype = prototype(Min = 0, Max = 1, name =  "                           
[196] "                      gettext(\"Parameter of a Uniform distribution\")"               
[197] "                      ), "                                                            
[198] "          contains = \"Parameter\""                                                   
[199] "          )"                                                                          
[200] ""                                                                                     
[201] "## Class: FParameter"                                                                 
[202] "setClass(\"FParameter\", "                                                            
[203] "          representation = representation(df1 = \"numeric\", df2 = \"numeric\", "     
[204] "                                          ncp = \"numeric\""                          
[205] "                                          ), "                                        
[206] "          prototype = prototype(df1 = 1, df2 = 1, ncp = 0, name = "                   
[207] "                      gettext(\"Parameter of a Fisher-Snedecor/F distribution\")"     
[208] "                      ), "                                                            
[209] "          contains = \"Parameter\""                                                   
[210] "          )"                                                                          
[211] ""                                                                                     
[212] "## Class: TParameter"                                                                 
[213] "setClass(\"TParameter\", "                                                            
[214] "          representation = representation(df = \"numeric\", ncp = \"numeric\"), "     
[215] "          prototype = prototype(df = 1, ncp = 0, name = "                             
[216] "                      gettext(\"Parameter of a Student/T distribution\")"             
[217] "                      ), "                                                            
[218] "          contains = \"Parameter\""                                                   
[219] "          )"                                                                          
[220] ""                                                                                     
[221] "## Class: LNormParameter"                                                             
[222] "setClass(\"LnormParameter\", "                                                        
[223] "          representation = representation(meanlog = \"numeric\","                     
[224] "                                          sdlog = \"numeric\""                        
[225] "                                          ), "                                        
[226] "          prototype = prototype(meanlog = 0, meansd = 1, name =  "                    
[227] "                      gettext(\"Parameter of a Log-Normal distribution\")"            
[228] "                      ), "                                                            
[229] "          contains = \"Parameter\""                                                   
[230] "          )"                                                                          
[231] ""                                                                                     
[232] "## Class: BetaParameter"                                                              
[233] "setClass(\"BetaParameter\", "                                                         
[234] "          representation = representation(shape1 = \"numeric\", "                     
[235] "                                          shape2 = \"numeric\", ncp = \"numeric\""    
[236] "                                          ), "                                        
[237] "          prototype = prototype(shape1 = 1, shape2 = 1, ncp = 0, name = "             
[238] "                      gettext(\"Parameter of a Beta distribution\")"                  
[239] "                      ), "                                                            
[240] "          contains = \"Parameter\""                                                   
[241] "          )"                                                                          
[242] ""                                                                                     
[243] "## Class: LogisParameter"                                                             
[244] "setClass(\"LogisParameter\", "                                                        
[245] "          representation = representation(location = \"numeric\", "                   
[246] "                                          scale = \"numeric\""                        
[247] "                                          ), "                                        
[248] "          prototype = prototype(location = 0, scale = 1, name = "                     
[249] "                      gettext(\"Parameter of a Logistic distribution\")"              
[250] "                      ), "                                                            
[251] "          contains = \"Parameter\""                                                   
[252] "          )"                                                                          
[253] ""                                                                                     
[254] "## Class: WeibullParameter"                                                           
[255] "setClass(\"WeibullParameter\", "                                                      
[256] "          representation = representation(shape = \"numeric\", "                      
[257] "                                          scale = \"numeric\""                        
[258] "                                          ), "                                        
[259] "          prototype = prototype(shape = 1, scale = 1, name = "                        
[260] "                      gettext(\"Parameter of a Weibull distribution\")"               
[261] "                      ), "                                                            
[262] "          contains = \"Parameter\""                                                   
[263] "          )"                                                                          
[264] ""                                                                                     
[265] "################################"                                                     
[266] "##"                                                                                   
[267] "## distribution classes"                                                              
[268] "##"                                                                                   
[269] "################################"                                                     
[270] ""                                                                                     
[271] "setClass(\"Distribution\","                                                           
[272] "          representation = representation("                                           
[273] "                      img = \"rSpace\","                                              
[274] "                      param = \"OptionalParameter\","                                 
[275] "                      r = \"function\","                                              
[276] "                      d = \"OptionalFunction\","                                      
[277] "                      p = \"OptionalFunction\","                                      
[278] "                      q = \"OptionalFunction\", # extended by P.R. 28-03-06"          
[279] "                      .withSim = \"logical\",   ## 'internal' slots => no"            
[280] "                      .withArith = \"logical\",  ## accessor/replacement functions"   
[281] "                      .logExact = \"logical\","                                       
[282] "                      .lowerExact = \"logical\""                                      
[283] "                      ),"                                                             
[284] "         prototype = prototype("                                                      
[285] "                     r = function(n){ rnorm(n, mean = 0, sd = 1) },"                  

$lines
[1]  41 325

> 
> 
> 
> cleanEx(); nameEx("isBaseOrRecommended")
> ### * isBaseOrRecommended
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isBaseOrRecommended
> ### Title: isBaseOrRecommended
> ### Aliases: isBaseOrRecommended
> ### Keywords: utilities internal
> 
> ### ** Examples
> 
> isBaseOrRecommended(pkgs = c("SweaveListingUtils","Matrix","splines"))
SweaveListingUtils             Matrix            splines 
             FALSE               TRUE               TRUE 
> 
> 
> cleanEx(); nameEx("library")
> ### * library
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: library
> ### Title: Loading Packages with registering symbols for TeX package
> ###   'listing'
> ### Aliases: library require
> ### Keywords: utilities
> 
> ### ** Examples
> 
> require(survival)
Warning: closing unused connection 3 (http://r-forge.r-project.org/plugins/scmsvn/viewcvs.php/*checkout*/pkg/distr/R/AllClasses.R?root=distr)

\lstdefinestyle{RstyleO4}{style=RstyleO3,%
% --------------------------
% Registration of package survival [recommended or base] 
% --------------------------
morekeywords={[12]veteran,untangle.specials,tobin,tcut,survSplit,%
survreg.fit,survregDtest,survreg.distributions,survreg.control,survreg,%
survobrien,survfit,survexp.usr,survexp.us,survexp.mnwhite,%
survexp.mn,survexp,survdiff,survConcordance,Surv,%
strata,stanford2,ridge,rats,ratetable,%
qsurvreg,pyears,psurvreg,pspline,pbcseq,%
pbc,ovarian,nwtco,mgus2,mgus1,%
mgus,match.ratetable,lung,leukemia,labels.survreg,%
kidney,jasa1,jasa,is.Surv,is.ratetable,%
is.na.Surv,is.na.ratetable,is.na.coxph.penalty,heart,frailty.t,%
frailty.gaussian,frailty.gamma,frailty,format.Surv,dsurvreg,%
cox.zph,coxph.fit,coxph.detail,coxph.control,coxph,%
colon,cluster,clogit,cgd,cch,%
cancer,bladder2,bladder1,bladder,basehaz,%
attrassign,aml,aareg%
},%
keywordstyle={[12]{\bf\color{RRecomdcolor}}},%
%
% --------------------------
% Registration of package splines [recommended or base] 
% --------------------------
morekeywords={[13]xyVector,splineOrder,splineKnots,splineDesign,spline.des,%
polySpline,periodicSpline,ns,interpSpline,bs,%
backSpline,asVector,as.polySpline%
},%
keywordstyle={[13]{\bf\color{RRecomdcolor}}}%
%
}%
\lstdefinestyle{Rstyle}{style=RstyleO4}

> 
> 
> 
> cleanEx(); nameEx("lstinputSourceFromRForge")
> ### * lstinputSourceFromRForge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lstinputSourceFromRForge
> ### Title: lstinputSourceFromRForge
> ### Aliases: lstinputSourceFromRForge
> ### Keywords: utilities
> 
> ### ** Examples
> 
> lstinputSourceFromRForge("distr","R","AllClasses.R","distr",
+                      "## Class: BinomParameter", "#-")
lines 180--189
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Class: BinomParameter
setClass("BinomParameter", 
          representation = representation(size = "numeric", prob = "numeric"), 
          prototype = prototype(size = 1, prob = 0.5, name = 
                      gettext("Parameter of a Binomial distribution")
                      ), 
          contains = "Parameter"
          )

#-
\end{lstlisting}
%------------------------------------------------------------------------------%
%

> 
> lstinputSourceFromRForge("distr","R","AllClasses.R","distr",
+                      from = "## Class: binomial distribution",
+                      to = "contains = \"LatticeDistribution\"", offset.after = 1)
lines 869--897
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Class: binomial distribution
setClass("Binom",
          prototype = prototype(
                      r = function(n){ rbinom(n, size = 1,prob = 0.5) },
                      d = function(x, log = FALSE){
                              dbinom(x, size = 1, prob = 0.5, log = log)
                                          },
                      p = function(q, lower.tail = TRUE, log.p = FALSE ){
                              pbinom(q, size = 1, prob = 0.5,
                                     lower.tail = lower.tail, log.p = log.p)
                                          },
                      q = function(p, lower.tail = TRUE, log.p = FALSE ){
                              qbinom(p, size = 1, prob = 0.5,
                                     lower.tail = lower.tail, log.p = log.p)
                                          },
                      img = new("Naturals"),
                      param = new("BinomParameter"),
                      support = 0:1,
                      lattice = new("Lattice",
                                pivot = 0, width = 1, Length = 2, name =
                                gettext(
                                  "lattice of a Binomial distribution"
                                       )
                                ),
                     .logExact = TRUE,
                     .lowerExact = TRUE
                      ),
          contains = "LatticeDistribution"
          )
\end{lstlisting}
%------------------------------------------------------------------------------%
%

> lstinputSourceFromRForge("distr","man","Binom-class.Rd","distr")
%------------------------------------------------------------------------------%
\begin{lstlisting}[style = Rdstyle]
\name{Binom-class} 
\docType{class}
\alias{Binom-class}
\alias{Binom}
\alias{initialize,Binom-method}

\title{Class "Binom" }
\description{The binomial distribution with \code{size} \eqn{= n}, by default 
  \eqn{=1}, and
  \code{prob} \eqn{= p}, by default \eqn{=0.5}, has density
  \deqn{p(x) = {n \choose x} {p}^{x} {(1-p)}^{n-x}}{
    p(x) = choose(n,x) p^x (1-p)^(n-x)}
  for \eqn{x = 0, \ldots, n}.

  C.f.\code{\link[stats:Binomial]{rbinom}}
}
\section{Objects from the Class}{
Objects can be created by calls of the form \code{Binom(prob, size)}.
This object is a binomial distribution. 
}
\section{Slots}{
  \describe{
    \item{\code{img}:}{Object of class \code{"Naturals"}: The space of the 
     image of this distribution has got dimension 1 and the 
     name "Natural Space". }
    \item{\code{param}:}{Object of class \code{"BinomParameter"}: the parameter 
          of this distribution (\code{prob}, \code{size}), declared at its 
          instantiation }
    \item{\code{r}:}{Object of class \code{"function"}: generates random 
          numbers (calls function \code{rbinom}) }
    \item{\code{d}:}{Object of class \code{"function"}: density function (calls 
          function \code{dbinom}) }
    \item{\code{p}:}{Object of class \code{"function"}: cumulative function 
          (calls function \code{pbinom}) }
    \item{\code{q}:}{Object of class \code{"function"}: inverse of the 
           cumulative function (calls function \code{qbinom}).
    The quantile is defined as the smallest value x such that F(x) >= p, where 
            F is the cumulative function. }
    \item{\code{support}:}{Object of class \code{"numeric"}: a (sorted) 
            vector containing the support of the discrete density function}
    \item{\code{.withArith}:}{logical: used internally to issue warnings as to interpretation of arithmetics}
    \item{\code{.withSim}:}{logical: used internally to issue warnings as to accuracy}
    \item{\code{.logExact}:}{logical: used internally to flag the case where there are explicit formulae for the
                              log version of density, cdf, and quantile function}
    \item{\code{.lowerExact}:}{logical: used internally to flag the case where there are explicit formulae for the
                              lower tail version of cdf and quantile function}
  }
}
\section{Extends}{
Class \code{"DiscreteDistribution"}, directly.\cr
Class \code{"UnivariateDistribution"}, by class \code{"DiscreteDistribution"}.\cr
Class \code{"Distribution"}, by class \code{"DiscreteDistribution"}.
}
\section{Methods}{
  \describe{
    \item{+}{\code{signature(e1 = "Binom", e2 = "Binom")}: For two binomial 
             distributions with equal probabilities the exact convolution 
             formula is implemented thereby improving the general numerical 
             accuracy.}
    \item{initialize}{\code{signature(.Object = "Binom")}: initialize method }
    \item{prob}{\code{signature(object = "Binom")}: returns the slot \code{prob} 
             of the parameter of the distribution }
    \item{prob<-}{\code{signature(object = "Binom")}: modifies the slot 
             \code{prob} of the parameter of the distribution }
    \item{size}{\code{signature(object = "Binom")}: returns the slot \code{size} 
             of the parameter of the distribution }
    \item{size<-}{\code{signature(object = "Binom")}: modifies the slot 
             \code{size} of the parameter of the distribution }
  }
}


\author{
  Thomas Stabla \email{statho3@web.de},\cr 
  Florian Camphausen \email{fcampi@gmx.de},\cr
  Peter Ruckdeschel \email{Peter.Ruckdeschel@itwm.fraunhofer.de},\cr 
  Matthias Kohl \email{Matthias.Kohl@stamats.de}
  }


\seealso{
\code{\link{BinomParameter-class}}
\code{\link{DiscreteDistribution-class}}
\code{\link{Naturals-class}}
\code{\link[stats:Binomial]{rbinom}}
}
\examples{
\end{lstlisting}\vspace{-2ex}
%------------------------------------------------------------------------------%
\begin{lstlisting}[style = Rstyle,basicstyle = \scriptsize\color{Rcolor}, xleftmargin = 2em]
B <- Binom(prob=0.5,size=1) # B is a binomial distribution with prob=0.5 and size=1.
r(B)(1) # # one random number generated from this distribution, e.g. 1
d(B)(1) # Density of this distribution is  0.5 for x=1.
p(B)(0.4) # Probability that x<0.4 is 0.5.
q(B)(.1) # x=0 is the smallest value x such that p(B)(x)>=0.1.
size(B) # size of this distribution is 1.
size(B) <- 2 # size of this distribution is now 2.
C <- Binom(prob = 0.5, size = 1) # C is a binomial distribution with prob=0.5 and size=1.
D <- Binom(prob = 0.6, size = 1) # D is a binomial distribution with prob=0.6 and size=1.
E <- B + C # E is a binomial distribution with prob=0.5 and size=3.
F <- B + D # F is an object of class LatticeDistribution.
G <- B + as(D,"DiscreteDistribution") ## DiscreteDistribution
\end{lstlisting}\vspace{-3ex}
%------------------------------------------------------------------------------%
\begin{lstlisting}[style = Rdstyle]
}
\keyword{distribution}
\concept{discrete distribution}
\concept{lattice distribution}
\concept{Binomial family}
\concept{Binomial distribution}
\concept{S4 distribution class}
\concept{generating function}
\end{lstlisting}
%------------------------------------------------------------------------------%
%

> 
> lstinputSourceFromRForge("distr","R","BinomialDistribution.R","distr",
+                      from = c("## Access Methods", "## wrapped access methods"),
+                      to = c("setReplaceMethod\\(\"prob\", \"BinomParameter\"",
+                             "size = value\\)\\)") ,
+                      offset.after = c(1,1))
lines 8--15, and
43--53
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Access Methods
setMethod("size", "BinomParameter", function(object) object@size)
setMethod("prob", "BinomParameter", function(object) object@prob)
## Replace Methods
setReplaceMethod("size", "BinomParameter", 
                  function(object, value){ object@size <- value; object})
setReplaceMethod("prob", "BinomParameter", 
                  function(object, value){ object@prob <- value; object})
\end{lstlisting}
%------------------------------------------------------------------------------%
%

%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## wrapped access methods
setMethod("prob", "Binom", function(object) prob(param(object)))
setMethod("size", "Binom", function(object) size(param(object)))
## wrapped replace methods
setMethod("prob<-", "Binom", 
           function(object, value) new("Binom", prob = value, 
                                        size = size(object)))
setMethod("size<-", "Binom", 
           function(object, value) new("Binom", prob = prob(object), 
                                        size = value))

\end{lstlisting}
%------------------------------------------------------------------------------%
%

> lstinputSourceFromRForge("distr","R","BinomialDistribution.R","distr",
+                      from = c(8,43,45), to = c(16,53,45))
lines 8--16, 
43--53, and
45
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Access Methods
setMethod("size", "BinomParameter", function(object) object@size)
setMethod("prob", "BinomParameter", function(object) object@prob)
## Replace Methods
setReplaceMethod("size", "BinomParameter", 
                  function(object, value){ object@size <- value; object})
setReplaceMethod("prob", "BinomParameter", 
                  function(object, value){ object@prob <- value; object})

\end{lstlisting}
%------------------------------------------------------------------------------%
%

%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## wrapped access methods
setMethod("prob", "Binom", function(object) prob(param(object)))
setMethod("size", "Binom", function(object) size(param(object)))
## wrapped replace methods
setMethod("prob<-", "Binom", 
           function(object, value) new("Binom", prob = value, 
                                        size = size(object)))
setMethod("size<-", "Binom", 
           function(object, value) new("Binom", prob = prob(object), 
                                        size = value))

\end{lstlisting}
%------------------------------------------------------------------------------%
%

%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
setMethod("size", "Binom", function(object) size(param(object)))
\end{lstlisting}
%------------------------------------------------------------------------------%
%

> lstinputSourceFromRForge("distr","R","BinomialDistribution.R","distr",
+                      from = c("## Access Methods", "## wrapped access methods"),
+                      to = c("setReplaceMethod\\(\"prob\", \"BinomParameter\"",
+                             "size = value\\)\\)") ,
+                      offset.after = c(1,1))
lines 8--15, and
43--53
%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## Access Methods
setMethod("size", "BinomParameter", function(object) object@size)
setMethod("prob", "BinomParameter", function(object) object@prob)
## Replace Methods
setReplaceMethod("size", "BinomParameter", 
                  function(object, value){ object@size <- value; object})
setReplaceMethod("prob", "BinomParameter", 
                  function(object, value){ object@prob <- value; object})
\end{lstlisting}
%------------------------------------------------------------------------------%
%

%------------------------------------------------------------------------------%
\Rlstset
\begin{lstlisting}
## wrapped access methods
setMethod("prob", "Binom", function(object) prob(param(object)))
setMethod("size", "Binom", function(object) size(param(object)))
## wrapped replace methods
setMethod("prob<-", "Binom", 
           function(object, value) new("Binom", prob = value, 
                                        size = size(object)))
setMethod("size<-", "Binom", 
           function(object, value) new("Binom", prob = prob(object), 
                                        size = value))

\end{lstlisting}
%------------------------------------------------------------------------------%
%

> 
> 
> 
> cleanEx(); nameEx("lstset")
> ### * lstset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lstset
> ### Title: lstset and friends
> ### Aliases: lstset lstsetRd lstsetR lstsetRin lstsetRout lstsetRcode
> ###   lstdefRstyle lstsetRall
> ### Keywords: utilities
> 
> ### ** Examples
> 
> lstset(taglist(A="H", b=2, 3),30)
\lstset{
A=H,b=2,V3=3}%
> lstset(taglist(A="H", b=2, 3),30, startS = "\\lstdefinestyle{Rstyle}{")
\lstdefinestyle{Rstyle}{A=H,%
                        b=2,%
                        V3=3}%
> lstsetR()

%----------------
NULL
}%
%----------------
> lstsetRd()

%----------------
NULL
}%
%----------------
> 
> 
> 
> cleanEx(); nameEx("lstsetLanguage")
> ### * lstsetLanguage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lstsetLanguage
> ### Title: lstsetLanguage
> ### Aliases: lstsetLanguage
> ### Keywords: utilities
> 
> ### ** Examples
> 
> require(MASS)
Warning: closing unused connection 4 (http://r-forge.r-project.org/plugins/scmsvn/viewcvs.php/*checkout*/pkg/distr/R/BinomialDistribution.R?root=distr)
Warning: closing unused connection 3 (http://r-forge.r-project.org/plugins/scmsvn/viewcvs.php/*checkout*/pkg/distr/man/Binom-class.Rd?root=distr)
> lstsetLanguage(pkgs = c("MASS","stats"),
+                keywordstyles  = paste("\\bfseries\\color{",c("blue","red"),"}",
+                          sep="", collapse=""))
> ### not to be used:
> print(SweaveListingUtils:::.alreadyDefinedPkgs)
 [1] "SweaveListingUtils" "startupmsg"         "stats"             
 [4] "graphics"           "grDevices"          "utils"             
 [7] "datasets"           "methods"            "base"              
[10] "MASS"               "survival"           "splines"           
> print(SweaveListingUtils:::.keywordsR)
  [1] "abbreviate"        "abline"            "abs"              
  [4] "acos"              "acosh"             "action"           
  [7] "add1"              "add"               "aggregate"        
 [10] "alias"             "Alias"             "alist"            
 [13] "all"               "anova"             "any"              
 [16] "aov"               "aperm"             "append"           
 [19] "apply"             "approx"            "approxfun"        
 [22] "apropos"           "Arg"               "args"             
 [25] "array"             "arrows"            "as"               
 [28] "asin"              "asinh"             "atan"             
 [31] "atan2"             "atanh"             "attach"           
 [34] "attr"              "attributes"        "autoload"         
 [37] "autoloader"        "ave"               "axis"             
 [40] "backsolve"         "barplot"           "basename"         
 [43] "besselI"           "besselJ"           "besselK"          
 [46] "besselY"           "beta"              "binomial"         
 [49] "body"              "box"               "boxplot"          
 [52] "break"             "browser"           "bug"              
 [55] "builtins"          "bxp"               "by"               
 [58] "c"                 "C"                 "call"             
 [61] "Call"              "case"              "cat"              
 [64] "category"          "cbind"             "ceiling"          
 [67] "character"         "char"              "charmatch"        
 [70] "check"             "chol"              "chol2inv"         
 [73] "choose"            "chull"             "class"            
 [76] "close"             "cm"                "codes"            
 [79] "coef"              "coefficients"      "co"               
 [82] "col"               "colnames"          "colors"           
 [85] "colours"           "commandArgs"       "comment"          
 [88] "complete"          "complex"           "conflicts"        
 [91] "Conj"              "contents"          "contour"          
 [94] "contrasts"         "contr"             "control"          
 [97] "helmert"           "contrib"           "convolve"         
[100] "cooks"             "coords"            "distance"         
[103] "coplot"            "cor"               "cos"              
[106] "cosh"              "count"             "fields"           
[109] "cov"               "covratio"          "wt"               
[112] "CRAN"              "create"            "crossprod"        
[115] "cummax"            "cummin"            "cumprod"          
[118] "cumsum"            "curve"             "cut"              
[121] "cycle"             "D"                 "data"             
[124] "dataentry"         "date"              "dbeta"            
[127] "dbinom"            "dcauchy"           "dchisq"           
[130] "de"                "debug"             "debugger"         
[133] "Defunct"           "default"           "delay"            
[136] "delete"            "deltat"            "demo"             
[139] "de"                "density"           "deparse"          
[142] "dependencies"      "Deprecated"        "deriv"            
[145] "description"       "detach"            "dev2bitmap"       
[148] "dev"               "cur"               "deviance"         
[151] "off"               "prev"              ""                 
[154] "dexp"              "df"                "dfbetas"          
[157] "dffits"            "dgamma"            "dgeom"            
[160] "dget"              "dhyper"            "diag"             
[163] "diff"              "digamma"           "dim"              
[166] "dimnames"          "dir"               "dirname"          
[169] "dlnorm"            "dlogis"            "dnbinom"          
[172] "dnchisq"           "dnorm"             "do"               
[175] "dotplot"           "double"            "download"         
[178] "dpois"             "dput"              "drop"             
[181] "drop1"             "dsignrank"         "dt"               
[184] "dummy"             "dump"              "dunif"            
[187] "duplicated"        "dweibull"          "dwilcox"          
[190] "dyn"               "edit"              "eff"              
[193] "effects"           "eigen"             "else"             
[196] "emacs"             "end"               "environment"      
[199] "env"               "erase"             "eval"             
[202] "equal"             "evalq"             "example"          
[205] "exists"            "exit"              "exp"              
[208] "expand"            "expression"        "External"         
[211] "extract"           "extractAIC"        "factor"           
[214] "fail"              "family"            "fft"              
[217] "file"              "filled"            "find"             
[220] "fitted"            "fivenum"           "fix"              
[223] "floor"             "for"               "For"              
[226] "formals"           "format"            "formatC"          
[229] "formula"           "Fortran"           "forwardsolve"     
[232] "frame"             "frequency"         "ftable"           
[235] "ftable2table"      "function"          "gamma"            
[238] "Gamma"             "gammaCody"         "gaussian"         
[241] "gc"                "gcinfo"            "gctorture"        
[244] "get"               "getenv"            "geterrmessage"    
[247] "getOption"         "getwd"             "gl"               
[250] "glm"               "globalenv"         "gnome"            
[253] "GNOME"             "graphics"          "gray"             
[256] "grep"              "grey"              "grid"             
[259] "gsub"              "hasTsp"            "hat"              
[262] "heat"              "help"              "hist"             
[265] "home"              "hsv"               "httpclient"       
[268] "I"                 "identify"          "if"               
[271] "ifelse"            "Im"                "image"            
[274] "%in%"              "index"             "influence"        
[277] "measures"          "inherits"          "install"          
[280] "installed"         "integer"           "interaction"      
[283] "interactive"       "Internal"          "intersect"        
[286] "inverse"           "invisible"         "IQR"              
[289] "is"                "jitter"            "kappa"            
[292] "kronecker"         "labels"            "lapply"           
[295] "layout"            "lbeta"             "lchoose"          
[298] "lcm"               "legend"            "length"           
[301] "levels"            "lgamma"            "library"          
[304] "licence"           "license"           "lines"            
[307] "list"              "lm"                "load"             
[310] "local"             "locator"           "log"              
[313] "log10"             "log1p"             "log2"             
[316] "logical"           "loglin"            "lower"            
[319] "lowess"            "ls"                "lsfit"            
[322] "lsf"               "ls"                "machine"          
[325] "Machine"           "mad"               "mahalanobis"      
[328] "make"              "link"              "margin"           
[331] "match"             "Math"              "matlines"         
[334] "mat"               "matplot"           "matpoints"        
[337] "matrix"            "max"               "mean"             
[340] "median"            "memory"            "menu"             
[343] "merge"             "methods"           "min"              
[346] "missing"           "Mod"               "mode"             
[349] "model"             "response"          "mosaicplot"       
[352] "mtext"             "mvfft"             "na"               
[355] "nan"               "names"             "omit"             
[358] "nargs"             "nchar"             "ncol"             
[361] "NCOL"              "new"               "next"             
[364] "NextMethod"        "nextn"             "nlevels"          
[367] "nlm"               "noquote"           "NotYetImplemented"
[370] "NotYetUsed"        "nrow"              "NROW"             
[373] "null"              "numeric"           "%o%"              
[376] "objects"           "offset"            "old"              
[379] "on"                "Ops"               "optim"            
[382] "optimise"          "optimize"          "options"          
[385] "or"                "order"             "ordered"          
[388] "outer"             "package"           "packages"         
[391] "page"              "pairlist"          "pairs"            
[394] "palette"           "panel"             "par"              
[397] "parent"            "parse"             "paste"            
[400] "path"              "pbeta"             "pbinom"           
[403] "pcauchy"           "pchisq"            "pentagamma"       
[406] "persp"             "pexp"              "pf"               
[409] "pgamma"            "pgeom"             "phyper"           
[412] "pico"              "pictex"            "piechart"         
[415] "Platform"          "plnorm"            "plogis"           
[418] "plot"              "pmatch"            "pmax"             
[421] "pmin"              "pnbinom"           "pnchisq"          
[424] "pnorm"             "points"            "poisson"          
[427] "poly"              "polygon"           "polyroot"         
[430] "pos"               "postscript"        "power"            
[433] "ppoints"           "ppois"             "predict"          
[436] "preplot"           "pretty"            "Primitive"        
[439] "print"             "prmatrix"          "proc"             
[442] "prod"              "profile"           "proj"             
[445] "prompt"            "prop"              "provide"          
[448] "psignrank"         "ps"                "pt"               
[451] "ptukey"            "punif"             "pweibull"         
[454] "pwilcox"           "q"                 "qbeta"            
[457] "qbinom"            "qcauchy"           "qchisq"           
[460] "qexp"              "qf"                "qgamma"           
[463] "qgeom"             "qhyper"            "qlnorm"           
[466] "qlogis"            "qnbinom"           "qnchisq"          
[469] "qnorm"             "qpois"             "qqline"           
[472] "qqnorm"            "qqplot"            "qr"               
[475] "Q"                 "qty"               "qy"               
[478] "qsignrank"         "qt"                "qtukey"           
[481] "quantile"          "quasi"             "quit"             
[484] "qunif"             "quote"             "qweibull"         
[487] "qwilcox"           "rainbow"           "range"            
[490] "rank"              "rbeta"             "rbind"            
[493] "rbinom"            "rcauchy"           "rchisq"           
[496] "Re"                "read"              "csv"              
[499] "csv2"              "fwf"               "readline"         
[502] "socket"            "real"              "Recall"           
[505] "rect"              "reformulate"       "regexpr"          
[508] "relevel"           "remove"            "rep"              
[511] "repeat"            "replace"           "replications"     
[514] "report"            "require"           "resid"            
[517] "residuals"         "restart"           "return"           
[520] "rev"               "rexp"              "rf"               
[523] "rgamma"            "rgb"               "rgeom"            
[526] "R"                 "rhyper"            "rle"              
[529] "rlnorm"            "rlogis"            "rm"               
[532] "rnbinom"           "RNGkind"           "rnorm"            
[535] "round"             "row"               "rownames"         
[538] "rowsum"            "rpois"             "rsignrank"        
[541] "rstandard"         "rstudent"          "rt"               
[544] "rug"               "runif"             "rweibull"         
[547] "rwilcox"           "sample"            "sapply"           
[550] "save"              "scale"             "scan"             
[553] "scan"              "screen"            "sd"               
[556] "se"                "search"            "searchpaths"      
[559] "segments"          "seq"               "sequence"         
[562] "setdiff"           "setequal"          "set"              
[565] "setwd"             "show"              "sign"             
[568] "signif"            "sin"               "single"           
[571] "sinh"              "sink"              "solve"            
[574] "sort"              "source"            "spline"           
[577] "splinefun"         "split"             "sqrt"             
[580] "stars"             "start"             "stat"             
[583] "stem"              "step"              "stop"             
[586] "storage"           "strstrheight"      "stripplot"        
[589] "strsplit"          "structure"         "strwidth"         
[592] "sub"               "subset"            "substitute"       
[595] "substr"            "substring"         "sum"              
[598] "summary"           "sunflowerplot"     "svd"              
[601] "sweep"             "switch"            "symbol"           
[604] "symbols"           "symnum"            "sys"              
[607] "status"            "system"            "t"                
[610] "table"             "tabulate"          "tan"              
[613] "tanh"              "tapply"            "tempfile"         
[616] "terms"             "terrain"           "tetragamma"       
[619] "text"              "time"              "title"            
[622] "topo"              "trace"             "traceback"        
[625] "transform"         "tri"               "trigamma"         
[628] "trunc"             "try"               "ts"               
[631] "tsp"               "typeof"            "unclass"          
[634] "undebug"           "undoc"             "union"            
[637] "unique"            "uniroot"           "unix"             
[640] "unlink"            "unlist"            "unname"           
[643] "untrace"           "update"            "upper"            
[646] "url"               "UseMethod"         "var"              
[649] "variable"          "vector"            "Version"          
[652] "vi"                "warning"           "warnings"         
[655] "weighted"          "weights"           "which"            
[658] "while"             "window"            "write"            
[661] "%x%"               "x11"               "X11"              
[664] "xedit"             "xemacs"            "xinch"            
[667] "xor"               "xpdrows"           "xy"               
[670] "xyinch"            "yinch"             "zapsmall"         
[673] "zip"              
> 
> 
> 
> cleanEx(); nameEx("readPackageVersion")
> ### * readPackageVersion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readPkgVersion
> ### Title: readPkgVersion
> ### Aliases: readPkgVersion
> ### Keywords: utilities
> 
> ### ** Examples
> 
> readPkgVersion(package = "distr")
     Version
[1,] "2.2"  
> 
> 
> 
> cleanEx(); nameEx("readSourceFromRForge")
> ### * readSourceFromRForge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readSourceFromRForge
> ### Title: readSourceFromRForge
> ### Aliases: readSourceFromRForge
> ### Keywords: utilities
> 
> ### ** Examples
> 
> readSourceFromRForge("distr","R","AllClasses.R","distr")
   [1] "############# preparations ################"                                                                                            
   [2] "# (.onload, .onattach ...)"                                                                                                             
   [3] ".onLoad <- function(lib, pkg) { # extended 03-28-06: P.R. "                                                                             
   [4] "    require(\"methods\", character = TRUE, quietly = TRUE)"                                                                             
   [5] "}"                                                                                                                                      
   [6] ""                                                                                                                                       
   [7] ""                                                                                                                                       
   [8] ""                                                                                                                                       
   [9] ".onAttach <- function(library, pkg)"                                                                                                    
  [10] "{"                                                                                                                                      
  [11] "  unlockBinding(\".distroptions\", asNamespace(\"distr\"))"                                                                             
  [12] "## global variable needed for flat.R"                                                                                                   
  [13] "##  unlockBinding(\".OkTyp\", asNamespace(\"distr\"))"                                                                                  
  [14] "    msga <- gettext("                                                                                                                   
  [15] "    \"Attention: Arithmetics on distribution objects are understood as \""                                                              
  [16] "                   )"                                                                                                                   
  [17] "    msgb <- gettext("                                                                                                                   
  [18] "    \"operations on corresponding random variables (r.v.s); see distrARITH().\\n\""                                                     
  [19] "                   )"                                                                                                                   
  [20] "    msgc <- gettext("                                                                                                                   
  [21] "    \"Some functions from package 'stats' are intentionally masked ---see distrMASK().\\n\""                                            
  [22] "                   )"                                                                                                                   
  [23] "    msgd <- gettext("                                                                                                                   
  [24] "    \"Note that global options are controlled by distroptions() ---c.f. ?\\\"distroptions\\\".\""                                       
  [25] "                   )"                                                                                                                   
  [26] "buildStartupMessage(pkg = \"distr\", msga, msgb, msgc, msgd, library = library, "                                                       
  [27] "                    packageHelp = TRUE, "                                                                                               
  [28] "# MANUAL = \"http://www.uni-bayreuth.de/departments/math/org/mathe7/DISTR/distr.pdf\","                                                 
  [29] "                    VIGNETTE = gettext("                                                                                                
  [30] "\"Package \\\"distrDoc\\\" provides a vignette to this package as well as to several extension packages; try vignette(\\\"distr\\\").\""
  [31] "                                      )"                                                                                                
  [32] "                   )"                                                                                                                   
  [33] "  invisible()"                                                                                                                          
  [34] "} "                                                                                                                                     
  [35] ""                                                                                                                                       
  [36] "################################"                                                                                                       
  [37] "##"                                                                                                                                     
  [38] "## Optional..-classes"                                                                                                                  
  [39] "##"                                                                                                                                     
  [40] "################################"                                                                                                       
  [41] "setClassUnion(\"OptionalMatrix\", "                                                                                                     
  [42] "               c(\"matrix\",\"NULL\")"                                                                                                  
  [43] "               )"                                                                                                                       
  [44] ""                                                                                                                                       
  [45] "################################"                                                                                                       
  [46] "##"                                                                                                                                     
  [47] "## utility classes "                                                                                                                    
  [48] "##"                                                                                                                                     
  [49] "################################"                                                                                                       
  [50] ""                                                                                                                                       
  [51] "setClass(\"Integer\", contains =\"numeric\","                                                                                           
  [52] "          validity = function(object) all(.isInteger(object)))"                                                                         
  [53] ""                                                                                                                                       
  [54] "################################"                                                                                                       
  [55] "##"                                                                                                                                     
  [56] "## space classes "                                                                                                                      
  [57] "##"                                                                                                                                     
  [58] "################################"                                                                                                       
  [59] ""                                                                                                                                       
  [60] "## virtal Class: rSpace"                                                                                                                
  [61] "setClass(\"rSpace\", "                                                                                                                  
  [62] "          representation = representation(name = \"character\"), "                                                                      
  [63] "          prototype = prototype(name = gettext(\"a space\")), "                                                                         
  [64] "          contains = \"VIRTUAL\""                                                                                                       
  [65] "          )"                                                                                                                            
  [66] ""                                                                                                                                       
  [67] "## Class: EuclideanSpace"                                                                                                               
  [68] "setClass(\"EuclideanSpace\", "                                                                                                          
  [69] "          representation = representation(dimension = \"numeric\"), "                                                                   
  [70] "          contains = \"rSpace\","                                                                                                       
  [71] "          prototype = prototype(dimension = 1, "                                                                                        
  [72] "                                name = gettext(\"Euclidean Space\")"                                                                    
  [73] "                                )"                                                                                                      
  [74] "         )"                                                                                                                             
  [75] ""                                                                                                                                       
  [76] "## Class: Reals"                                                                                                                        
  [77] "setClass(\"Reals\",  "                                                                                                                  
  [78] "          contains = \"EuclideanSpace\""                                                                                                
  [79] "          )"                                                                                                                            
  [80] ""                                                                                                                                       
  [81] ""                                                                                                                                       
  [82] "## Class: Lattice"                                                                                                                      
  [83] "setClass(\"Lattice\", "                                                                                                                 
  [84] "          representation = representation(pivot = \"numeric\", width = \"numeric\", "                                                   
  [85] "                                          Length = \"numeric\""                                                                         
  [86] "### masking not possible here -> Length instead of length"                                                                              
  [87] "                                          ),"                                                                                           
  [88] "          prototype = prototype(pivot = 0, width = 1, Length = 2, "                                                                     
  [89] "                                name = gettext(\"a default lattice\")"                                                                  
  [90] "                                ),"                                                                                                     
  [91] "          contains = \"rSpace\""                                                                                                        
  [92] "         )"                                                                                                                             
  [93] ""                                                                                                                                       
  [94] "## Class: Naturals"                                                                                                                     
  [95] "setClass(\"Naturals\", "                                                                                                                
  [96] "          contains = \"Reals\""                                                                                                         
  [97] "          )"                                                                                                                            
  [98] ""                                                                                                                                       
  [99] "################################"                                                                                                       
 [100] "##"                                                                                                                                     
 [101] "## parameter classes"                                                                                                                   
 [102] "##"                                                                                                                                     
 [103] "################################"                                                                                                       
 [104] ""                                                                                                                                       
 [105] "setClass(\"Parameter\", "                                                                                                               
 [106] "          representation = representation(name = \"character\"), "                                                                      
 [107] "          prototype = prototype(name = gettext(\"a parameter\"))"                                                                       
 [108] "          )"                                                                                                                            
 [109] ""                                                                                                                                       
 [110] "setClassUnion(\"OptionalParameter\", "                                                                                                  
 [111] "               c(\"Parameter\",\"NULL\")"                                                                                               
 [112] "               )"                                                                                                                       
 [113] ""                                                                                                                                       
 [114] ""                                                                                                                                       
 [115] "## Class: ChisqParameter"                                                                                                               
 [116] "setClass(\"ChisqParameter\", "                                                                                                          
 [117] "          representation = representation(df = \"numeric\", ncp = \"numeric\"), "                                                       
 [118] "          prototype = prototype(df = 1, ncp = 0, "                                                                                      
 [119] "                      name = gettext(\"Parameter of a Chisq distribution\")"                                                            
 [120] "                      ), "                                                                                                              
 [121] "          contains = \"Parameter\""                                                                                                     
 [122] "          )"                                                                                                                            
 [123] ""                                                                                                                                       
 [124] "### Class: DiracParameter"                                                                                                              
 [125] "setClass(\"DiracParameter\", "                                                                                                          
 [126] "          representation = representation(location = \"numeric\"), "                                                                    
 [127] "          prototype = prototype(location = 0, "                                                                                         
 [128] "                      name = gettext(\"Parameter of a Dirac distribution\")"                                                            
 [129] "                      ), "                                                                                                              
 [130] "          contains = \"Parameter\""                                                                                                     
 [131] "          )"                                                                                                                            
 [132] ""                                                                                                                                       
 [133] "## Class: ExpParameter"                                                                                                                 
 [134] "setClass(\"ExpParameter\", "                                                                                                            
 [135] "          representation = representation(rate = \"numeric\"), "                                                                        
 [136] "          prototype = prototype(rate = 1, name = "                                                                                      
 [137] "                      gettext(\"Parameter of an Exponential distribution\")"                                                            
 [138] "                      ),  "                                                                                                             
 [139] "          contains = \"Parameter\""                                                                                                     
 [140] "          )"                                                                                                                            
 [141] ""                                                                                                                                       
 [142] "## Class: GammaParameter"                                                                                                               
 [143] "setClass(\"GammaParameter\", "                                                                                                          
 [144] "          representation = representation(shape = \"numeric\", scale = \"numeric\"), "                                                  
 [145] "          prototype = prototype(shape = 1, scale = 1, "                                                                                 
 [146] "                      name = gettext(\"Parameter of a Gamma distribution\")"                                                            
 [147] "                      ), "                                                                                                              
 [148] "          contains = \"Parameter\""                                                                                                     
 [149] "          )"                                                                                                                            
 [150] ""                                                                                                                                       
 [151] "## Class: PoisParameter"                                                                                                                
 [152] "setClass(\"PoisParameter\", "                                                                                                           
 [153] "          representation = representation(lambda = \"numeric\"), "                                                                      
 [154] "          prototype = prototype(lambda = 1, "                                                                                           
 [155] "                      name = gettext(\"Parameter of a Poisson distribution\")"                                                          
 [156] "                      ), "                                                                                                              
 [157] "          contains = \"Parameter\""                                                                                                     
 [158] "          )"                                                                                                                            
 [159] ""                                                                                                                                       
 [160] "## Class: NbinomParameter"                                                                                                              
 [161] "setClass(\"NbinomParameter\", "                                                                                                         
 [162] "          representation = representation(size = \"numeric\", prob = \"numeric\"), "                                                    
 [163] "          prototype = prototype(size = 1, prob = 0.5, name = "                                                                          
 [164] "                      gettext(\"Parameter of a Negative Binomial distribution\")"                                                       
 [165] "                      ), "                                                                                                              
 [166] "          contains = \"Parameter\""                                                                                                     
 [167] "          )"                                                                                                                            
 [168] ""                                                                                                                                       
 [169] "## Class: HyperParameter"                                                                                                               
 [170] "setClass(\"HyperParameter\", "                                                                                                          
 [171] "          representation = representation(m = \"numeric\", n = \"numeric\", "                                                           
 [172] "                                          k = \"numeric\""                                                                              
 [173] "                                          ), "                                                                                          
 [174] "          prototype = prototype(m = 1, n = 1, k = 1, name = "                                                                           
 [175] "                      gettext(\"Parameter of a Hypergeometric distribution\")"                                                          
 [176] "                      ), "                                                                                                              
 [177] "          contains = \"Parameter\""                                                                                                     
 [178] "          )"                                                                                                                            
 [179] ""                                                                                                                                       
 [180] "## Class: BinomParameter"                                                                                                               
 [181] "setClass(\"BinomParameter\", "                                                                                                          
 [182] "          representation = representation(size = \"numeric\", prob = \"numeric\"), "                                                    
 [183] "          prototype = prototype(size = 1, prob = 0.5, name = "                                                                          
 [184] "                      gettext(\"Parameter of a Binomial distribution\")"                                                                
 [185] "                      ), "                                                                                                              
 [186] "          contains = \"Parameter\""                                                                                                     
 [187] "          )"                                                                                                                            
 [188] ""                                                                                                                                       
 [189] "#-"                                                                                                                                     
 [190] "## no longer needed: this is a negBinom with size 1 no longer "                                                                         
 [191] "#-"                                                                                                                                     
 [192] "### !!! deprecated as of version 1.9 !!!"                                                                                               
 [193] "##"                                                                                                                                     
 [194] "## Class: GeomParameter   "                                                                                                             
 [195] "setClass(\"GeomParameter\", "                                                                                                           
 [196] "          representation = representation(prob = \"numeric\"), "                                                                        
 [197] "          prototype = prototype(prob = 0.5, name = "                                                                                    
 [198] "                      gettext(\"Parameter of a Geometric distribution\")"                                                               
 [199] "                      ), "                                                                                                              
 [200] "          contains = \"Parameter\""                                                                                                     
 [201] "          )"                                                                                                                            
 [202] "### !!! end of deprecated !!! "                                                                                                         
 [203] ""                                                                                                                                       
 [204] "## Class: CauchyParameter"                                                                                                              
 [205] "setClass(\"CauchyParameter\", "                                                                                                         
 [206] "          representation = representation(location = \"numeric\", "                                                                     
 [207] "                                          scale = \"numeric\""                                                                          
 [208] "                                          ), "                                                                                          
 [209] "          prototype = prototype(location = 0, scale = 1, name = "                                                                       
 [210] "                      gettext(\"Parameter of a Cauchy distribution\")"                                                                  
 [211] "                      ), "                                                                                                              
 [212] "          contains = \"Parameter\""                                                                                                     
 [213] "          )"                                                                                                                            
 [214] ""                                                                                                                                       
 [215] "## Class: NormParameter"                                                                                                                
 [216] "setClass(\"NormParameter\", "                                                                                                           
 [217] "          representation = representation(mean = \"numeric\", sd = \"vector\"), "                                                       
 [218] "          prototype = prototype(mean = 0, sd = 1, name = "                                                                              
 [219] "                      gettext(\"Parameter of a Normal distribution\")"                                                                  
 [220] "                      ), "                                                                                                              
 [221] "          contains = \"Parameter\""                                                                                                     
 [222] "          )"                                                                                                                            
 [223] ""                                                                                                                                       
 [224] "## Class: UniNormParameter"                                                                                                             
 [225] "setClass(\"UniNormParameter\", "                                                                                                        
 [226] "          prototype = prototype(name = "                                                                                                
 [227] "                      gettext(\"Parameter of a univariate Normal distribution\")"                                                       
 [228] "                      ), "                                                                                                              
 [229] "          contains = \"NormParameter\""                                                                                                 
 [230] "          )"                                                                                                                            
 [231] ""                                                                                                                                       
 [232] "## Class: UnifParameter"                                                                                                                
 [233] "setClass(\"UnifParameter\", "                                                                                                           
 [234] "          representation = representation(Min = \"numeric\", Max = \"numeric\"), "                                                      
 [235] "          prototype = prototype(Min = 0, Max = 1, name =  "                                                                             
 [236] "                      gettext(\"Parameter of a Uniform distribution\")"                                                                 
 [237] "                      ), "                                                                                                              
 [238] "          contains = \"Parameter\""                                                                                                     
 [239] "          )"                                                                                                                            
 [240] ""                                                                                                                                       
 [241] "## Class: FParameter"                                                                                                                   
 [242] "setClass(\"FParameter\", "                                                                                                              
 [243] "          representation = representation(df1 = \"numeric\", df2 = \"numeric\", "                                                       
 [244] "                                          ncp = \"numeric\""                                                                            
 [245] "                                          ), "                                                                                          
 [246] "          prototype = prototype(df1 = 1, df2 = 1, ncp = 0, name = "                                                                     
 [247] "                      gettext(\"Parameter of a Fisher-Snedecor/F distribution\")"                                                       
 [248] "                      ), "                                                                                                              
 [249] "          contains = \"Parameter\""                                                                                                     
 [250] "          )"                                                                                                                            
 [251] ""                                                                                                                                       
 [252] "## Class: TParameter"                                                                                                                   
 [253] "setClass(\"TParameter\", "                                                                                                              
 [254] "          representation = representation(df = \"numeric\", ncp = \"numeric\"), "                                                       
 [255] "          prototype = prototype(df = 1, ncp = 0, name = "                                                                               
 [256] "                      gettext(\"Parameter of a Student/T distribution\")"                                                               
 [257] "                      ), "                                                                                                              
 [258] "          contains = \"Parameter\""                                                                                                     
 [259] "          )"                                                                                                                            
 [260] ""                                                                                                                                       
 [261] "## Class: LNormParameter"                                                                                                               
 [262] "setClass(\"LnormParameter\", "                                                                                                          
 [263] "          representation = representation(meanlog = \"numeric\","                                                                       
 [264] "                                          sdlog = \"numeric\""                                                                          
 [265] "                                          ), "                                                                                          
 [266] "          prototype = prototype(meanlog = 0, meansd = 1, name =  "                                                                      
 [267] "                      gettext(\"Parameter of a Log-Normal distribution\")"                                                              
 [268] "                      ), "                                                                                                              
 [269] "          contains = \"Parameter\""                                                                                                     
 [270] "          )"                                                                                                                            
 [271] ""                                                                                                                                       
 [272] "## Class: BetaParameter"                                                                                                                
 [273] "setClass(\"BetaParameter\", "                                                                                                           
 [274] "          representation = representation(shape1 = \"numeric\", "                                                                       
 [275] "                                          shape2 = \"numeric\", ncp = \"numeric\""                                                      
 [276] "                                          ), "                                                                                          
 [277] "          prototype = prototype(shape1 = 1, shape2 = 1, ncp = 0, name = "                                                               
 [278] "                      gettext(\"Parameter of a Beta distribution\")"                                                                    
 [279] "                      ), "                                                                                                              
 [280] "          contains = \"Parameter\""                                                                                                     
 [281] "          )"                                                                                                                            
 [282] ""                                                                                                                                       
 [283] "## Class: LogisParameter"                                                                                                               
 [284] "setClass(\"LogisParameter\", "                                                                                                          
 [285] "          representation = representation(location = \"numeric\", "                                                                     
 [286] "                                          scale = \"numeric\""                                                                          
 [287] "                                          ), "                                                                                          
 [288] "          prototype = prototype(location = 0, scale = 1, name = "                                                                       
 [289] "                      gettext(\"Parameter of a Logistic distribution\")"                                                                
 [290] "                      ), "                                                                                                              
 [291] "          contains = \"Parameter\""                                                                                                     
 [292] "          )"                                                                                                                            
 [293] ""                                                                                                                                       
 [294] "## Class: WeibullParameter"                                                                                                             
 [295] "setClass(\"WeibullParameter\", "                                                                                                        
 [296] "          representation = representation(shape = \"numeric\", "                                                                        
 [297] "                                          scale = \"numeric\""                                                                          
 [298] "                                          ), "                                                                                          
 [299] "          prototype = prototype(shape = 1, scale = 1, name = "                                                                          
 [300] "                      gettext(\"Parameter of a Weibull distribution\")"                                                                 
 [301] "                      ), "                                                                                                              
 [302] "          contains = \"Parameter\""                                                                                                     
 [303] "          )"                                                                                                                            
 [304] ""                                                                                                                                       
 [305] "################################"                                                                                                       
 [306] "##"                                                                                                                                     
 [307] "## distribution classes"                                                                                                                
 [308] "##"                                                                                                                                     
 [309] "################################"                                                                                                       
 [310] ""                                                                                                                                       
 [311] "setClass(\"Distribution\","                                                                                                             
 [312] "          representation = representation("                                                                                             
 [313] "                      img = \"rSpace\","                                                                                                
 [314] "                      param = \"OptionalParameter\","                                                                                   
 [315] "                      r = \"function\","                                                                                                
 [316] "                      d = \"OptionalFunction\","                                                                                        
 [317] "                      p = \"OptionalFunction\","                                                                                        
 [318] "                      q = \"OptionalFunction\", # extended by P.R. 28-03-06"                                                            
 [319] "                      .withSim = \"logical\",   ## 'internal' slots => no"                                                              
 [320] "                      .withArith = \"logical\",  ## accessor/replacement functions"                                                     
 [321] "                      .logExact = \"logical\","                                                                                         
 [322] "                      .lowerExact = \"logical\""                                                                                        
 [323] "                      ),"                                                                                                               
 [324] "         prototype = prototype("                                                                                                        
 [325] "                     r = function(n){ rnorm(n, mean = 0, sd = 1) },"                                                                    
 [326] "                     d = function(x, log = FALSE)"                                                                                      
 [327] "                            { dnorm(x, mean = 0, sd = 1, log = log) },"                                                                 
 [328] "                     p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                                
 [329] "                             { pnorm(q, mean = 0, sd = 1,"                                                                              
 [330] "                                     lower.tail = lower.tail, log.p = log.p) },"                                                        
 [331] "                     q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                                
 [332] "                             { qnorm(p, mean = 0, sd = 1,"                                                                              
 [333] "                                     lower.tail = lower.tail, log.p = log.p) },"                                                        
 [334] "                     img = new(\"Reals\"),"                                                                                             
 [335] "                     param = NULL,"                                                                                                     
 [336] "                     .withArith = FALSE,"                                                                                               
 [337] "                     .withSim = FALSE,"                                                                                                 
 [338] "                     .logExact = FALSE,"                                                                                                
 [339] "                     .lowerExact = FALSE"                                                                                               
 [340] "                     )"                                                                                                                 
 [341] "         )"                                                                                                                             
 [342] ""                                                                                                                                       
 [343] "## Class: UnivariateDistribution"                                                                                                       
 [344] "setClass(\"UnivariateDistribution\",  "                                                                                                 
 [345] "          contains = \"Distribution\""                                                                                                  
 [346] "          )"                                                                                                                            
 [347] ""                                                                                                                                       
 [348] "### ---- absolutely continuous distributions ---- ###"                                                                                  
 [349] ""                                                                                                                                       
 [350] "## AbscontDistribution"                                                                                                                 
 [351] "setClass(\"AbscontDistribution\", "                                                                                                     
 [352] "          representation = representation(gaps = \"OptionalMatrix\"),"                                                                  
 [353] "          prototype = prototype(gaps = NULL),"                                                                                          
 [354] "          contains = \"UnivariateDistribution\""                                                                                        
 [355] "          )"                                                                                                                            
 [356] ""                                                                                                                                       
 [357] ""                                                                                                                                       
 [358] ""                                                                                                                                       
 [359] "## inbetween-Class: ExpOrGammaOrChisq"                                                                                                  
 [360] ""                                                                                                                                       
 [361] "#not quite virtual ..."                                                                                                                 
 [362] "setClass(\"ExpOrGammaOrChisq\", "                                                                                                       
 [363] "          contains = c(\"AbscontDistribution\", \"VIRTUAL\")"                                                                           
 [364] "          )"                                                                                                                            
 [365] ""                                                                                                                                       
 [366] ""                                                                                                                                       
 [367] "## Class: exponential distribution"                                                                                                     
 [368] "setClass(\"Exp\","                                                                                                                      
 [369] "          prototype = prototype("                                                                                                       
 [370] "                      r = function(n){ rexp(n, rate = 1) },"                                                                            
 [371] "                      d = function(x, log = FALSE)"                                                                                     
 [372] "                                  { dexp(x, rate = 1, log = log) },"                                                                    
 [373] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [374] "                                  { pexp(q, rate = 1, lower.tail = lower.tail,"                                                         
 [375] "                                         log.p = log.p) },"                                                                             
 [376] "                      q = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [377] "                                  { qexp(p, rate = 1, lower.tail = lower.tail,"                                                         
 [378] "                                         log.p = log.p) },"                                                                             
 [379] "                      param = new(\"ExpParameter\"),"                                                                                   
 [380] "                     .logExact = TRUE,"                                                                                                 
 [381] "                     .lowerExact = TRUE"                                                                                                
 [382] "                      ),"                                                                                                               
 [383] "          contains = \"ExpOrGammaOrChisq\""                                                                                             
 [384] "          )"                                                                                                                            
 [385] ""                                                                                                                                       
 [386] "## Class: gamma distribution"                                                                                                           
 [387] "setClass(\"Gammad\","                                                                                                                   
 [388] "          prototype = prototype("                                                                                                       
 [389] "                      r = function(n){ rgamma(n, shape = 1, scale = 1) },"                                                              
 [390] "                      d = function(x, log = FALSE){"                                                                                    
 [391] "                              dgamma(x, shape = 1, scale = 1, log = log)"                                                               
 [392] "                                          },"                                                                                           
 [393] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [394] "                              pgamma(q, shape = 1, scale = 1,"                                                                          
 [395] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [396] "                                          },"                                                                                           
 [397] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [398] "                              qgamma(p, shape = 1, scale = 1,"                                                                          
 [399] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [400] "                                          },"                                                                                           
 [401] "                      param = new(\"GammaParameter\"),"                                                                                 
 [402] "                     .logExact = TRUE,"                                                                                                 
 [403] "                     .lowerExact = TRUE"                                                                                                
 [404] "                      ),"                                                                                                               
 [405] "          contains = \"ExpOrGammaOrChisq\""                                                                                             
 [406] "          )"                                                                                                                            
 [407] ""                                                                                                                                       
 [408] "## Class: Chi squared distribution"                                                                                                     
 [409] "setClass(\"Chisq\","                                                                                                                    
 [410] "          prototype = prototype("                                                                                                       
 [411] "                      r = function(n){ rchisq(n, df = 1, ncp = 0) },"                                                                   
 [412] "                      d = function(x, log = FALSE)"                                                                                     
 [413] "                                  { dchisq(x, df = 1, ncp = 0, log = log) },"                                                           
 [414] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [415] "                                  { pchisq(q, df = 1, ncp = 0,"                                                                         
 [416] "                                           lower.tail = lower.tail,"                                                                    
 [417] "                                           log.p = log.p) },"                                                                           
 [418] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [419] "                                  { qchisq(p, df = 1, ncp = 0,"                                                                         
 [420] "                                           lower.tail = lower.tail,"                                                                    
 [421] "                                           log.p = log.p) },"                                                                           
 [422] "                      param = new(\"ChisqParameter\"),"                                                                                 
 [423] "                     .logExact = TRUE,"                                                                                                 
 [424] "                     .lowerExact = TRUE"                                                                                                
 [425] "                      ),"                                                                                                               
 [426] "          contains = \"ExpOrGammaOrChisq\""                                                                                             
 [427] "          )"                                                                                                                            
 [428] ""                                                                                                                                       
 [429] "## Class: Laplace or Double Exponential distribution"                                                                                   
 [430] "setClass(\"DExp\","                                                                                                                     
 [431] "          prototype = prototype("                                                                                                       
 [432] "                      r = function(n){"                                                                                                 
 [433] "                              (2*rbinom(n ,size = 1, prob = 0.5)-1) *"                                                                  
 [434] "                                 rexp(n, rate = 1)"                                                                                     
 [435] "                              },"                                                                                                       
 [436] "                      d = function(x, log = FALSE)"                                                                                     
 [437] "                              { d0 <-  dexp(abs(x), rate = 1, log = log)"                                                               
 [438] "                                d0 <- if (log) d0-log(2) else d0 <- d0 / 2"                                                             
 [439] "                                return(d0) },"                                                                                          
 [440] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [441] "                                   if (!lower.tail) q <- -q"                                                                            
 [442] "                                   p0 <- ifelse( q <= 0,"                                                                               
 [443] "                                                 0.5*pexp(-q, rate = 1,"                                                                
 [444] "                                                          lower.tail = FALSE),"                                                         
 [445] "                                                 0.5 + 0.5*pexp( q, rate = 1)"                                                          
 [446] "                                                    )"                                                                                  
 [447] "                                   if (log.p)  p0 <- log(p0)"                                                                           
 [448] "                                   return(p0)"                                                                                          
 [449] "                                   },"                                                                                                  
 [450] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [451] "                              if (log.p) p <- exp(p)"                                                                                   
 [452] "                              if (!lower.tail) p <- 1-p"                                                                                
 [453] "                              ifelse( p <= 0.25,"                                                                                       
 [454] "                                  -qexp(2*p, rate = 1, lower.tail = FALSE),"                                                            
 [455] "                                  ifelse( p <= 0.5,"                                                                                    
 [456] "                                      -qexp(1-2*p, rate = 1),"                                                                          
 [457] "                                      ifelse( p <= 0.75   ,"                                                                            
 [458] "                                          qexp(2*p - 1, rate = 1),"                                                                     
 [459] "                                          qexp(2*(1-p), rate = 1,"                                                                      
 [460] "                                               lower.tail = FALSE)"                                                                     
 [461] "                                            )"                                                                                          
 [462] "                                         )"                                                                                             
 [463] "                                     )},"                                                                                               
 [464] "                      param = new(\"ExpParameter\", name ="                                                                             
 [465] "                      gettext(\"Parameter of a Laplace/Double Exponential distribution\")"                                              
 [466] "                                 ),"                                                                                                    
 [467] "                     .logExact = TRUE,"                                                                                                 
 [468] "                     .lowerExact = TRUE"                                                                                                
 [469] "                      ),"                                                                                                               
 [470] "          contains = \"AbscontDistribution\""                                                                                           
 [471] "          )"                                                                                                                            
 [472] ""                                                                                                                                       
 [473] "## Class: CauchyDistribution"                                                                                                           
 [474] "setClass(\"Cauchy\","                                                                                                                   
 [475] "          prototype = prototype("                                                                                                       
 [476] "                      r = function(n){ rcauchy(n,  location = 0, scale = 1) },"                                                         
 [477] "                      d = function(x, log = FALSE){"                                                                                    
 [478] "                              dcauchy(x,  location = 0, scale = 1, log = log)"                                                          
 [479] "                                          },"                                                                                           
 [480] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [481] "                              pcauchy(q,  location = 0, scale = 1,"                                                                     
 [482] "                                      lower.tail = lower.tail, log.p = log.p)"                                                          
 [483] "                                          },"                                                                                           
 [484] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [485] "                              qcauchy(p,  location = 0, scale = 1,"                                                                     
 [486] "                                      lower.tail = lower.tail, log.p = log.p)"                                                          
 [487] "                                          },"                                                                                           
 [488] "                      param = new(\"CauchyParameter\"),"                                                                                
 [489] "                     .logExact = TRUE,"                                                                                                 
 [490] "                     .lowerExact = TRUE"                                                                                                
 [491] "                      ),"                                                                                                               
 [492] "          contains = \"AbscontDistribution\""                                                                                           
 [493] "          )"                                                                                                                            
 [494] ""                                                                                                                                       
 [495] "## Class: normal distribution"                                                                                                          
 [496] "setClass(\"Norm\","                                                                                                                     
 [497] "          prototype = prototype("                                                                                                       
 [498] "                      r = function(n){ rnorm(n, mean = 0, sd = 1) },"                                                                   
 [499] "                      d = function(x, log = FALSE)"                                                                                     
 [500] "                              { dnorm(x, mean = 0, sd = 1, log = log) },"                                                               
 [501] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [502] "                              { pnorm(q, mean = 0, sd = 1,"                                                                             
 [503] "                                      lower.tail = lower.tail, log.p = log.p) },"                                                       
 [504] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [505] "                              { qnorm(p, mean = 0, sd = 1,"                                                                             
 [506] "                                      lower.tail = lower.tail, log.p = log.p) },"                                                       
 [507] "                      param = new(\"UniNormParameter\"),"                                                                               
 [508] "                     .logExact = TRUE,"                                                                                                 
 [509] "                     .lowerExact = TRUE"                                                                                                
 [510] "                      ),"                                                                                                               
 [511] "          contains = \"AbscontDistribution\""                                                                                           
 [512] "          )"                                                                                                                            
 [513] ""                                                                                                                                       
 [514] "## Class: lognormal distribution"                                                                                                       
 [515] "setClass(\"Lnorm\","                                                                                                                    
 [516] "          prototype = prototype("                                                                                                       
 [517] "                      r = function(n){ rlnorm(n, meanlog = 0, sdlog = 1) },"                                                            
 [518] "                      d = function(x, log = FALSE){"                                                                                    
 [519] "                              dlnorm(x, meanlog = 0, sdlog = 1, log = log)"                                                             
 [520] "                                          },"                                                                                           
 [521] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [522] "                              plnorm(q, meanlog = 0, sdlog = 1,"                                                                        
 [523] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [524] "                                          },"                                                                                           
 [525] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [526] "                              qlnorm(p, meanlog = 0, sdlog = 1,"                                                                        
 [527] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [528] "                                          },"                                                                                           
 [529] "                      param = new(\"LnormParameter\"),"                                                                                 
 [530] "                     .logExact = TRUE,"                                                                                                 
 [531] "                     .lowerExact = TRUE"                                                                                                
 [532] "                      ),"                                                                                                               
 [533] "          contains = \"AbscontDistribution\""                                                                                           
 [534] "          )"                                                                                                                            
 [535] ""                                                                                                                                       
 [536] "## Class: uniform distribution"                                                                                                         
 [537] "setClass(\"Unif\","                                                                                                                     
 [538] "          prototype = prototype("                                                                                                       
 [539] "                      r = function(n){ runif(n, min = 0, max = 1) },"                                                                   
 [540] "                      d = function(x, log = FALSE)"                                                                                     
 [541] "                              { dunif(x,  min = 0, max = 1, log = log) },"                                                              
 [542] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [543] "                              { punif(q,  min = 0, max = 1,"                                                                            
 [544] "                                      lower.tail = lower.tail, log.p = log.p) },"                                                       
 [545] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [546] "                              { qunif(p,  min = 0, max = 1,"                                                                            
 [547] "                                      lower.tail = lower.tail, log.p = log.p) },"                                                       
 [548] "                      param = new(\"UnifParameter\"),"                                                                                  
 [549] "                     .logExact = TRUE,"                                                                                                 
 [550] "                     .lowerExact = TRUE"                                                                                                
 [551] "                      ),"                                                                                                               
 [552] "          contains = \"AbscontDistribution\""                                                                                           
 [553] "          )"                                                                                                                            
 [554] ""                                                                                                                                       
 [555] "## Class: F distribution"                                                                                                               
 [556] "setClass(\"Fd\","                                                                                                                       
 [557] "          prototype = prototype("                                                                                                       
 [558] "                      r = function(n){ rf(n,  df1 = 1, df2 = 1, ncp = 0) },"                                                            
 [559] "                      d = function(x, log = FALSE){"                                                                                    
 [560] "                              df(x, df1 = 1, df2 = 1, ncp = 0, log = log)"                                                              
 [561] "                                          },"                                                                                           
 [562] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [563] "                              pf(q, df1 = 1, df2 = 1, ncp = 0,"                                                                         
 [564] "                                 lower.tail = lower.tail, log.p = log.p)"                                                               
 [565] "                                          },"                                                                                           
 [566] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [567] "                              qf(p, df1 = 1, df2 = 1, ncp = 0,"                                                                         
 [568] "                                 lower.tail = lower.tail, log.p = log.p)"                                                               
 [569] "                                          },"                                                                                           
 [570] "                      param = new(\"FParameter\"),"                                                                                     
 [571] "                     .logExact = TRUE,"                                                                                                 
 [572] "                     .lowerExact = TRUE"                                                                                                
 [573] "                      ),"                                                                                                               
 [574] "          contains = \"AbscontDistribution\""                                                                                           
 [575] "          )"                                                                                                                            
 [576] ""                                                                                                                                       
 [577] "## Class: Student distribution"                                                                                                         
 [578] "setClass(\"Td\","                                                                                                                       
 [579] "          prototype = prototype("                                                                                                       
 [580] "                      r = function(n){ rt(n,  df = 1, ncp = 0) },"                                                                      
 [581] "                      d = function(x, log = FALSE)"                                                                                     
 [582] "                              { dt(x,  df = 1, ncp = 0, log = log) },"                                                                  
 [583] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [584] "                              { pt(q,  df = 1, ncp = 0,"                                                                                
 [585] "                                   lower.tail = lower.tail, log.p = log.p) },"                                                          
 [586] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [587] "                              { qt(p,  df = 1, ncp = 0,"                                                                                
 [588] "                                   lower.tail = lower.tail, log.p = log.p) },"                                                          
 [589] "                      param = new(\"TParameter\"),"                                                                                     
 [590] "                     .logExact = TRUE,"                                                                                                 
 [591] "                     .lowerExact = TRUE"                                                                                                
 [592] "                      ),"                                                                                                               
 [593] "          contains = \"AbscontDistribution\""                                                                                           
 [594] "          )"                                                                                                                            
 [595] ""                                                                                                                                       
 [596] ""                                                                                                                                       
 [597] "## Class: logistic distribution"                                                                                                        
 [598] "setClass(\"Logis\","                                                                                                                    
 [599] "          prototype = prototype("                                                                                                       
 [600] "                      r = function(n){ rlogis(n, location = 0, scale = 1) },"                                                           
 [601] "                      d = function(x, log = FALSE){"                                                                                    
 [602] "                              dlogis(x, location = 0, scale = 1, log = log)"                                                            
 [603] "                                          },"                                                                                           
 [604] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [605] "                              plogis(q, location = 0, scale = 1,"                                                                       
 [606] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [607] "                                          },"                                                                                           
 [608] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [609] "                              qlogis(p, location = 0, scale = 1,"                                                                       
 [610] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [611] "                                          },"                                                                                           
 [612] "                      param = new(\"LogisParameter\"),"                                                                                 
 [613] "                     .logExact = TRUE,"                                                                                                 
 [614] "                     .lowerExact = TRUE"                                                                                                
 [615] "                      ),"                                                                                                               
 [616] "          contains = \"AbscontDistribution\""                                                                                           
 [617] "          )"                                                                                                                            
 [618] ""                                                                                                                                       
 [619] "## Class: BetaDistribution"                                                                                                             
 [620] "setClass(\"Beta\","                                                                                                                     
 [621] "          prototype = prototype("                                                                                                       
 [622] "                      r = function(n){"                                                                                                 
 [623] "                              rbeta(n,  shape1 = 1, shape2 = 1, ncp = 0)"                                                               
 [624] "                                     },"                                                                                                
 [625] "                      d = function(x, log = FALSE){"                                                                                    
 [626] "                              dbeta(x,  shape1 = 1, shape2 = 1, ncp = 0,"                                                               
 [627] "                                    lower.tail = lower.tail, log.p = log.p)"                                                            
 [628] "                                          },"                                                                                           
 [629] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [630] "                              pbeta(q,  shape1 = 1, shape2 = 1, ncp = 0,"                                                               
 [631] "                                    lower.tail = lower.tail, log.p = log.p)"                                                            
 [632] "                                          },"                                                                                           
 [633] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [634] "                              qbeta(p,  shape1 = 1, shape2 = 1, ncp = 0,"                                                               
 [635] "                                    lower.tail = lower.tail, log.p = log.p)"                                                            
 [636] "                                          },"                                                                                           
 [637] "                      param = new(\"BetaParameter\"),"                                                                                  
 [638] "                     .logExact = TRUE,"                                                                                                 
 [639] "                     .lowerExact = TRUE"                                                                                                
 [640] "                      ),"                                                                                                               
 [641] "          contains = \"AbscontDistribution\""                                                                                           
 [642] "          )"                                                                                                                            
 [643] ""                                                                                                                                       
 [644] "## Class: Weibull distribution"                                                                                                         
 [645] "setClass(\"Weibull\","                                                                                                                  
 [646] "          prototype = prototype("                                                                                                       
 [647] "                      r = function(n){ rweibull(n, shape = 1, scale = 1) },"                                                            
 [648] "                      d = function(x, log = FALSE){"                                                                                    
 [649] "                              dweibull(x, shape = 1, scale = 1, log = log)"                                                             
 [650] "                                          },"                                                                                           
 [651] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [652] "                              pweibull(q, shape = 1, scale = 1,"                                                                        
 [653] "                                       lower.tail = lower.tail, log.p = log.p)"                                                         
 [654] "                                          },"                                                                                           
 [655] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [656] "                              qweibull(p, shape = 1, scale = 1,"                                                                        
 [657] "                                       lower.tail = lower.tail, log.p = log.p)"                                                         
 [658] "                                          },"                                                                                           
 [659] "                      param = new(\"WeibullParameter\"),"                                                                               
 [660] "                     .logExact = TRUE,"                                                                                                 
 [661] "                     .lowerExact = TRUE"                                                                                                
 [662] "                      ),"                                                                                                               
 [663] "          contains = \"AbscontDistribution\""                                                                                           
 [664] "          )"                                                                                                                            
 [665] ""                                                                                                                                       
 [666] "## Class: Arcsine distribution"                                                                                                         
 [667] "setClass(\"Arcsine\","                                                                                                                  
 [668] "          prototype = prototype("                                                                                                       
 [669] "                      r = function(n){ sin((runif(n)-.5)*pi) },"                                                                        
 [670] "                      d = function(x, log = FALSE){"                                                                                    
 [671] "                              x0 <- (abs(x)<1-.Machine$double.eps)"                                                                     
 [672] "                              x1 <- x^2*x0"                                                                                             
 [673] "                              d <-  x0/sqrt(1-x1)/pi"                                                                                   
 [674] "                              d[.isEqual(abs(x),1)] <- Inf"                                                                             
 [675] "                              if(log) d<- log(d)"                                                                                       
 [676] "                              return(d)},"                                                                                              
 [677] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [678] "                              if(!lower.tail) q<- -q"                                                                                   
 [679] "                              q <- pmin(pmax(q,-1),1)"                                                                                  
 [680] "                              p <- asin(q)/pi+1/2"                                                                                      
 [681] "                              if(log.p) p <- log(p)"                                                                                    
 [682] "                              return(p)},"                                                                                              
 [683] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [684] "                              if(log.p) p <- exp(p)"                                                                                    
 [685] "                              p1 <- p"                                                                                                  
 [686] "                              p1[p<0|p>1] <- 0.5"                                                                                       
 [687] "                              if(!lower.tail) p1 <- 1-p1"                                                                               
 [688] "                              q <- sin( (p1-1/2)*pi)"                                                                                   
 [689] "                              q[p<0|p>1] <- NA"                                                                                         
 [690] "                              q[.isEqual(p,0)] <- -1"                                                                                   
 [691] "                              q[.isEqual(p,1)] <-  1"                                                                                   
 [692] "                              return(q)},"                                                                                              
 [693] "                     .logExact = TRUE,"                                                                                                 
 [694] "                     .lowerExact = TRUE"                                                                                                
 [695] "                      ),"                                                                                                               
 [696] "          contains = \"AbscontDistribution\""                                                                                           
 [697] "          )"                                                                                                                            
 [698] ""                                                                                                                                       
 [699] ""                                                                                                                                       
 [700] "## inbetween-Class: AffLinAbscontDistribution"                                                                                          
 [701] ""                                                                                                                                       
 [702] "setClass(\"AffLinAbscontDistribution\", "                                                                                               
 [703] "          representation = representation(a = \"numeric\", b = \"numeric\","                                                            
 [704] "          X0 = \"AbscontDistribution\"),"                                                                                               
 [705] "          prototype = prototype(a = 1, b = 0, X0 = new(\"Norm\")),"                                                                     
 [706] "          contains = \"AbscontDistribution\""                                                                                           
 [707] "          )"                                                                                                                            
 [708] ""                                                                                                                                       
 [709] "### ---- discrete distributions ---- ###"                                                                                               
 [710] ""                                                                                                                                       
 [711] "## DiscreteDistribution"                                                                                                                
 [712] "setClass(\"DiscreteDistribution\", "                                                                                                    
 [713] "          representation = representation(support = \"numeric\"),"                                                                      
 [714] "          prototype = prototype("                                                                                                       
 [715] "                      r = function(n){ rbinom(n, size=1, prob=0.5) },"                                                                  
 [716] "                      d = function(x, log = FALSE)"                                                                                     
 [717] "                              { dbinom(x, size=1, prob=0.5, log = log) },"                                                              
 [718] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [719] "                              { pbinom(q, size=1, prob=0.5, "                                                                           
 [720] "                                       lower.tail = lower.tail, log.p = log.p) },"                                                      
 [721] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [722] "                              { qbinom(p, size=1, prob=0.5, "                                                                           
 [723] "                                       lower.tail = lower.tail, log.p = log.p) },"                                                      
 [724] "                      img = new(\"Reals\"),"                                                                                            
 [725] "                      support = 0:1 "                                                                                                   
 [726] "                      ), "                                                                                                              
 [727] "          contains = \"UnivariateDistribution\""                                                                                        
 [728] "          )"                                                                                                                            
 [729] ""                                                                                                                                       
 [730] "## LatticeDistribution"                                                                                                                 
 [731] "setClass(\"LatticeDistribution\", "                                                                                                     
 [732] "          representation = representation(lattice = \"Lattice\"),"                                                                      
 [733] "          prototype = prototype(lattice = new(\"Lattice\")),"                                                                           
 [734] "          contains = \"DiscreteDistribution\""                                                                                          
 [735] "          )"                                                                                                                            
 [736] ""                                                                                                                                       
 [737] ""                                                                                                                                       
 [738] "### Class: Dirac distribution"                                                                                                          
 [739] "setClass(\"Dirac\","                                                                                                                    
 [740] "          prototype = prototype("                                                                                                       
 [741] "                      r = function(n){ array(0, n)},"                                                                                   
 [742] "                      d = function(x, log)"                                                                                             
 [743] "                              { y <- rep(0,length(x))"                                                                                  
 [744] "                                d0 <- as.numeric(x == y)"                                                                               
 [745] "                                if(log) d0 <- log(d0)"                                                                                  
 [746] "                                return(d0)"                                                                                             
 [747] "                              },"                                                                                                       
 [748] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [749] "                              { p0 <- as.numeric(q + 10^-10 >= 0)"                                                                      
 [750] "                                if (!lower.tail) p0 <- 1-p0"                                                                            
 [751] "                                if (log.p) p0 <- log(p0)"                                                                               
 [752] "                                return(p0)"                                                                                             
 [753] "                              },"                                                                                                       
 [754] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [755] "                             {  if (log.p) p <- exp(p)"                                                                                 
 [756] "                                if(any((p < 0)|(p > 1)))"                                                                               
 [757] "                                   warning(\"q Method of class Dirac produced NaN's.\")"                                                
 [758] "                                q0 <- 0 * p"                                                                                            
 [759] "                                q0[(p<0) | (p>1)] <- NaN"                                                                               
 [760] "                                return(q0)"                                                                                             
 [761] "                              },"                                                                                                       
 [762] "                      param = new(\"DiracParameter\"),"                                                                                 
 [763] "                      support = 0,"                                                                                                     
 [764] "                      lattice = new(\"Lattice\","                                                                                       
 [765] "                                pivot = 0, width = 1, Length = 1, name ="                                                               
 [766] "                                gettext(\"lattice of a Dirac distribution\")"                                                           
 [767] "                                ),"                                                                                                     
 [768] "                     .logExact = TRUE,"                                                                                                 
 [769] "                     .lowerExact = TRUE"                                                                                                
 [770] "                      ),"                                                                                                               
 [771] "          contains = \"LatticeDistribution\""                                                                                           
 [772] "          )"                                                                                                                            
 [773] ""                                                                                                                                       
 [774] "## Class: Poisson distribution"                                                                                                         
 [775] "setClass(\"Pois\","                                                                                                                     
 [776] "          prototype = prototype("                                                                                                       
 [777] "                      r = function(n){ rpois(n, lambda = 1) },"                                                                         
 [778] "                      d = function(x, log = FALSE)"                                                                                     
 [779] "                              { dpois(x, lambda = 1, log = log) },"                                                                     
 [780] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [781] "                              { ppois(q, lambda = 1, lower.tail = lower.tail,"                                                          
 [782] "                                      log.p = log.p) },"                                                                                
 [783] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [784] "                              { qpois(p, lambda = 1, lower.tail = lower.tail,"                                                          
 [785] "                                      log.p = log.p) },"                                                                                
 [786] "                      img = new(\"Naturals\"),"                                                                                         
 [787] "                      param = new(\"PoisParameter\"),"                                                                                  
 [788] "                      support = seq( 0,"                                                                                                
 [789] "                                     qpois(getdistrOption(\"TruncQuantile\"),"                                                          
 [790] "                                           lambda = 1, lower.tail = FALSE),"                                                            
 [791] "                                     by = 1"                                                                                            
 [792] "                                    ),"                                                                                                 
 [793] "                      lattice = new(\"Lattice\","                                                                                       
 [794] "                                pivot = 0, width = 1, Length = Inf, name ="                                                             
 [795] "                                gettext(\"lattice of a Poisson distribution\")"                                                         
 [796] "                                ),"                                                                                                     
 [797] "                     .logExact = TRUE,"                                                                                                 
 [798] "                     .lowerExact = TRUE"                                                                                                
 [799] "                      ),"                                                                                                               
 [800] "          contains = \"LatticeDistribution\""                                                                                           
 [801] "          )"                                                                                                                            
 [802] ""                                                                                                                                       
 [803] "## Class: negative binomial distribution"                                                                                               
 [804] "setClass(\"Nbinom\","                                                                                                                   
 [805] "          prototype = prototype("                                                                                                       
 [806] "                      r = function(n){ rnbinom(n, size = 1, prob = 0.5) },"                                                             
 [807] "                      d = function(x, log = FALSE){"                                                                                    
 [808] "                              dnbinom(x, size = 1, prob = 0.5, log = log)"                                                              
 [809] "                                          },"                                                                                           
 [810] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [811] "                              pnbinom(q, size = 1, prob = 0.5,"                                                                         
 [812] "                                      lower.tail = lower.tail, log.p = log.p)"                                                          
 [813] "                                          },"                                                                                           
 [814] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [815] "                              qnbinom(p, size = 1, prob = 0.5,"                                                                         
 [816] "                                      lower.tail = lower.tail, log.p = log.p)"                                                          
 [817] "                                          },"                                                                                           
 [818] "                      img = new(\"Naturals\"),"                                                                                         
 [819] "                      param = new(\"NbinomParameter\"),"                                                                                
 [820] "                      support = seq( 0,"                                                                                                
 [821] "                                     qnbinom("                                                                                          
 [822] "                                        getdistrOption(\"TruncQuantile\"),"                                                             
 [823] "                                        size = 1, prob = 0.5, lower.tail = FALSE"                                                       
 [824] "                                            ),"                                                                                         
 [825] "                                     by = 1"                                                                                            
 [826] "                                     ),"                                                                                                
 [827] "                      lattice = new(\"Lattice\","                                                                                       
 [828] "                                pivot = 0, width = 1, Length = Inf, name ="                                                             
 [829] "                                gettext("                                                                                               
 [830] "                                  \"lattice of a Negative Binomial distribution\""                                                      
 [831] "                                       )"                                                                                               
 [832] "                                ),"                                                                                                     
 [833] "                     .logExact = TRUE,"                                                                                                 
 [834] "                     .lowerExact = TRUE"                                                                                                
 [835] "                      ),"                                                                                                               
 [836] "          contains = \"LatticeDistribution\""                                                                                           
 [837] "          )"                                                                                                                            
 [838] ""                                                                                                                                       
 [839] "## Class: hypergeometric distribution"                                                                                                  
 [840] "setClass(\"Hyper\","                                                                                                                    
 [841] "          prototype = prototype("                                                                                                       
 [842] "                      r = function(nn){ rhyper(nn, m = 1, n = 1, k = 1) },"                                                             
 [843] "                      d = function(x, log = FALSE){"                                                                                    
 [844] "                              dhyper(x, m = 1, n = 1, k = 1, log = log)"                                                                
 [845] "                                          },"                                                                                           
 [846] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [847] "                              phyper(q, m = 1, n = 1, k = 1,"                                                                           
 [848] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [849] "                                          },"                                                                                           
 [850] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [851] "                              qhyper(p, m = 1, n = 1, k = 1,"                                                                           
 [852] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [853] "                                          },"                                                                                           
 [854] "                      img = new(\"Naturals\"),"                                                                                         
 [855] "                      param = new(\"HyperParameter\"),"                                                                                 
 [856] "                      support = 0:1,"                                                                                                   
 [857] "                      lattice = new(\"Lattice\","                                                                                       
 [858] "                                pivot = 0, width = 1, Length = 2, name ="                                                               
 [859] "                                gettext("                                                                                               
 [860] "                                  \"lattice of a Hypergeometric distribution\""                                                         
 [861] "                                       )"                                                                                               
 [862] "                                ),"                                                                                                     
 [863] "                     .logExact = TRUE,"                                                                                                 
 [864] "                     .lowerExact = TRUE"                                                                                                
 [865] "                      ),"                                                                                                               
 [866] "          contains = \"LatticeDistribution\""                                                                                           
 [867] "          )"                                                                                                                            
 [868] ""                                                                                                                                       
 [869] "## Class: binomial distribution"                                                                                                        
 [870] "setClass(\"Binom\","                                                                                                                    
 [871] "          prototype = prototype("                                                                                                       
 [872] "                      r = function(n){ rbinom(n, size = 1,prob = 0.5) },"                                                               
 [873] "                      d = function(x, log = FALSE){"                                                                                    
 [874] "                              dbinom(x, size = 1, prob = 0.5, log = log)"                                                               
 [875] "                                          },"                                                                                           
 [876] "                      p = function(q, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [877] "                              pbinom(q, size = 1, prob = 0.5,"                                                                          
 [878] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [879] "                                          },"                                                                                           
 [880] "                      q = function(p, lower.tail = TRUE, log.p = FALSE ){"                                                              
 [881] "                              qbinom(p, size = 1, prob = 0.5,"                                                                          
 [882] "                                     lower.tail = lower.tail, log.p = log.p)"                                                           
 [883] "                                          },"                                                                                           
 [884] "                      img = new(\"Naturals\"),"                                                                                         
 [885] "                      param = new(\"BinomParameter\"),"                                                                                 
 [886] "                      support = 0:1,"                                                                                                   
 [887] "                      lattice = new(\"Lattice\","                                                                                       
 [888] "                                pivot = 0, width = 1, Length = 2, name ="                                                               
 [889] "                                gettext("                                                                                               
 [890] "                                  \"lattice of a Binomial distribution\""                                                               
 [891] "                                       )"                                                                                               
 [892] "                                ),"                                                                                                     
 [893] "                     .logExact = TRUE,"                                                                                                 
 [894] "                     .lowerExact = TRUE"                                                                                                
 [895] "                      ),"                                                                                                               
 [896] "          contains = \"LatticeDistribution\""                                                                                           
 [897] "          )"                                                                                                                            
 [898] ""                                                                                                                                       
 [899] "## Class: geometric distribution"                                                                                                       
 [900] "setClass(\"Geom\","                                                                                                                     
 [901] "          prototype = prototype("                                                                                                       
 [902] "                      r = function(n){ rgeom(n, prob = 0.5) },"                                                                         
 [903] "                      d = function(x, log = FALSE)"                                                                                     
 [904] "                              { dgeom(x, prob = 0.5, log = log) },"                                                                     
 [905] "                      p = function(q, lower.tail = TRUE, log.p = FALSE )"                                                               
 [906] "                              { pgeom(q, prob = 0.5, lower.tail = lower.tail,"                                                          
 [907] "                                      log.p = log.p) },"                                                                                
 [908] "                      q = function(p, lower.tail = TRUE, log.p = FALSE )"                                                               
 [909] "                              { qgeom(p, prob = 0.5, lower.tail = lower.tail,"                                                          
 [910] "                                      log.p = log.p) },"                                                                                
 [911] "                      param = new(\"NbinomParameter\", name ="                                                                          
 [912] "                              gettext(\"Parameter of a Geometric distribution\")"                                                       
 [913] "                              ),"                                                                                                       
 [914] "                      support = seq( 0,"                                                                                                
 [915] "                                     qgeom(getdistrOption(\"TruncQuantile\"),"                                                          
 [916] "                                           prob = 0.5, lower.tail = FALSE),"                                                            
 [917] "                                     by = 1"                                                                                            
 [918] "                                    ),"                                                                                                 
 [919] "                      lattice = new(\"Lattice\","                                                                                       
 [920] "                                pivot = 0, width = 1, Length = Inf, name ="                                                             
 [921] "                                gettext("                                                                                               
 [922] "                                  \"lattice of a Geometric distribution\""                                                              
 [923] "                                       )"                                                                                               
 [924] "                                ),"                                                                                                     
 [925] "                     .logExact = TRUE,"                                                                                                 
 [926] "                     .lowerExact = TRUE"                                                                                                
 [927] "                      ),"                                                                                                               
 [928] "          contains = \"Nbinom\""                                                                                                        
 [929] "          )"                                                                                                                            
 [930] ""                                                                                                                                       
 [931] "### ---- List of distributions by M. Kohl ---- ###"                                                                                     
 [932] ""                                                                                                                                       
 [933] "setClass(Class = \"DistrList\", "                                                                                                       
 [934] "            prototype = prototype(list(new(\"Norm\"))), "                                                                               
 [935] "            contains = \"list\","                                                                                                       
 [936] "            validity = function(object){"                                                                                               
 [937] "                nrvalues <- length(object)"                                                                                             
 [938] "                for(i in 1:nrvalues)"                                                                                                   
 [939] "                    if(!is(object[[i]], \"Distribution\")) "                                                                            
 [940] "                        stop(\"element \", i, \" is no 'Distribution'\")"                                                               
 [941] "                return(TRUE) "                                                                                                          
 [942] "            })"                                                                                                                         
 [943] ""                                                                                                                                       
 [944] "## inbetween-Classes: AffLinDiscreteDistribution, AffLinLatticeDistribution"                                                            
 [945] ""                                                                                                                                       
 [946] "setClass(\"AffLinDiscreteDistribution\", "                                                                                              
 [947] "          representation = representation(a = \"numeric\", b = \"numeric\","                                                            
 [948] "          X0 = \"DiscreteDistribution\"),"                                                                                              
 [949] "          prototype = prototype(a = 1, b = 0, X0 = new(\"Binom\")),"                                                                    
 [950] "          contains = \"DiscreteDistribution\""                                                                                          
 [951] "          )"                                                                                                                            
 [952] ""                                                                                                                                       
 [953] "setClass(\"AffLinLatticeDistribution\", "                                                                                               
 [954] "          contains = c(\"LatticeDistribution\", \"AffLinDiscreteDistribution\")"                                                        
 [955] "          )"                                                                                                                            
 [956] ""                                                                                                                                       
 [957] ""                                                                                                                                       
 [958] ""                                                                                                                                       
 [959] ""                                                                                                                                       
 [960] "################################"                                                                                                       
 [961] "##"                                                                                                                                     
 [962] "## Distribution List classes "                                                                                                          
 [963] "##"                                                                                                                                     
 [964] "################################"                                                                                                       
 [965] ""                                                                                                                                       
 [966] "setClass(\"UnivarDistrList\", "                                                                                                         
 [967] "            prototype = prototype(list(new(\"Norm\"))), "                                                                               
 [968] "            contains = \"DistrList\", "                                                                                                 
 [969] "            validity = function(object){"                                                                                               
 [970] "                nrvalues <- length(object)"                                                                                             
 [971] "                for(i in 1:nrvalues)"                                                                                                   
 [972] "                    if(!is(object[[i]], \"UnivariateDistribution\"))"                                                                   
 [973] "                        stop(\"element \", i, \" is no 'UniveriateDistribution'\")"                                                     
 [974] "                return(TRUE) "                                                                                                          
 [975] "            })"                                                                                                                         
 [976] ""                                                                                                                                       
 [977] ""                                                                                                                                       
 [978] "#### new from version 2.0: Mixing Distributions"                                                                                        
 [979] ""                                                                                                                                       
 [980] "################################"                                                                                                       
 [981] "##"                                                                                                                                     
 [982] "## Mixing Distribution classes "                                                                                                        
 [983] "##"                                                                                                                                     
 [984] "################################"                                                                                                       
 [985] ""                                                                                                                                       
 [986] "setClass(\"UnivarMixingDistribution\","                                                                                                 
 [987] "            representation = representation(mixCoeff = \"numeric\","                                                                    
 [988] "                             mixDistr = \"UnivarDistrList\","                                                                           
 [989] "                             gaps = \"OptionalMatrix\","                                                                                
 [990] "                             support = \"numeric\"),"                                                                                   
 [991] "            prototype = prototype(mixCoeff = 1, "                                                                                       
 [992] "                                  mixDistr = new(\"UnivarDistrList\"),"                                                                 
 [993] "                                  gaps = NULL,"                                                                                         
 [994] "                                  support = numeric(0)),"                                                                               
 [995] "            contains = \"UnivariateDistribution\","                                                                                     
 [996] "            validity = function(object){"                                                                                               
 [997] "                if(any(object@mixCoeff< -.Machine$double.eps) || "                                                                      
 [998] "                   sum(object@mixCoeff)>1+.Machine$double.eps)"                                                                         
 [999] "                   stop(\"mixing coefficients are no probabilities\")"                                                                  
[1000] "                return(TRUE)"                                                                                                           
[1001] "            })"                                                                                                                         
[1002] ""                                                                                                                                       
[1003] "setClass(\"UnivarLebDecDistribution\","                                                                                                 
[1004] "            representation = representation(mixCoeff = \"numeric\","                                                                    
[1005] "                             mixDistr = \"UnivarDistrList\"),"                                                                          
[1006] "            prototype = prototype(mixCoeff = c(\"acWeight\" = 1, "                                                                      
[1007] "                                               \"discreteWeight\" = 0),"                                                                
[1008] "                                  mixDistr = new(\"UnivarDistrList\","                                                                  
[1009] "                                              list(\"acPart\" = new(\"Norm\"),"                                                         
[1010] "                                                   \"discretePart\" = new(\"Dirac\")"                                                   
[1011] "                                                   )"                                                                                   
[1012] "                                  )),"                                                                                                  
[1013] "            contains = \"UnivarMixingDistribution\","                                                                                   
[1014] "            validity = function(object){"                                                                                               
[1015] "                if (length(object@mixCoeff)!=2)"                                                                                        
[1016] "                    stop(\"number of mixing components is not 2\")"                                                                     
[1017] "                if (!is(object@mixDistr[[1]], \"AbscontDistribution\"))"                                                                
[1018] "                    stop(\"first component must be absolutely continuous\")"                                                            
[1019] "                if (!is(object@mixDistr[[2]], \"DiscreteDistribution\"))"                                                               
[1020] "                    stop(\"second component must be discrete\")"                                                                        
[1021] "                return(TRUE)"                                                                                                           
[1022] "            })"                                                                                                                         
[1023] ""                                                                                                                                       
[1024] "setClass(\"AffLinUnivarLebDecDistribution\","                                                                                           
[1025] "          representation = representation(a = \"numeric\", b = \"numeric\","                                                            
[1026] "          X0 = \"UnivarLebDecDistribution\"),"                                                                                          
[1027] "          prototype = prototype(a = 1, b = 0, "                                                                                         
[1028] "                                X0 = new(\"UnivarLebDecDistribution\")),"                                                               
[1029] "          contains = \"UnivarLebDecDistribution\""                                                                                      
[1030] "          )"                                                                                                                            
[1031] ""                                                                                                                                       
[1032] "         "                                                                                                                              
[1033] "setClassUnion(\"UnivDistrListOrDistribution\","                                                                                         
[1034] "               c(\"UnivarDistrList\",\"UnivariateDistribution\"))"                                                                      
[1035] ""                                                                                                                                       
[1036] "setClass(\"CompoundDistribution\", representation=representation("                                                                      
[1037] "             NumbOfSummandsDistr = \"DiscreteDistribution\","                                                                           
[1038] "             SummandsDistr = \"UnivDistrListOrDistribution\"),"                                                                         
[1039] "          prototype=prototype(NumbOfSummandsDistr = new(\"Pois\"),"                                                                     
[1040] "              SummandsDistr=new(\"Norm\")),"                                                                                            
[1041] "          contains = \"UnivarMixingDistribution\""                                                                                      
[1042] "         )"                                                                                                                             
[1043] ""                                                                                                                                       
[1044] "################################"                                                                                                       
[1045] "##"                                                                                                                                     
[1046] "## virtual Distribution class Unions "                                                                                                  
[1047] "##"                                                                                                                                     
[1048] "################################"                                                                                                       
[1049] ""                                                                                                                                       
[1050] "setClassUnion(\"AcDcLcDistribution\", c(\"AbscontDistribution\","                                                                       
[1051] "               \"DiscreteDistribution\", \"UnivarLebDecDistribution\","                                                                 
[1052] "               \"CompoundDistribution\"))"                                                                                              
[1053] ""                                                                                                                                       
[1054] "setClassUnion(\"AffLinDistribution\", c(\"AffLinAbscontDistribution\","                                                                 
[1055] "               \"AffLinDiscreteDistribution\", \"AffLinUnivarLebDecDistribution\"))"                                                    
[1056] ""                                                                                                                                       
> 
> 
> 
> cleanEx(); nameEx("setToBeDefinedPkgs")
> ### * setToBeDefinedPkgs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setToBeDefinedPkgs
> ### Title: setToBeDefinedPkgs
> ### Aliases: setToBeDefinedPkgs
> ### Keywords: utilities
> 
> ### ** Examples
> 
> setToBeDefinedPkgs(pkgs = c("distr","distrEx"),
+                    keywordstyles = paste("\bfseries\color{",c("blue","red"),"}",
+                          sep="", collapse=""))
Warning: '\c' is an unrecognized escape in a character string
Warning: unrecognized escape removed from "\bfseries\color{"
> ### not to be used:
> print(SweaveListingUtils:::.tobeDefinedPkgs)
     [,1]      [,2]                                     
[1,] "distr"   "\bfseriescolor{blue}\bfseriescolor{red}"
[2,] "distrEx" "\bfseriescolor{blue}\bfseriescolor{red}"
> 
> 
> 
> cleanEx(); nameEx("taglist")
> ### * taglist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taglist
> ### Title: S3 class taglist
> ### Aliases: print.taglist taglist
> ### Keywords: utilities
> 
> ### ** Examples
> 
>  TL <- taglist("HA"=8,"JUI"=7,"butzi", list=list("HU"="AHAL","HA"="BETA","BUZ"))
>  print(TL)

HU=AHAL,HA=BETA,V3=BUZ,HA=8,JUI=7,V6=butzi
>  print(TL, LineLength=10, first.print="myList=", offset.start=4,
+            withFinalLineBreak = FALSE)
myList=HU=AHAL,%
    HA=BETA,%
    V3=BUZ,%
    HA=8,%
    JUI=7,%
    V6=butzi>  
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.492 0.044 2.841 0.004 0.004 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
