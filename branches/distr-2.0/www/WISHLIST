%##################################################################
%------------------------------------------------------------------
Peter's little wish list...
%------------------------------------------------------------------
%##################################################################

%------------------------------------------------------------------
::::all packages::::
%------------------------------------------------------------------
... a (partly) automatic update of the homepages:
-> new versions should go into it
-> release date 
-> possibly x-check with DESCRIPTION file
done: setNewRVersion.R in /utils - folder

@F/Rest:  RtoDPQ

Strategie Vorschlag:

Univariat:
if(qfun)
   { if(!pfun) pfun=q2p(qfun)
     if(!dfun) dfun=p2d(pfun)
     if(!rfun) rfun=q2r(qfun) 
   } 
else 
   { if(pfun)
        { qfun=p2q(pfun)
          if(!dfun) dfun=p2d(pfun)
          if(!rfun) rfun=q2r(qfun)
        }
     else 
        { if(dfun)
             { pfun=d2p(dfun)
               qfun=p2q(pfun)
               if(!rfun) rfun=q2r(qfun)
             }
          else 
             { if (!rfun) stop("need at least one slot")
               dfun=r2d(rfun)
               pfun=d2p(dfun)
               qfun=p2q(pfun)
             }
        }
    }             
    

Multivariat: (ohne q!)
     if(pfun)
        { if(!dfun) dfun=p2d(pfun)
          if(!rfun) rfun=d2r(dfun) 
        }
     else 
        { if(dfun)
             { pfun=d2p(dfun)
               if(!rfun) rfun=d2r(dfun)
             }
          else 
             { if (!rfun) stop("need at least one slot")
               dfun=r2d(rfun)
               pfun=d2p(dfun)
             }
        }

    Muss aber noch mal über "gute" Methoden q2p p2q p2d r2d q2r d2p d2r nachdenken... 
    +ein etwas sichereres "integrate" (vgl. Matthias' distrExintegrate) sollte es für d2p schon sein...
    +für q2p p2q braucht man eigentlich jeweils nur gute Abschneidepunkte, der Rest geht mit approxfun
    +r2d können wir so lassen / im Multivariaten weiß ich nicht so recht...
    +p2d : hier geht so etwas wie diag(attr(numericDeriv(quote(p(x)),"x"),"gradient")) auf einem Gitter x und anschließendes approxfun
            / im Multivariaten weiß ich nicht so recht...
    +q2r : ist trivial ->  q(x)(runif(n))
    +d2r : rejection sampling -> Kontakt mit Josef Leydold
    
    bisher ~ r2p vielleicht sollten wir bei AbscontDistr hier noch ein bisschen Glätten statt nur ecdf zu verwenden...
    In jedem Fall sollten wir die Funktionen q2p p2q p2d r2d q2r d2p wegen ihrer späteren Überschreibbarkeit
    implementieren
+realized in 2.0    
     
distrEx

@M: Var für multivariate Verteilungen sollte kein Pb sein; siehe Code in (Functionals.R)
@M: Var für bedingte Verteilungen (bedingte Varianz) ist vorbereitet; habe nur noch kein gutes Beispiel....


  
