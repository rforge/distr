
R version 3.5.1 RC (2018-06-24 r74935) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "distrRmetrics"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "distrRmetrics-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('distrRmetrics')
Loading required package: distr
Loading required package: startupmsg
:startupmsg>  Utilities for Start-Up Messages (version 0.9.5)
:startupmsg> 
:startupmsg>  For more information see ?"startupmsg",
:startupmsg>  NEWS("startupmsg")

Loading required package: sfsmisc
:distr>  Object Oriented Implementation of Distributions (version
:distr>  2.8.0)
:distr> 
:distr>  Attention: Arithmetics on distribution objects are
:distr>  understood as operations on corresponding random variables
:distr>  (r.v.s); see distrARITH().
:distr> 
:distr>  Some functions from package 'stats' are intentionally masked
:distr>  ---see distrMASK().
:distr> 
:distr>  Note that global options are controlled by distroptions()
:distr>  ---c.f. ?"distroptions".
:distr> 
:distr>  For more information see ?"distr", NEWS("distr"), as well as
:distr>    http://distr.r-forge.r-project.org/
:distr>  Package "distrDoc" provides a vignette to this package as
:distr>  well as to several extension packages; try
:distr>  vignette("distr").


Attaching package: 'distr'

The following objects are masked from 'package:stats':

    df, qqplot, sd

Loading required package: fBasics
Loading required package: timeDate
Loading required package: timeSeries
Loading required package: fGarch
:distrRmetrics>  Distribution Classes for Distributions from
:distrRmetrics>  Rmetrics (version 2.7.0)
:distrRmetrics> 
:distrRmetrics> 
:distrRmetrics>  For more information see ?"distrRmetrics",
:distrRmetrics>  NEWS("distrRmetrics"), as well as
:distrRmetrics>    http://distr.r-forge.r-project.org/
:distrRmetrics>  Package "distrDoc" provides a vignette to
:distrRmetrics>  this package as well as to several extension
:distrRmetrics>  packages; try vignette("distr").

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SNorm-class")
> ### * SNorm-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SNorm-class
> ### Title: SNorm distribution
> ### Aliases: SNorm-class mean,SNorm-method mean<-,SNorm-method
> ###   nu,SNorm-method nu<-,SNorm-method sd,SNorm-method sd<-,SNorm-method
> ###   xi,SNorm-method xi<-,SNorm-method
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (SN <- SNorm(xi=2)) # SN is a skewed normal distribution with nu = 3.
Distribution Object of Class: SNorm
 xi: 2
 mean: 0
 sd: 1
> set.seed(1)
> r(SN)(1) # one random number generated from this distribution, e.g. -0.4037723
[1] -0.4037723
> d(SN)(1) # Density of this distribution is  0.1914826 for x = 1.
[1] 0.1914826
> p(SN)(1) # Probability that x < 1 is 0.8374454.
[1] 0.8374454
> q(SN)(.1) # Probability that x < -1.137878 is 0.1.
[1] -1.137878
> ## in RStudio or Jupyter IRKernel, use q.l(.)(.) instead of q(.)(.)
> xi(SN) # shape of this distribution is 2.
[1] 2
> xi(SN) <- 2.5 # shape of this distribution is now 2.5.
> plot(SN)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SNorm-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SNorm")
> ### * SNorm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SNorm
> ### Title: Generating function for skewed normal class
> ### Aliases: SNorm
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (SN <- SNorm(mean = 1, sd = 1, xi = 0.5))
Distribution Object of Class: SNorm
 xi: 0.5
 mean: 1
 sd: 1
> plot(SN)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SNorm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SNormParameter-class")
> ### * SNormParameter-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SNormParameter-class
> ### Title: Parameter of an SNorm distributions
> ### Aliases: SNormParameter-class mean,SNormParameter-method
> ###   sd,SNormParameter-method xi,SNormParameter-method
> ### Keywords: distribution models
> 
> ### ** Examples
> 
> P <- new("SNormParameter")
> mean(P)
[1] 0
> sd(P)
[1] 1
> xi(P)
[1] 1.5
> P
An object of class "SNormParameter"
Slot "xi":
[1] 1.5

Slot "mean":
[1] 0

Slot "sd":
[1] 1

Slot "name":
[1] "Parameter of a Skewed Normal distribution"

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SNormParameter-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SSTd-class")
> ### * SSTd-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SSTd-class
> ### Title: SSTd distribution
> ### Aliases: SSTd-class mean,SSTd-method mean<-,SSTd-method nu nu-methods
> ###   nu<- nu<--methods nu,SSTd-method nu<-,SSTd-method sd,SSTd-method
> ###   sd<-,SSTd-method xi xi-methods xi<- xi<--methods xi,SSTd-method
> ###   xi<-,SSTd-method
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (ST <- SSTd(xi=2, nu = 3)) # ST is a skewed t distribution with xi = 2 and nu = 3.
Distribution Object of Class: SSTd
 mean: 0
 sd: 1
 nu: 3
 xi: 2
> set.seed(1)
> r(ST)(1) # one random number generated from this distribution, e.g. -0.4432824
[1] -0.4432824
> d(ST)(1) # Density of this distribution is 0.1204624 for x = 1.
[1] 0.1204624
> p(ST)(1) # Probability that x < 1 is 0.9035449.
[1] 0.9035449
> q(ST)(.1) # Probability that x < -0.4432824 is 0.1.
[1] -0.7689127
> ## in RStudio or Jupyter IRKernel, use q.l(.)(.) instead of q(.)(.)
> nu(ST) # df of this distribution is 3.
[1] 3
> nu(ST) <- 4 # df of this distribution is now 4.
> plot(ST)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SSTd-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SSTd")
> ### * SSTd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SSTd
> ### Title: Generating function for SSTd-class
> ### Aliases: SSTd
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (ST <- SSTd(mean = 1, sd = 1, xi = 0.5))
Distribution Object of Class: SSTd
 mean: 1
 sd: 1
 nu: 5
 xi: 0.5
> plot(ST)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SSTd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SSTdParameter-class")
> ### * SSTdParameter-class
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SSTdParameter-class
> ### Title: Parameter of an SSTd distributions
> ### Aliases: SSTdParameter-class mean,SSTdParameter-method
> ###   sd,SSTdParameter-method xi,SSTdParameter-method
> ###   nu,SSTdParameter-method
> ### Keywords: distribution models
> 
> ### ** Examples
> 
> P <- new("SSTdParameter")
> mean(P)
[1] 0
> sd(P)
[1] 1
> xi(P)
[1] 1.5
> nu(P)
[1] 5
> P
An object of class "SSTdParameter"
Slot "mean":
[1] 0

Slot "sd":
[1] 1

Slot "nu":
[1] 5

Slot "xi":
[1] 1.5

Slot "name":
[1] "Parameter of a Skewed-T-distribution"

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SSTdParameter-class", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("STd")
> ### * STd
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: STd
> ### Title: Generating function for standardized T distribution class
> ### Aliases: STd
> ### Keywords: distribution
> 
> ### ** Examples
> 
> (ST <- STd(mean = 1, sd = 1, nu = 3))
Distribution Object of Class: AffLinAbscontDistribution
Warning in new("standardGeneric", .Data = function (object)  :
  arithmetics on distributions are understood as operations on r.v.'s
see 'distrARITH()'; for switching off this warning see '?distroptions'
> plot(ST)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("STd", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.39 0.2 2.61 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
